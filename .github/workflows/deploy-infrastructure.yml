name: Deploy Azure Infrastructure

on:
  workflow_dispatch:
    inputs:
      environment:
        description: 'Environment to deploy'
        required: true
        type: choice
        options:
          - dev
          - staging
          - prod
      stage:
        description: 'Deployment stage'
        required: true
        type: choice
        options:
          - foundation
          - security
          - ai
          - apps
          - all
        default: 'foundation'

permissions:
  id-token: write   # Required for OIDC authentication
  contents: read

jobs:
  deploy:
    name: Deploy ${{ inputs.stage }} to ${{ inputs.environment }}
    runs-on: ubuntu-latest
    environment: ${{ inputs.environment }}

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Log in to Azure using OIDC
        uses: azure/login@v2
        with:
          client-id: ${{ secrets.AZURE_CLIENT_ID }}
          tenant-id: ${{ secrets.AZURE_TENANT_ID }}
          subscription-id: ${{ secrets.AZURE_SUBSCRIPTION_ID }}

      - name: Set resource group name
        id: vars
        run: |
          echo "RESOURCE_GROUP=loan-defenders-${{ inputs.environment }}-rg" >> $GITHUB_ENV
          echo "DEPLOYMENT_NAME=${{ inputs.stage }}-deployment-$(date +%Y%m%d-%H%M%S)" >> $GITHUB_ENV

      - name: Create resource group if needed
        run: |
          if ! az group show --name ${{ env.RESOURCE_GROUP }} &>/dev/null; then
            echo "Creating resource group: ${{ env.RESOURCE_GROUP }}"
            az group create \
              --name ${{ env.RESOURCE_GROUP }} \
              --location eastus2 \
              --tags environment=${{ inputs.environment }} project=loan-defenders
          else
            echo "Resource group exists: ${{ env.RESOURCE_GROUP }}"
          fi

      - name: Compile Bicep to ARM template
        run: |
          echo "Compiling Bicep to ARM JSON (best practice for CI/CD)..."
          az bicep build \
            --file infrastructure/bicep/main-avm.bicep \
            --outfile /tmp/main-avm.json
          echo "✓ Bicep compiled successfully"

      - name: Deploy ${{ inputs.stage }} stage (Azure Verified Modules)
        run: |
          echo "Deploying stage: ${{ inputs.stage }}"
          echo "Environment: ${{ inputs.environment }}"
          echo "Resource Group: ${{ env.RESOURCE_GROUP }}"
          echo "Deployment Name: ${{ env.DEPLOYMENT_NAME }}"
          echo "Using Azure Verified Modules (AVM)"
          echo ""

          # Get subscription ID for REST API calls
          SUBSCRIPTION_ID=$(az account show --query id -o tsv)
          echo "Subscription ID: $SUBSCRIPTION_ID"

          # Read and merge parameters
          echo "Preparing deployment parameters..."
          PARAMS_JSON=$(cat infrastructure/bicep/environments/${{ inputs.environment }}.parameters.json | jq '.parameters')
          DEPLOYMENT_STAGE_PARAM=$(echo '{"deploymentStage": {"value": "${{ inputs.stage }}"}}' | jq '.')
          MERGED_PARAMS=$(echo "$PARAMS_JSON $DEPLOYMENT_STAGE_PARAM" | jq -s '.[0] * .[1]')

          # Read the ARM template
          TEMPLATE_CONTENT=$(cat /tmp/main-avm.json)

          # Create deployment request body
          DEPLOYMENT_BODY=$(jq -n \
            --argjson template "$TEMPLATE_CONTENT" \
            --argjson parameters "$MERGED_PARAMS" \
            '{
              properties: {
                template: $template,
                parameters: $parameters,
                mode: "Incremental"
              }
            }')

          # Deploy using Azure REST API (bypasses CLI bug)
          echo "Initiating deployment via Azure REST API..."
          DEPLOY_RESPONSE=$(az rest \
            --method PUT \
            --uri "https://management.azure.com/subscriptions/$SUBSCRIPTION_ID/resourcegroups/${{ env.RESOURCE_GROUP }}/providers/Microsoft.Resources/deployments/${{ env.DEPLOYMENT_NAME }}?api-version=2021-04-01" \
            --body "$DEPLOYMENT_BODY" \
            --headers "Content-Type=application/json" 2>&1)

          if [ $? -ne 0 ]; then
            echo "✗ Failed to initiate deployment"
            echo "$DEPLOY_RESPONSE"
            exit 1
          fi

          echo "✓ Deployment initiated successfully"
          echo "Deployment ID: ${{ env.DEPLOYMENT_NAME }}"
          echo ""

          # Poll for deployment completion using REST API
          echo "Polling deployment status..."
          MAX_RETRIES=90  # 15 minutes
          RETRY_COUNT=0

          while [ $RETRY_COUNT -lt $MAX_RETRIES ]; do
            STATUS_RESPONSE=$(az rest \
              --method GET \
              --uri "https://management.azure.com/subscriptions/$SUBSCRIPTION_ID/resourcegroups/${{ env.RESOURCE_GROUP }}/providers/Microsoft.Resources/deployments/${{ env.DEPLOYMENT_NAME }}?api-version=2021-04-01" \
              2>/dev/null)
            
            if [ $? -eq 0 ]; then
              PROVISIONING_STATE=$(echo "$STATUS_RESPONSE" | jq -r '.properties.provisioningState // "Unknown"')
              
              echo "Current state: $PROVISIONING_STATE"
              
              if [ "$PROVISIONING_STATE" == "Succeeded" ]; then
                echo "✓ Deployment succeeded!"
                
                # Save outputs for later display
                echo "$STATUS_RESPONSE" | jq -r '.properties.outputs // {}' > /tmp/deployment-outputs.json
                
                break
              elif [ "$PROVISIONING_STATE" == "Failed" ] || [ "$PROVISIONING_STATE" == "Canceled" ]; then
                echo "✗ Deployment failed with state: $PROVISIONING_STATE"
                
                # Save error details for later display
                echo "$STATUS_RESPONSE" | jq -r '.properties.error // {}' > /tmp/deployment-error.json
                
                exit 1
              fi
            fi
            
            sleep 10
            RETRY_COUNT=$((RETRY_COUNT + 1))
          done

          if [ $RETRY_COUNT -eq $MAX_RETRIES ]; then
            echo "✗ Deployment timed out after 15 minutes"
            exit 1
          fi

      - name: Show deployment outputs
        if: success()
        run: |
          echo "Deployment completed successfully!"
          echo ""
          echo "Deployment outputs:"
          if [ -f /tmp/deployment-outputs.json ]; then
            cat /tmp/deployment-outputs.json | jq '.'
          else
            echo "No outputs available"
          fi

      - name: Show deployment errors
        if: failure()
        run: |
          echo "Deployment failed. Error details:"
          if [ -f /tmp/deployment-error.json ]; then
            cat /tmp/deployment-error.json | jq '.'
          else
            echo "Could not retrieve error details"
          fi

      - name: Post deployment summary
        if: always()
        run: |
          echo "## Deployment Summary" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "- **Stage**: ${{ inputs.stage }}" >> $GITHUB_STEP_SUMMARY
          echo "- **Environment**: ${{ inputs.environment }}" >> $GITHUB_STEP_SUMMARY
          echo "- **Resource Group**: ${{ env.RESOURCE_GROUP }}" >> $GITHUB_STEP_SUMMARY
          echo "- **Deployment Name**: ${{ env.DEPLOYMENT_NAME }}" >> $GITHUB_STEP_SUMMARY
          echo "- **Status**: ${{ job.status }}" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY

          if [ "${{ inputs.stage }}" = "foundation" ]; then
            echo "### Next Steps" >> $GITHUB_STEP_SUMMARY
            echo "Deploy security stage: Run this workflow with stage=security" >> $GITHUB_STEP_SUMMARY
          elif [ "${{ inputs.stage }}" = "security" ]; then
            echo "### Next Steps" >> $GITHUB_STEP_SUMMARY
            echo "Deploy AI stage: Run this workflow with stage=ai" >> $GITHUB_STEP_SUMMARY
          elif [ "${{ inputs.stage }}" = "ai" ]; then
            echo "### Next Steps" >> $GITHUB_STEP_SUMMARY
            echo "Deploy apps stage: Run this workflow with stage=apps" >> $GITHUB_STEP_SUMMARY
          fi
