name: 🏗️ Infrastructure Deployment

on:
  push:
    branches: [ main ]
    paths:
      - 'infrastructure/**'
      - '.github/workflows/infrastructure-deploy.yml'
  pull_request:
    branches: [ main ]
    paths:
      - 'infrastructure/**'
      - '.github/workflows/infrastructure-deploy.yml'
  workflow_dispatch:
    inputs:
      environment:
        description: 'Environment to deploy'
        required: true
        default: 'dev'
        type: choice
        options:
        - dev
        - staging
        - prod

env:
  TF_VERSION: '1.6.0'
  ARM_CLIENT_ID: ${{ secrets.AZURE_CLIENT_ID }}
  ARM_CLIENT_SECRET: ${{ secrets.AZURE_CLIENT_SECRET }}
  ARM_SUBSCRIPTION_ID: ${{ secrets.AZURE_SUBSCRIPTION_ID }}
  ARM_TENANT_ID: ${{ secrets.AZURE_TENANT_ID }}

jobs:
  terraform-plan:
    name: 📋 Terraform Plan
    runs-on: ubuntu-latest
    environment: ${{ github.event.inputs.environment || 'dev' }}
    
    outputs:
      tfplanExitCode: ${{ steps.tf-plan.outputs.exitcode }}
      
    steps:
    - name: 🛎️ Checkout
      uses: actions/checkout@v4

    - name: ⚙️ Setup Terraform
      uses: hashicorp/setup-terraform@v3
      with:
        terraform_version: ${{ env.TF_VERSION }}

    - name: 🔐 Azure Login
      uses: azure/login@v1
      with:
        creds: |
          {
            "clientId": "${{ secrets.AZURE_CLIENT_ID }}",
            "clientSecret": "${{ secrets.AZURE_CLIENT_SECRET }}",
            "subscriptionId": "${{ secrets.AZURE_SUBSCRIPTION_ID }}",
            "tenantId": "${{ secrets.AZURE_TENANT_ID }}"
          }

    - name: 🏗️ Terraform Init
      working-directory: infrastructure/terraform/environments/dev
      run: |
        terraform init \
          -backend-config="storage_account_name=${{ secrets.TF_STATE_STORAGE_ACCOUNT }}" \
          -backend-config="access_key=${{ secrets.TF_STATE_ACCESS_KEY }}"

    - name: 🔍 Terraform Validate
      working-directory: infrastructure/terraform/environments/dev
      run: terraform validate

    - name: 📋 Terraform Plan
      id: tf-plan
      working-directory: infrastructure/terraform/environments/dev
      run: |
        export exitcode=0
        terraform plan -detailed-exitcode -no-color -out tfplan || export exitcode=$?
        
        echo "exitcode=$exitcode" >> $GITHUB_OUTPUT
        
        if [ $exitcode -eq 1 ]; then
          echo "Terraform Plan Failed"
          exit 1
        elif [ $exitcode -eq 0 ]; then
          echo "No changes detected"
        elif [ $exitcode -eq 2 ]; then
          echo "Changes detected"
        fi

    - name: 📤 Upload Terraform Plan
      if: steps.tf-plan.outputs.exitcode == 2
      uses: actions/upload-artifact@v3
      with:
        name: tfplan-${{ github.event.inputs.environment || 'dev' }}
        path: infrastructure/terraform/environments/dev/tfplan

    - name: 📝 Create Plan Summary
      uses: actions/github-script@v7
      if: github.event_name == 'pull_request'
      with:
        github-token: ${{ secrets.GITHUB_TOKEN }}
        script: |
          const output = `## 🏗️ Terraform Plan Results
          
          **Environment:** \`${{ github.event.inputs.environment || 'dev' }}\`
          **Exit Code:** \`${{ steps.tf-plan.outputs.exitcode }}\`
          
          ${steps.tf-plan.outputs.exitcode == '2' ? '✅ Changes detected - ready for apply' : 
            steps.tf-plan.outputs.exitcode == '0' ? '✅ No changes detected' : '❌ Plan failed'}
          
          <details>
          <summary>Show Plan Output</summary>
          
          \`\`\`terraform
          ${{ steps.tf-plan.outputs.stdout }}
          \`\`\`
          
          </details>`;
          
          github.rest.issues.createComment({
            issue_number: context.issue.number,
            owner: context.repo.owner,
            repo: context.repo.repo,
            body: output
          });

  terraform-apply:
    name: 🚀 Terraform Apply
    runs-on: ubuntu-latest
    environment: ${{ github.event.inputs.environment || 'dev' }}
    needs: [terraform-plan]
    if: needs.terraform-plan.outputs.tfplanExitCode == 2 && (github.ref == 'refs/heads/main' || github.event_name == 'workflow_dispatch')
    
    steps:
    - name: 🛎️ Checkout
      uses: actions/checkout@v4

    - name: ⚙️ Setup Terraform
      uses: hashicorp/setup-terraform@v3
      with:
        terraform_version: ${{ env.TF_VERSION }}

    - name: 🔐 Azure Login
      uses: azure/login@v1
      with:
        creds: |
          {
            "clientId": "${{ secrets.AZURE_CLIENT_ID }}",
            "clientSecret": "${{ secrets.AZURE_CLIENT_SECRET }}",
            "subscriptionId": "${{ secrets.AZURE_SUBSCRIPTION_ID }}",
            "tenantId": "${{ secrets.AZURE_TENANT_ID }}"
          }

    - name: 🏗️ Terraform Init
      working-directory: infrastructure/terraform/environments/dev
      run: |
        terraform init \
          -backend-config="storage_account_name=${{ secrets.TF_STATE_STORAGE_ACCOUNT }}" \
          -backend-config="access_key=${{ secrets.TF_STATE_ACCESS_KEY }}"

    - name: 📥 Download Terraform Plan
      uses: actions/download-artifact@v3
      with:
        name: tfplan-${{ github.event.inputs.environment || 'dev' }}
        path: infrastructure/terraform/environments/dev/

    - name: 🚀 Terraform Apply
      working-directory: infrastructure/terraform/environments/dev
      run: terraform apply -auto-approve tfplan

    - name: 📤 Upload Terraform Outputs
      id: tf-outputs
      working-directory: infrastructure/terraform/environments/dev
      run: |
        terraform output -json > terraform-outputs.json
        echo "Terraform outputs saved to terraform-outputs.json"

    - name: 📊 Save Deployment Info
      uses: actions/upload-artifact@v3
      with:
        name: deployment-info-${{ github.event.inputs.environment || 'dev' }}
        path: infrastructure/terraform/environments/dev/terraform-outputs.json

    - name: ✅ Deployment Summary
      run: |
        echo "## 🎉 Deployment Complete!" >> $GITHUB_STEP_SUMMARY
        echo "" >> $GITHUB_STEP_SUMMARY
        echo "**Environment:** ${{ github.event.inputs.environment || 'dev' }}" >> $GITHUB_STEP_SUMMARY
        echo "**Timestamp:** $(date -u +"%Y-%m-%d %H:%M:%S UTC")" >> $GITHUB_STEP_SUMMARY
        echo "" >> $GITHUB_STEP_SUMMARY
        echo "### 🔗 Resources Created:" >> $GITHUB_STEP_SUMMARY
        echo "- Azure OpenAI Service" >> $GITHUB_STEP_SUMMARY
        echo "- Key Vault for secrets" >> $GITHUB_STEP_SUMMARY
        echo "- Virtual Network with private subnets" >> $GITHUB_STEP_SUMMARY
        echo "- Container Apps environment" >> $GITHUB_STEP_SUMMARY
        echo "- Application Insights monitoring" >> $GITHUB_STEP_SUMMARY
        echo "" >> $GITHUB_STEP_SUMMARY
        echo "### 🚀 Next Steps:" >> $GITHUB_STEP_SUMMARY
        echo "1. Configure application secrets in Key Vault" >> $GITHUB_STEP_SUMMARY
        echo "2. Deploy the Loan Avengers application" >> $GITHUB_STEP_SUMMARY
        echo "3. Run integration tests" >> $GITHUB_STEP_SUMMARY