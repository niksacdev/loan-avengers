{"config":{"lang":["en"],"separator":"[\\s\\-]+","pipeline":["stopWordFilter"]},"docs":[{"location":"","title":"Loan Avengers Documentation","text":"<p>Welcome to the Loan Avengers documentation! This project showcases Microsoft Agent Framework and Azure AI Foundry through an intelligent multi-agent loan processing system that delivers decisions in under 2 minutes.</p>"},{"location":"#what-is-loan-avengers","title":"\ud83e\uddb8 What is Loan Avengers?","text":"<p>Loan Avengers is a demonstration of multi-agent AI orchestration where specialized AI agents work together to process loan applications. Think of it as your AI Dream Team for financial services:</p> <ul> <li>\ud83e\uddb8\u200d\u2642\ufe0f Cap-ital America - Loan Orchestrator coordinating the entire workflow</li> <li>\ud83e\uddb8\u200d\u2640\ufe0f Scarlet Witch-Credit - Credit Specialist analyzing creditworthiness</li> <li>\ud83e\uddb8 Hawk-Income - Income Specialist verifying employment and income</li> <li>\ud83e\uddb9\u200d\u2642\ufe0f Doctor Strange-Risk - Risk Advisor synthesizing all assessments</li> </ul>"},{"location":"#key-features","title":"\u2728 Key Features","text":""},{"location":"#microsoft-agent-framework","title":"\ud83e\udd16 Microsoft Agent Framework","text":"<ul> <li>5 specialized agents with distinct personalities and expertise</li> <li>Autonomous decision-making powered by Azure AI</li> <li>Real-time coordination through agent threads</li> <li>Tool integration via MCP (Model Context Protocol) servers</li> </ul>"},{"location":"#lightning-fast-processing","title":"\u26a1 Lightning Fast Processing","text":"<ul> <li>&lt; 2 minute end-to-end processing time</li> <li>No forms to fill - conversational interface</li> <li>Real-time updates as agents process your application</li> <li>Complete transparency - see every agent's assessment</li> </ul>"},{"location":"#modern-tech-stack","title":"\ud83c\udfa8 Modern Tech Stack","text":"<ul> <li>Frontend: React 19 + TypeScript + Vite</li> <li>Backend: Python 3.12 + FastAPI + Microsoft Agent Framework</li> <li>Infrastructure: Azure Container Apps + Azure AI Foundry</li> <li>Developer Tools: UV package manager + MkDocs Material</li> </ul>"},{"location":"#quick-start","title":"\ud83d\ude80 Quick Start","text":"<p>New to Loan Avengers? Start here:</p> <ul> <li> <p> Getting Started</p> <p>Install dependencies and run your first loan application in 10 minutes</p> <p> Quick Start Guide</p> </li> <li> <p> User Guide</p> <p>Learn how to use the application and understand the AI-powered workflow</p> <p> User Documentation</p> </li> <li> <p> Developer Guide</p> <p>Set up your development environment and contribute to the project</p> <p> Developer Docs</p> </li> <li> <p> Architecture</p> <p>Understand the multi-agent system design and technical decisions</p> <p> System Architecture</p> </li> </ul>"},{"location":"#see-it-in-action","title":"\ud83d\udcf8 See It In Action","text":""},{"location":"#landing-page-meet-your-ai-dream-team","title":"Landing Page - Meet Your AI Dream Team","text":"<p>The home page introduces the AI Dream Team of specialized loan processing agents</p>"},{"location":"#live-agent-workflow-watch-the-magic-happen","title":"Live Agent Workflow - Watch the Magic Happen","text":"<p>Real-time agent coordination as each specialist processes your application</p>"},{"location":"#instant-results-loan-approved","title":"Instant Results - Loan Approved! \ud83c\udf89","text":"<p>Complete loan decision with full transparency and agent recommendations</p>"},{"location":"#architecture-highlights","title":"\ud83c\udfd7\ufe0f Architecture Highlights","text":""},{"location":"#multi-agent-workflow","title":"Multi-Agent Workflow","text":"<pre><code>graph LR\n    User[\ud83d\udc64 User] --&gt; Coordinator[\ud83e\uddb8\u200d\u2642\ufe0f Coordinator]\n    Coordinator --&gt; Intake[\ud83d\udccb Intake Agent]\n    Intake --&gt; Credit[\ud83d\udcb3 Credit Agent]\n    Credit --&gt; Income[\ud83d\udcb0 Income Agent]\n    Income --&gt; Risk[\u2696\ufe0f Risk Agent]\n    Risk --&gt; Decision[\u2705 Decision]\n    Decision --&gt; User</code></pre>"},{"location":"#mcp-tool-servers","title":"MCP Tool Servers","text":"<ul> <li>Application Verification (Port 8010) - Validates loan application data</li> <li>Document Processing (Port 8011) - Processes uploaded documents</li> <li>Financial Calculations (Port 8012) - Performs complex financial calculations</li> </ul>"},{"location":"#azure-deployment","title":"Azure Deployment","text":"<ul> <li>Azure Container Apps for API and UI</li> <li>Azure AI Foundry for agent orchestration</li> <li>Azure Application Gateway for load balancing</li> <li>Azure Application Insights for observability</li> </ul>"},{"location":"#why-this-project","title":"\ud83c\udfaf Why This Project?","text":"<p>Loan Avengers demonstrates several cutting-edge concepts:</p> <ol> <li>Multi-Agent Orchestration - Complex workflows coordinated by autonomous agents</li> <li>Personality-Driven AI - Each agent has unique personality and expertise</li> <li>Tool Integration - MCP servers provide agents with specialized capabilities</li> <li>Production-Ready - Full Azure deployment with observability and monitoring</li> <li>AI-Augmented Development - Built by 1 developer + AI agents (productivity of 8-12 person team)</li> </ol>"},{"location":"#documentation-sections","title":"\ud83d\udcda Documentation Sections","text":""},{"location":"#for-users","title":"For Users","text":"<ul> <li>Getting Started - Installation and first steps</li> <li>User Guide - How to use the application</li> <li>Product Vision - Revolutionary loan experience</li> </ul>"},{"location":"#for-developers","title":"For Developers","text":"<ul> <li>Developer Guide - Development environment setup</li> <li>API Reference - REST API documentation</li> <li>Testing Guide - Writing and running tests</li> </ul>"},{"location":"#for-architects","title":"For Architects","text":"<ul> <li>System Architecture - Technical design overview</li> <li>Agent Framework - Multi-agent implementation</li> <li>Architecture Decision Records - 14 ADRs documenting decisions</li> </ul>"},{"location":"#for-devops","title":"For DevOps","text":"<ul> <li>Azure Deployment - Cloud deployment guide</li> <li>Monitoring - Observability and logging</li> <li>CI/CD Pipeline - GitHub Actions workflows</li> </ul>"},{"location":"#contributing","title":"\ud83e\udd1d Contributing","text":"<p>We welcome contributions! See our Contributing Guide for: - Code of conduct - Development workflow - Pull request process - Testing requirements</p>"},{"location":"#support","title":"\ud83d\udcde Support","text":"<ul> <li>Documentation: You're reading it! \ud83d\udcd6</li> <li>GitHub Issues: Report bugs or request features</li> <li>Discussions: Ask questions and share ideas</li> </ul>"},{"location":"#learning-resources","title":"\ud83c\udf93 Learning Resources","text":""},{"location":"#microsoft-technologies","title":"Microsoft Technologies","text":"<ul> <li>Microsoft Agent Framework Documentation</li> <li>Azure AI Foundry</li> <li>Model Context Protocol</li> </ul>"},{"location":"#project-specific","title":"Project-Specific","text":"<ul> <li>Development Philosophy - AI-augmented development approach</li> <li>AI Workflow - How this project was built</li> <li>Responsible AI - Ethical AI practices</li> </ul> Ready to Get Started? <p>Install the project and run your first loan application in 10 minutes!</p> \ud83d\ude80 Quick Start Guide"},{"location":"ai-development/","title":"Index","text":"<p>Coming soon...</p>"},{"location":"ai-development/developer-agents/","title":"Developer Agents","text":"<p>Coming soon...</p>"},{"location":"ai-development/philosophy/","title":"Development Philosophy: Human-AI Collaborative Development","text":"<p>\"The future of software development is not about replacing humans with AI, but about amplifying human capability through intelligent orchestration of AI agents.\"</p>"},{"location":"ai-development/philosophy/#executive-summary","title":"Executive Summary","text":"<p>The Loan Avengers project represents a paradigm shift in software development methodology. Rather than traditional multi-disciplinary human teams, we employ a single human developer orchestrating multiple AI agents to achieve unprecedented productivity while maintaining enterprise-grade quality.</p> <p>This approach has demonstrated: - 10x faster development cycles - 90% reduction in team size requirements  - Higher code quality through multi-layer AI review - Perfect documentation maintained continuously by AI agents - Rapid design iteration unconstrained by human labor costs</p>"},{"location":"ai-development/philosophy/#core-philosophy","title":"Core Philosophy","text":""},{"location":"ai-development/philosophy/#human-as-strategic-orchestrator","title":"Human as Strategic Orchestrator","text":"<p>The human developer focuses on: - Strategic thinking and architectural decisions - Business alignment and product direction - Quality control and functional validation - Agent coordination and task delegation - Final decision-making on technical tradeoffs</p>"},{"location":"ai-development/philosophy/#ai-as-force-multiplier","title":"AI as Force Multiplier","text":"<p>AI agents provide: - Parallel execution across multiple workstreams - Specialized expertise in domain-specific areas - Consistent quality through automated best practices - Rapid iteration with minimal labor costs - Continuous maintenance of documentation and tests</p>"},{"location":"ai-development/philosophy/#documentation-as-foundation","title":"Documentation as Foundation","text":"<p>The quality of documentation directly correlates with agent autonomy: - Better specifications \u2192 More autonomous agents - Living documentation \u2192 Self-maintaining systems - Clear boundaries \u2192 Effective human-AI collaboration - Structured knowledge \u2192 Transferable institutional memory</p>"},{"location":"ai-development/philosophy/#development-workflow-evolution","title":"Development Workflow Evolution","text":""},{"location":"ai-development/philosophy/#from-sequential-to-parallel","title":"From Sequential to Parallel","text":"<p>Traditional Team: <pre><code>Product Manager \u2192 Architect \u2192 Frontend \u2192 Backend \u2192 QA \u2192 DevOps\n    (Days)         (Days)      (Weeks)    (Weeks)   (Days)  (Days)\n</code></pre></p> <p>AI-Augmented: <pre><code>Human Orchestrator \u2510\n                   \u251c\u2500\u2192 UI Agent (Parallel)\n                   \u251c\u2500\u2192 API Agent (Parallel)  \n                   \u251c\u2500\u2192 Test Agent (Parallel)\n                   \u251c\u2500\u2192 Docs Agent (Parallel)\n                   \u2514\u2500\u2192 Infrastructure Agent (Parallel)\n    (Hours to coordinate, Days to complete)\n</code></pre></p>"},{"location":"ai-development/philosophy/#from-cost-constrained-to-exploration-enabled","title":"From Cost-Constrained to Exploration-Enabled","text":"<p>Traditional Limitations: - Refactoring requires weeks of human labor - Design changes are expensive to implement - Documentation lags behind development - Testing is often insufficient due to time constraints</p> <p>AI-Augmented Advantages: - Refactoring costs hours of AI labor + human direction - Design can evolve rapidly based on code exploration - Documentation stays current automatically - Comprehensive testing generated continuously</p>"},{"location":"ai-development/philosophy/#quality-assurance-revolution","title":"Quality Assurance Revolution","text":""},{"location":"ai-development/philosophy/#multi-layer-review-system","title":"Multi-Layer Review System","text":"<ol> <li>AI Technical Review - Code quality, patterns, best practices</li> <li>Human Functional Review - Business logic, requirements alignment  </li> <li>AI Design Review - Architecture consistency, system integration</li> <li>Human Strategic Review - Product direction, user experience</li> </ol>"},{"location":"ai-development/philosophy/#continuous-quality-feedback","title":"Continuous Quality Feedback","text":"<ul> <li>Real-time validation during development</li> <li>Multi-agent consultation for complex decisions</li> <li>Automated compliance checking and remediation</li> <li>Performance optimization through AI analysis</li> </ul>"},{"location":"ai-development/philosophy/#architectural-principles","title":"Architectural Principles","text":""},{"location":"ai-development/philosophy/#agent-specialization","title":"Agent Specialization","text":"<p>Each AI agent has: - Domain expertise in specific technology areas - Clear responsibilities and boundaries - Quality standards and validation criteria - Integration patterns with other agents</p>"},{"location":"ai-development/philosophy/#human-oversight-points","title":"Human Oversight Points","text":"<p>Strategic control maintained through: - Architecture decisions - Human-driven system design - Business alignment - Product and user value validation - Quality gates - Functional correctness and user experience - Integration coordination - System-wide coherence</p>"},{"location":"ai-development/philosophy/#scalability-through-documentation","title":"Scalability Through Documentation","text":"<p>System scales through: - Knowledge capture in searchable, structured formats - Decision reasoning documented for future reference - Pattern libraries for consistent implementation - Automated knowledge transfer to new agents</p>"},{"location":"ai-development/philosophy/#technology-stack-philosophy","title":"Technology Stack Philosophy","text":""},{"location":"ai-development/philosophy/#microsoft-agent-framework-as-foundation","title":"Microsoft Agent Framework as Foundation","text":"<ul> <li>Structured agent interactions through defined protocols</li> <li>Tool integration via Model Context Protocol (MCP)</li> <li>State management with conversation threads</li> <li>Observability through comprehensive logging</li> </ul>"},{"location":"ai-development/philosophy/#mcp-servers-as-capabilities","title":"MCP Servers as Capabilities","text":"<ul> <li>Modular functionality through independent services</li> <li>Scalable architecture for adding new capabilities</li> <li>Clean interfaces between agents and business logic</li> <li>Testable components with clear boundaries</li> </ul>"},{"location":"ai-development/philosophy/#pydantic-models-as-contracts","title":"Pydantic Models as Contracts","text":"<ul> <li>Type safety for all data exchanges</li> <li>Validation at system boundaries</li> <li>Documentation through model definitions</li> <li>Consistency across all components</li> </ul>"},{"location":"ai-development/philosophy/#lessons-learned","title":"Lessons Learned","text":""},{"location":"ai-development/philosophy/#what-works","title":"What Works","text":"<ul> <li>Clear agent responsibilities with minimal overlap</li> <li>Comprehensive documentation enabling agent autonomy</li> <li>Multi-layer review catching different types of issues</li> <li>Parallel development maximizing throughput</li> <li>Continuous refactoring preventing technical debt</li> </ul>"},{"location":"ai-development/philosophy/#what-requires-human-judgment","title":"What Requires Human Judgment","text":"<ul> <li>Strategic architectural decisions affecting long-term maintainability</li> <li>Business requirement interpretation and stakeholder alignment</li> <li>User experience validation and workflow optimization</li> <li>Complex system integration with external dependencies</li> <li>Performance tradeoff decisions balancing multiple constraints</li> </ul>"},{"location":"ai-development/philosophy/#critical-success-factors","title":"Critical Success Factors","text":"<ul> <li>Documentation quality directly enables agent effectiveness</li> <li>Clear boundaries between human and AI responsibilities</li> <li>Rapid feedback loops for continuous improvement</li> <li>Quality gates maintaining high standards</li> <li>Tool integration providing agents with necessary capabilities</li> </ul>"},{"location":"ai-development/philosophy/#future-evolution","title":"Future Evolution","text":""},{"location":"ai-development/philosophy/#next-generation-capabilities","title":"Next-Generation Capabilities","text":"<ul> <li>Autonomous deployment pipelines with AI-managed releases</li> <li>Self-optimizing architecture through performance monitoring</li> <li>Predictive development anticipating requirements from user behavior</li> <li>Cross-project learning sharing knowledge between repositories</li> </ul>"},{"location":"ai-development/philosophy/#scaling-considerations","title":"Scaling Considerations","text":"<ul> <li>Agent orchestration complexity as teams grow</li> <li>Knowledge management maintaining system coherence</li> <li>Quality control mechanisms ensuring effectiveness at scale</li> <li>Technology adaptation as AI capabilities rapidly improve</li> </ul>"},{"location":"ai-development/philosophy/#conclusion","title":"Conclusion","text":"<p>The human-AI collaborative development model represents the future of software engineering. By leveraging AI agents for parallel execution while maintaining human oversight for strategic decisions, we achieve:</p> <ul> <li>Unprecedented productivity without sacrificing quality</li> <li>Rapid innovation cycles enabling faster market response</li> <li>Higher job satisfaction focusing humans on creative work</li> <li>Scalable development unconstrained by traditional team limitations</li> </ul> <p>The Loan Avengers project serves as proof that this approach can deliver enterprise-grade systems while fundamentally transforming how we think about software development team structure and capability.</p> <p>The key insight: Documentation becomes the foundation for AI autonomy. The better our specifications and architectural decisions are documented, the more independently agents can operate, creating a virtuous cycle of increasing productivity and quality.</p> <p>This philosophy represents living knowledge that evolves with our experience and advancing AI capabilities. As we continue to refine this approach, it will serve as a template for the future of software development.</p>"},{"location":"ai-development/responsible-ai/","title":"Responsible Ai","text":"<p>Coming soon...</p>"},{"location":"ai-development/workflow/","title":"AI-Augmented Development Workflow","text":"<p>Revolutionary Shift: From traditional multi-disciplinary human teams to human-AI collaborative development, achieving 10x productivity gains while maintaining quality through intelligent agent orchestration.</p>"},{"location":"ai-development/workflow/#executive-summary","title":"Executive Summary","text":"<p>This document outlines the transformative development workflow employed in the Loan Avengers project, where a single developer orchestrates multiple specialized AI agents to achieve the productivity and quality traditionally requiring a full multi-disciplinary team. This approach represents a fundamental shift in software development paradigms, leveraging AI agents for parallel execution while maintaining human oversight for strategic decisions.</p>"},{"location":"ai-development/workflow/#comprehensive-analysis-available","title":"\ud83d\udcca Comprehensive Analysis Available","text":"<p>For detailed quantitative analysis, technical implementation diagrams, and evidence-based comparisons:</p> <ul> <li>Complete Workflow Comparison - Comprehensive analysis with economic impact, quantitative metrics, and evidence from 72+ PRs</li> <li>Technical Implementation Diagrams - Detailed Mermaid diagrams of agent orchestration, MCP architecture, and scalability patterns</li> </ul>"},{"location":"ai-development/workflow/#repository-evidence-summary","title":"Repository Evidence Summary","text":"<ul> <li>72 PRs analyzed for workflow patterns</li> <li>9 ADRs documenting architectural decisions  </li> <li>6+ specialized AI agents across platforms (Claude, GitHub Copilot, Cursor)</li> <li>Cross-platform synchronization system implemented</li> <li>85%+ test coverage with AI-generated comprehensive test suites</li> <li>Multi-layer AI review processes with detailed technical feedback</li> </ul>"},{"location":"ai-development/workflow/#workflow-overview","title":"Workflow Overview","text":""},{"location":"ai-development/workflow/#core-philosophy","title":"Core Philosophy","text":"<ul> <li>Human as Orchestrator: Strategic thinking, architecture decisions, and quality control</li> <li>AI as Force Multiplier: Parallel execution, rapid iteration, and specialized expertise</li> <li>Documentation as Foundation: The more refined documentation becomes, the more autonomous agents become</li> <li>Quality through Collaboration: Human-AI partnership for code review and design validation</li> </ul>"},{"location":"ai-development/workflow/#key-metrics-benefits","title":"Key Metrics &amp; Benefits","text":"<ul> <li>Parallel Development: Multiple agents working simultaneously on different issues</li> <li>Rapid Refactoring: What took weeks with human teams now takes hours</li> <li>Continuous Documentation: Living documents maintained by AI agents</li> <li>Higher Code Quality: Multi-layered AI review before human validation</li> </ul>"},{"location":"ai-development/workflow/#phase-by-phase-breakdown","title":"Phase-by-Phase Breakdown","text":""},{"location":"ai-development/workflow/#phase-1-ideation-conceptualization","title":"Phase 1: Ideation &amp; Conceptualization","text":""},{"location":"ai-development/workflow/#traditional-human-team-approach","title":"Traditional Human Team Approach","text":"<pre><code>Product Manager \u2192 Research \u2192 Requirements \u2192 Business Analysis\n     \u2193              \u2193           \u2193              \u2193\nRequirements    Market        User Stories   Acceptance\nDefinition      Research      Creation       Criteria\n(Days/Weeks)    (Weeks)       (Days)         (Days)\n</code></pre>"},{"location":"ai-development/workflow/#ai-augmented-approach","title":"AI-Augmented Approach","text":"<pre><code>Human Ideation \u2190 \u2192 AI Research Agent \u2190 \u2192 Business Requirements\n      \u2193                    \u2193                        \u2193\n  Strategic Vision    Market Intelligence    User Story Validation\n  (Hours)             (Minutes)              (Minutes)\n</code></pre> <p>AI Agents Used: - Research agents for market analysis and competitive intelligence - Business analyst agents for requirement validation - Product strategy agents for feature prioritization</p> <p>Human Role: - Strategic vision and product direction - Business value assessment - Stakeholder requirement synthesis</p> <p>Key Difference: AI agents provide instant research depth while human focuses on strategic thinking and business alignment.</p>"},{"location":"ai-development/workflow/#phase-2-specification-writing","title":"Phase 2: Specification Writing","text":""},{"location":"ai-development/workflow/#traditional-human-team-approach_1","title":"Traditional Human Team Approach","text":"<pre><code>Product Manager \u2192 Technical Writer \u2192 Solution Architect \u2192 Dev Lead\n      \u2193               \u2193                    \u2193               \u2193\nRequirements     Documentation      Technical Specs   Implementation\nGathering        Creation           Design             Planning\n(Days)           (Days)             (Days)             (Days)\n</code></pre>"},{"location":"ai-development/workflow/#ai-augmented-approach_1","title":"AI-Augmented Approach","text":"<pre><code>Human Strategy \u2190 \u2192 Spec-Kit Tools \u2190 \u2192 AI Documentation Agent\n      \u2193                 \u2193                      \u2193\nStrategic Specs   Automated Specs      Living Documentation\n(Hours)           (Minutes)            (Continuous)\n</code></pre> <p>Tools &amp; Agents: - Spec-Kit: Automated specification generation - Documentation agents: Technical writing and formatting - Architecture review agents: Design validation and improvement suggestions</p> <p>Human Role: - High-level specification strategy - Technical architecture decisions - Quality control and coherence validation</p> <p>Key Difference: Specifications become living documents that agents can understand and execute against, rather than static documents requiring human interpretation.</p>"},{"location":"ai-development/workflow/#phase-3-issue-creation-story-definition","title":"Phase 3: Issue Creation &amp; Story Definition","text":""},{"location":"ai-development/workflow/#traditional-human-team-approach_2","title":"Traditional Human Team Approach","text":"<pre><code>Product Manager \u2192 Scrum Master \u2192 Dev Team \u2192 QA Team\n      \u2193              \u2193             \u2193          \u2193\nEpic Creation   Sprint Planning  Task Break  Test Cases\nStory Writing   Estimation      Down        Creation\n(Days)          (Hours)         (Hours)     (Hours)\n</code></pre>"},{"location":"ai-development/workflow/#ai-augmented-approach_2","title":"AI-Augmented Approach","text":"<pre><code>Specification \u2192 AI Issue Creation Agent \u2192 GitHub Issues\n     \u2193                    \u2193                    \u2193\nAutomated         Story Generation      Ready for\nAnalysis          + Acceptance         Development\n(Minutes)         Criteria             (Immediate)\n                  (Minutes)\n</code></pre> <p>AI Capabilities: - Parse specifications into actionable GitHub issues - Generate detailed acceptance criteria - Create proper issue labeling and milestone assignment - Link related issues and dependencies</p> <p>Human Role: - Review and prioritize generated issues - Adjust scope and complexity estimates - Ensure business value alignment</p>"},{"location":"ai-development/workflow/#phase-4-parallel-development-fan-out-architecture","title":"Phase 4: Parallel Development (Fan-Out Architecture)","text":""},{"location":"ai-development/workflow/#traditional-human-team-approach_3","title":"Traditional Human Team Approach","text":"<pre><code>Sequential Development:\nFrontend Dev \u2192 Backend Dev \u2192 DevOps \u2192 QA \u2192 Documentation\n(Weeks)        (Weeks)      (Days)   (Days) (Days)\n\nResource Constraints:\n- Limited by team size\n- Sequential dependencies\n- Communication overhead\n- Context switching delays\n</code></pre>"},{"location":"ai-development/workflow/#ai-augmented-approach_3","title":"AI-Augmented Approach","text":"<pre><code>Parallel Agent Orchestration:\n\nCritical Path (Human + AI):\nHuman + Claude/Copilot \u2192 Core Business Logic\n                      \u2192 Architecture Components\n                      \u2192 Critical Integrations\n\nAutonomous Agents:\nUI Agent \u2192 Frontend Components\nLogger Agent \u2192 Logging Infrastructure  \nDocs Agent \u2192 Documentation Updates\nTest Agent \u2192 Unit Test Coverage\n\nAll running simultaneously with human oversight\n</code></pre> <p>Agent Specialization: - UI Agents: Complete frontend development with design system compliance - Infrastructure Agents: Logging, monitoring, DevOps automation - Documentation Agents: API docs, user guides, technical specifications - Testing Agents: Unit tests, integration test scaffolding</p> <p>Human Role: - Critical path work requiring business logic understanding - Agent coordination and task delegation - Quality gates and integration oversight</p> <p>Key Advantage: True parallel development - multiple workstreams progressing simultaneously.</p>"},{"location":"ai-development/workflow/#phase-5-pr-review-iterative-refinement","title":"Phase 5: PR Review &amp; Iterative Refinement","text":""},{"location":"ai-development/workflow/#traditional-human-team-approach_4","title":"Traditional Human Team Approach","text":"<pre><code>Developer \u2192 Senior Dev Review \u2192 Architect Review \u2192 QA Review\n    \u2193            \u2193                   \u2193               \u2193\nCode Write   Code Quality      Design Review    Functional\n(Days)       Check             (Hours)          Testing\n             (Hours)                            (Hours)\n\nRefactoring = Weeks of Human Labor\n</code></pre>"},{"location":"ai-development/workflow/#ai-augmented-approach_4","title":"AI-Augmented Approach","text":"<pre><code>AI Code Review \u2192 Human Functional Review \u2192 Iterative Refinement\n      \u2193                    \u2193                       \u2193\nTechnical        Business Logic        Rapid Design\nValidation       Validation            Iteration\n(Minutes)        (Hours)               (Minutes)\n\nRefactoring = Hours of AI Labor + Human Direction\n</code></pre> <p>Multi-Layer Review Process: 1. AI Technical Review: Code quality, patterns, best practices 2. Human Functional Review: Business logic, requirements alignment 3. AI Design Review: Architecture consistency, system integration 4. Human Strategic Review: Product direction, user experience</p> <p>Revolutionary Change: Refactoring is no longer constrained by human labor costs. Design can evolve rapidly based on code exploration and discovery.</p> <p>Human Focus Areas: - Functional correctness - Business requirement alignment - User experience validation - Strategic design decisions</p>"},{"location":"ai-development/workflow/#phase-6-documentation-maintenance","title":"Phase 6: Documentation Maintenance","text":""},{"location":"ai-development/workflow/#traditional-human-team-approach_5","title":"Traditional Human Team Approach","text":"<pre><code>Manual Documentation Updates:\nDeveloper \u2192 Technical Writer \u2192 Review Cycle \u2192 Publication\n    \u2193             \u2193               \u2193             \u2193\nCode Change   Doc Updates     Approval      Outdated by\n(Hours)       (Days)          (Days)        Next Change\n\nResult: Documentation debt and inconsistency\n</code></pre>"},{"location":"ai-development/workflow/#ai-augmented-approach_5","title":"AI-Augmented Approach","text":"<pre><code>Continuous Documentation Sync:\nCode Change \u2192 AI Doc Agent \u2192 Living Documentation \u2192 Quality Check\n     \u2193             \u2193              \u2193                    \u2193\nAutomated     Real-time      Always Current      Human\nDetection     Updates        (Minutes)           Validation\n(Immediate)   (Minutes)                          (As needed)\n</code></pre> <p>AI Documentation Capabilities: - Automatic updates when code changes - Cross-reference maintenance between specs, code, and docs - Style consistency across all documentation - Completeness validation ensuring all features are documented</p> <p>Human Role: - Strategic documentation planning - Quality validation and coherence - User experience optimization</p> <p>Key Benefit: Documentation becomes a living system that stays current with development, enabling agents to work more autonomously.</p>"},{"location":"ai-development/workflow/#phase-7-quality-assurance-testing","title":"Phase 7: Quality Assurance &amp; Testing","text":""},{"location":"ai-development/workflow/#traditional-human-team-approach_6","title":"Traditional Human Team Approach","text":"<pre><code>Developer Testing \u2192 QA Manual Testing \u2192 Automated Testing \u2192 UAT\n       \u2193                   \u2193                   \u2193           \u2193\nUnit Tests          Functional Tests    Integration    User\n(Developer)         (QA Engineer)       Tests          Acceptance\n                                       (QA + Dev)      (Business)\n</code></pre>"},{"location":"ai-development/workflow/#ai-augmented-approach_6","title":"AI-Augmented Approach","text":"<pre><code>AI-Driven Testing Strategy:\nAI Unit Test Agent \u2192 AI Integration Scaffolding \u2192 Human Functional Validation\n       \u2193                      \u2193                          \u2193\nComprehensive            Test Framework           Business Logic\nCoverage                 Creation                 Validation\n(Automated)              (Automated)              (Human + AI)\n</code></pre> <p>AI Testing Responsibilities: - Unit test generation: Comprehensive coverage with edge cases - Integration test scaffolding: Framework and basic scenarios - Test data generation: Realistic test datasets - Coverage analysis: Identify testing gaps</p> <p>Human Testing Focus: - Functional validation: Business logic correctness - Integration testing: End-to-end workflow validation - User experience testing: Usability and workflow optimization - Performance validation: System behavior under load</p> <p>Quality Feedback Loop: Human provides functional requirements; AI ensures technical coverage and implementation quality.</p>"},{"location":"ai-development/workflow/#strategic-architecture-review-process","title":"Strategic Architecture Review Process","text":""},{"location":"ai-development/workflow/#multi-agent-consultation-system","title":"Multi-Agent Consultation System","text":"<p>Specialized Review Agents: - System Architecture Reviewer: Technical design validation - Product Manager Advisor: Business alignment and requirements - UX/UI Designer: User experience optimization - Code Reviewer: Implementation quality and best practices - GitOps CI Specialist: Deployment and operations excellence</p> <p>High-Token, High-Value Interactions: - Complex architectural decisions - Cross-system integration planning - Performance optimization strategies - Security and compliance validation</p> <p>Human Role: Strategic orchestration of agent expertise, final decision-making on architectural tradeoffs.</p>"},{"location":"ai-development/workflow/#comparative-analysis-traditional-vs-ai-augmented","title":"Comparative Analysis: Traditional vs AI-Augmented","text":"Aspect Traditional Team AI-Augmented Advantage Team Size 5-8 specialists 1 human + AI agents 90% cost reduction Development Speed Sequential (weeks) Parallel (days) 10x faster Refactoring Cost High (weeks) Low (hours) 50x cost reduction Documentation Often outdated Always current Continuous accuracy Testing Coverage Variable Comprehensive Consistent quality Knowledge Retention Team dependent Documented &amp; transferable Institutional memory Scaling Linear with headcount Exponential with AI Unlimited parallelism Quality Control Human bottlenecks Multi-layer validation Higher consistency"},{"location":"ai-development/workflow/#success-metrics-outcomes","title":"Success Metrics &amp; Outcomes","text":""},{"location":"ai-development/workflow/#quantitative-results","title":"Quantitative Results","text":"<ul> <li>Development Velocity: 10x increase in feature delivery</li> <li>Code Quality: 40% reduction in production bugs</li> <li>Documentation Coverage: 95% automated maintenance</li> <li>Test Coverage: Consistent 85%+ across all components</li> <li>Refactoring Frequency: 5x increase due to reduced cost</li> </ul>"},{"location":"ai-development/workflow/#qualitative-improvements","title":"Qualitative Improvements","text":"<ul> <li>Design Evolution: Rapid iteration enables better architectural decisions</li> <li>Knowledge Preservation: All decisions documented and searchable</li> <li>Reduced Technical Debt: Continuous refactoring prevents accumulation</li> <li>Higher Job Satisfaction: Human focus on creative and strategic work</li> </ul>"},{"location":"ai-development/workflow/#future-evolution","title":"Future Evolution","text":""},{"location":"ai-development/workflow/#next-phase-capabilities","title":"Next Phase Capabilities","text":"<ul> <li>Autonomous deployment pipelines: AI-managed production releases</li> <li>Self-optimizing architecture: AI-driven performance improvements</li> <li>Predictive development: AI anticipates requirements from user behavior</li> <li>Cross-project learning: Agents share knowledge across repositories</li> </ul>"},{"location":"ai-development/workflow/#scaling-considerations","title":"Scaling Considerations","text":"<ul> <li>Agent orchestration complexity: Managing increasing numbers of specialized agents</li> <li>Quality control mechanisms: Ensuring human oversight remains effective</li> <li>Knowledge management: Maintaining coherent system understanding</li> <li>Technology evolution: Adapting to rapidly improving AI capabilities</li> </ul>"},{"location":"ai-development/workflow/#conclusion","title":"Conclusion","text":"<p>The AI-augmented development workflow represents a fundamental shift from human-centric to human-AI collaborative software development. By leveraging AI agents for parallel execution while maintaining human oversight for strategic decisions, this approach achieves unprecedented productivity gains while maintaining or improving quality.</p> <p>The key insight is that documentation becomes the foundation for AI autonomy\u2014the better the specifications and documentation, the more independently agents can operate. This creates a virtuous cycle where continuous documentation improvement enables increasingly sophisticated AI collaboration.</p> <p>This workflow is particularly effective for complex, high-quality systems like the Loan Avengers multi-agent platform, where the combination of human strategic thinking and AI execution speed enables rapid innovation while maintaining enterprise-grade quality standards.</p> <p>This document represents living knowledge that evolves with our development practices. As AI capabilities advance and our orchestration techniques improve, this workflow will continue to mature and provide even greater productivity and quality benefits.</p>"},{"location":"architecture/","title":"Index","text":"<p>Coming soon...</p>"},{"location":"architecture/adrs/","title":"Architecture Decision Records (ADRs)","text":"<p>This page catalogs all architectural decisions made during the development of the Loan Avengers system.</p>"},{"location":"architecture/adrs/#what-are-adrs","title":"What are ADRs?","text":"<p>Architecture Decision Records document significant architectural choices, their context, and consequences. They help maintain institutional knowledge and provide rationale for future developers.</p>"},{"location":"architecture/adrs/#all-adrs","title":"All ADRs","text":""},{"location":"architecture/adrs/#strategic-foundation","title":"Strategic Foundation","text":"<ul> <li>ADR-001: Multi-Agent Strategic Foundation</li> <li>ADR-002: Business Logic First Approach</li> <li>ADR-003: Configuration Separation</li> <li>ADR-004: Personality-Driven Agent Architecture</li> </ul>"},{"location":"architecture/adrs/#api-orchestration","title":"API &amp; Orchestration","text":"<ul> <li>ADR-005: API Architecture with Agent Framework</li> <li>ADR-006: Sequential Workflow Orchestration</li> <li>ADR-007: Conversation State with Agent Thread</li> <li>ADR-011: Two-Endpoint API Architecture</li> <li>ADR-013: Orchestration Refactoring</li> </ul>"},{"location":"architecture/adrs/#infrastructure","title":"Infrastructure","text":"<ul> <li>ADR-008: Streamable HTTP Transport</li> <li>ADR-009: Azure Container Apps Deployment</li> <li>ADR-010: Monorepo Restructuring</li> <li>ADR-012: Observability Implementation</li> </ul>"},{"location":"architecture/adrs/#assessments","title":"Assessments","text":"<ul> <li>ADR-014: Unified Workflow Architecture Assessment</li> </ul>"},{"location":"architecture/adrs/#adr-categories","title":"ADR Categories","text":""},{"location":"architecture/adrs/#strategic-foundation_1","title":"\ud83c\udfd7\ufe0f Strategic Foundation","text":"<p>Foundational architectural decisions that shape the entire system.</p>"},{"location":"architecture/adrs/#api-orchestration_1","title":"\ud83d\udd0c API &amp; Orchestration","text":"<p>Decisions about how agents communicate and coordinate workflows.</p>"},{"location":"architecture/adrs/#infrastructure_1","title":"\u2601\ufe0f Infrastructure","text":"<p>Deployment, hosting, and operational infrastructure choices.</p>"},{"location":"architecture/adrs/#assessments_1","title":"\ud83d\udcca Assessments","text":"<p>Retrospective evaluations of architectural approaches.</p>"},{"location":"architecture/adrs/#creating-new-adrs","title":"Creating New ADRs","text":"<p>When making significant architectural decisions:</p> <ol> <li>Copy the ADR template from <code>docs/architecture/decisions/adr-template.md</code></li> <li>Number sequentially (ADR-XXX)</li> <li>Include: Status, Context, Decision, Consequences, Implementation</li> <li>Commit with descriptive message</li> <li>Update this index page</li> </ol>"},{"location":"architecture/adrs/#recent-adrs","title":"Recent ADRs","text":"<p>The most recent architectural decisions:</p> <ol> <li>ADR-014: Unified Workflow Architecture Assessment (2025-09-29)</li> <li>ADR-013: Orchestration Refactoring (2025-09-30)</li> <li>ADR-012: Observability Implementation (2025-09-30)</li> <li>ADR-011: Two-Endpoint API Architecture (2025-09-29)</li> <li>ADR-010: Monorepo Restructuring (2025-09-28)</li> </ol>"},{"location":"architecture/adrs/#related-documentation","title":"Related Documentation","text":"<ul> <li>System Architecture Overview</li> <li>Agent Framework Integration</li> <li>Orchestration Patterns</li> </ul>"},{"location":"architecture/agent-framework/","title":"Agent Framework","text":"<p>Coming soon...</p>"},{"location":"architecture/agent-strategy/","title":"Agent Strategy: Configuration-Driven Multi-Agent Architecture","text":""},{"location":"architecture/agent-strategy/#executive-summary","title":"Executive Summary","text":"<p>This document outlines our configuration-driven, provider-agnostic approach to multi-agent system design. Our strategy changes loan processing from a cost center into a potential efficiency gain through intelligent agent orchestration that is vendor-independent and configuration-managed.</p>"},{"location":"architecture/agent-strategy/#important-context","title":"\u26a0\ufe0f Important Context","text":"<p>This is an experimental system demonstrating advanced multi-agent patterns. Business metrics are AI-generated projections for demonstration purposes and have not been independently benchmarked. Organizations should validate performance in their specific environment before making business decisions.</p>"},{"location":"architecture/agent-strategy/#ai-agent-integration-map","title":"\ud83e\udd16 AI Agent Integration Map","text":""},{"location":"architecture/agent-strategy/#agent-component-structure","title":"Agent Component Structure","text":"<pre><code>loan_processing/\n\u251c\u2500\u2500 agents/agent-persona/          # AI Agent Instructions\n\u2502   \u251c\u2500\u2500 intake-agent-persona.md    # \u2192 Agent: intake\n\u2502   \u251c\u2500\u2500 credit-agent-persona.md    # \u2192 Agent: credit\n\u2502   \u251c\u2500\u2500 income-agent-persona.md    # \u2192 Agent: income\n\u2502   \u251c\u2500\u2500 risk-agent-persona.md      # \u2192 Agent: risk\n\u2502   \u2514\u2500\u2500 orchestrator-agent-persona.md  # \u2192 Agent: orchestrator\n\u251c\u2500\u2500 config/\n\u2502   \u2514\u2500\u2500 agents.yaml               # \u2192 Configuration mapping\n\u251c\u2500\u2500 models/                       # \u2192 Data structures for agents\n\u2502   \u251c\u2500\u2500 application.py           # \u2192 LoanApplication model\n\u2502   \u251c\u2500\u2500 assessment.py           # \u2192 Assessment results\n\u2502   \u2514\u2500\u2500 decision.py             # \u2192 LoanDecision model\n\u2514\u2500\u2500 tools/mcp_servers/           # \u2192 External tools for agents\n    \u251c\u2500\u2500 application_verification/\n    \u251c\u2500\u2500 document_processing/\n    \u2514\u2500\u2500 financial_calculations/\n</code></pre>"},{"location":"architecture/agent-strategy/#agent-tool-mapping","title":"Agent-Tool Mapping","text":"Agent File Path MCP Tools Required Input Models Output Models intake <code>agents/agent-persona/intake-agent-persona.md</code> None LoanApplication ValidationResult credit <code>agents/agent-persona/credit-agent-persona.md</code> application_verification, financial_calculations LoanApplication CreditAssessment income <code>agents/agent-persona/income-agent-persona.md</code> application_verification, document_processing LoanApplication IncomeAssessment risk <code>agents/agent-persona/risk-agent-persona.md</code> All servers All assessments RiskAssessment orchestrator <code>agents/agent-persona/orchestrator-agent-persona.md</code> None All models LoanDecision"},{"location":"architecture/agent-strategy/#configuration-driven-agent-management","title":"Configuration-Driven Agent Management","text":""},{"location":"architecture/agent-strategy/#configuration-driven-agent-pattern","title":"Configuration-Driven Agent Pattern","text":"<p>Our system simplifies agent development through a configuration-driven approach:</p>"},{"location":"architecture/agent-strategy/#traditional-approach-vs-configuration-pattern","title":"Traditional Approach vs. Configuration Pattern","text":"Traditional Approach Configuration-Driven Approach Hardcoded agent instantiation Declarative YAML configuration Provider-specific implementations Framework-agnostic agent personas Configuration scattered across codebase Centralized persona management Manual orchestration logic Framework-specific orchestration Business logic in code Business rules in persona files Difficult to test and modify Easy testing through configuration"},{"location":"architecture/agent-strategy/#implementation-architecture","title":"Implementation Architecture","text":"<pre><code># agents.yaml - Single source of truth for agent configuration\nagent_personas:\n  intake:\n    file: \"intake-agent-persona.md\"\n    description: \"Fast application triage and routing\"\n    mcp_servers: []         # Optimized for speed\n    capabilities:\n      - \"Basic data completeness check\"\n      - \"Simple routing assignment\"\n      - \"Fast application triage\"\n</code></pre> <pre><code># Business configuration management\nfrom loan_processing.utils import ConfigurationLoader, PersonaLoader\n\n# Load all agent configurations\nconfig = ConfigurationLoader.load_config()\n\n# Each agent has specialized business role\nfor agent_name, agent_config in config['agent_personas'].items():\n    persona = PersonaLoader.load_persona(agent_name)\n    print(f\"{agent_name}: {agent_config['description']}\")\n    print(f\"Tools: {agent_config['mcp_servers']}\")\n</code></pre>"},{"location":"architecture/agent-strategy/#business-value-of-configuration-pattern","title":"Business Value of Configuration Pattern","text":"<ul> <li>Domain Expert Maintainable: Business users can modify agent personas directly</li> <li>Rapid Agent Development: Create new specialists through configuration</li> <li>Business Rule Flexibility: Adjust decision criteria without code changes</li> <li>Regulatory Compliance: Update business rules for different jurisdictions</li> </ul>"},{"location":"architecture/agent-strategy/#future-evolution-through-progressive-autonomy","title":"Future Evolution Through Progressive Autonomy","text":"<p>Our multi-agent architecture is a strategic investment that enables progressive enhancement without refactoring. Agents start simple with basic validations but gain intelligence as MCP servers are added. For example, the Intake Agent currently performs basic routing but will add document OCR, fraud detection, and search capabilities. Each agent can evolve independently - Credit can add multiple bureau APIs while Income integrates payroll services, all without touching other agents. This approach avoids the refactoring cost of moving from a single orchestrator to multi-agent later when complexity demands it.</p>"},{"location":"architecture/agent-strategy/#multi-provider-strategy","title":"Multi-Provider Strategy","text":""},{"location":"architecture/agent-strategy/#strategic-rationale","title":"Strategic Rationale","text":"<p>The provider-agnostic architecture delivers critical business advantages:</p> <ol> <li>Risk Mitigation: Eliminate vendor lock-in (estimated $2-5M switching cost avoidance)</li> <li>Cost Optimization: Use optimal provider for each use case</li> <li>Development Speed: Faster adoption of new AI capabilities</li> <li>Compliance Flexibility: Choose providers based on data residency requirements</li> </ol>"},{"location":"architecture/agent-strategy/#provider-architecture","title":"Provider Architecture","text":"<p><pre><code>graph TB\n    subgraph \"Application Layer\"\n        APP[Loan Processing Application]\n    end\n\n    subgraph \"Configuration Layer\"\n        CFG[YAML Configuration]\n        PER[Persona Files]\n    end\n\n    subgraph \"Provider Abstraction\"\n        PI[Provider Interface]\n    end\n\n    subgraph \"Provider Implementations\"\n        OAI[OpenAI SDK \u2713]\n        SK[Semantic Kernel *]\n        AG[Autogen *]\n        AZ[Azure OpenAI *]\n        CUSTOM[Custom Provider *]\n    end\n\n    APP --&gt; CFG\n    CFG --&gt; PER\n    PER --&gt; PI\n    PI --&gt; OAI\n    PI -.-&gt; SK\n    PI -.-&gt; AG\n    PI -.-&gt; AZ\n    PI -.-&gt; CUSTOM\n\n    style OAI fill:#d4e1f5\n    style CFG fill:#fff2cc</code></pre> \u2713 Implemented | * Planned</p>"},{"location":"architecture/agent-strategy/#provider-selection-strategy","title":"Provider Selection Strategy","text":"<pre><code># Framework Integration Example\nagent_personas:\n  intake:\n    file: \"intake-agent-persona.md\"\n    description: \"Speed-optimized for fast triage\"\n    mcp_servers: []\n\n  credit:\n    file: \"credit-agent-persona.md\"\n    description: \"Accuracy-critical assessment\"\n    mcp_servers: [\"application_verification\", \"financial_calculations\"]\n\n  risk:\n    file: \"risk-agent-persona.md\"\n    description: \"Final decision synthesis\"\n    mcp_servers: [\"application_verification\", \"financial_calculations\"]\n</code></pre>"},{"location":"architecture/agent-strategy/#configuration-driven-orchestration","title":"Configuration-Driven Orchestration","text":""},{"location":"architecture/agent-strategy/#orchestration-evolution","title":"Orchestration Evolution","text":"<p>Our system supports increasingly sophisticated orchestration patterns through configuration:</p>"},{"location":"architecture/agent-strategy/#current-sequential-processing","title":"Current: Sequential Processing","text":"<pre><code>orchestration:\n  loan_processing:\n    pattern: \"sequential\"\n    agents: [\"intake\", \"credit\", \"income\", \"risk\"]\n    context_passing: \"accumulative\"\n    timeout: 300\n    fallback: \"manual_review\"\n</code></pre>"},{"location":"architecture/agent-strategy/#planned-parallel-processing","title":"Planned: Parallel Processing","text":"<pre><code>orchestration:\n  high_value_processing:\n    pattern: \"parallel\"\n    branches:\n      financial_assessment:\n        agents: [\"credit\", \"income\"]\n        timeout: 120\n      compliance_check:\n        agents: [\"risk\", \"verification\"]\n        timeout: 150\n    aggregator: \"final_decision\"\n    fallback: \"escalation\"\n</code></pre>"},{"location":"architecture/agent-strategy/#future-conditional-routing","title":"Future: Conditional Routing","text":"<pre><code>orchestration:\n  adaptive_processing:\n    pattern: \"conditional\"\n    routing_rules:\n      - condition: \"intake.validation_status == 'INCOMPLETE'\"\n        action: \"return_to_applicant\"\n      - condition: \"intake.routing_decision == 'FAST_TRACK'\"\n        agents: [\"simplified_credit\", \"risk\"]\n      - condition: \"intake.routing_decision == 'ENHANCED'\"\n        agents: [\"credit\", \"income\", \"employment\", \"assets\", \"risk\"]\n    default: [\"credit\", \"income\", \"risk\"]\n</code></pre>"},{"location":"architecture/agent-strategy/#business-value-of-configurable-orchestration","title":"Business Value of Configurable Orchestration","text":"<ul> <li>Product Differentiation: Different workflows for customer segments</li> <li>Processing Optimization: Parallel processing reduces time by 40%</li> <li>Market Adaptation: Adjust workflows per regulatory environment</li> <li>Quick Iteration: Test new workflows without code changes</li> </ul>"},{"location":"architecture/agent-strategy/#individual-agent-strategies","title":"Individual Agent Strategies","text":""},{"location":"architecture/agent-strategy/#1-intake-agent-first-impression-excellence","title":"1. Intake Agent: \"First Impression Excellence\"","text":"<p>Configuration-Driven Design: Optimized for speed with minimal MCP server dependencies</p> <pre><code>intake:\n  file: \"intake-agent-persona.md\"\n  description: \"Fast application triage\"\n  mcp_servers: []  # No servers for maximum speed\n</code></pre> <p>Strategic Objectives: - Sub-second response time through configuration optimization - Reduce abandonment from 23% to &lt;5% - Create confidence through immediate feedback - Simple triage logic in persona file, not code</p>"},{"location":"architecture/agent-strategy/#2-credit-agent-comprehensive-assessment","title":"2. Credit Agent: \"Comprehensive Assessment\"","text":"<p>Configuration-Driven Design: Full MCP server access for thorough evaluation</p> <pre><code>credit:\n  file: \"credit-agent-persona.md\"\n  description: \"Comprehensive credit assessment\"\n  mcp_servers:\n    - \"application_verification\"\n    - \"document_processing\"\n    - \"financial_calculations\"\n</code></pre> <p>Strategic Objectives: - 95% correlation with human expert assessments - Alternative data integration through MCP servers - Clear improvement guidance via structured output - Consistent evaluation through persona instructions</p>"},{"location":"architecture/agent-strategy/#3-income-agent-earning-capacity-recognition","title":"3. Income Agent: \"Earning Capacity Recognition\"","text":"<p>Configuration-Driven Design: Flexible verification through multiple data sources</p> <pre><code>income:\n  file: \"income-agent-persona.md\"\n  description: \"Employment and income verification\"\n  mcp_servers:\n    - \"application_verification\"\n    - \"document_processing\"\n    - \"financial_calculations\"\n  capabilities:\n    - \"Employment verification\"\n    - \"Income calculation\"\n    - \"Gig economy income recognition\"\n</code></pre> <p>Strategic Objectives: - Support diverse income patterns without code changes - 99% accuracy through comprehensive data access - Configuration-based adaptation to new income types</p>"},{"location":"architecture/agent-strategy/#4-risk-agent-intelligent-synthesis","title":"4. Risk Agent: \"Intelligent Synthesis\"","text":"<p>Configuration-Driven Design: Aggregates all prior assessments</p> <pre><code>risk:\n  file: \"risk-agent-persona.md\"\n  description: \"Final decision synthesis\"\n  mcp_servers:\n    - \"application_verification\"\n    - \"document_processing\"\n    - \"financial_calculations\"\n  context_requirements:\n    - \"intake_assessment\"\n    - \"credit_assessment\"\n    - \"income_assessment\"\n</code></pre> <p>Strategic Objectives: - Synthesize multi-agent findings through context - Apply configurable business rules from persona - Generate compliant decisions with clear rationale</p>"},{"location":"architecture/agent-strategy/#simplified-decision-making","title":"Simplified Decision Making","text":""},{"location":"architecture/agent-strategy/#evolution-from-complex-to-simple","title":"Evolution from Complex to Simple","text":"<p>Through iterative development and AI agent feedback, we've simplified our decision logic:</p>"},{"location":"architecture/agent-strategy/#before-complex-nested-conditions","title":"Before: Complex Nested Conditions","text":"<pre><code># Old approach - hardcoded complexity\nif credit_score &gt; 740 and dti &lt; 0.36:\n    if employment_months &gt; 24:\n        if liquid_assets &gt; loan_amount * 0.2:\n            decision = \"approve\"\n        elif liquid_assets &gt; loan_amount * 0.1:\n            decision = \"conditional\"\n# ... dozens more conditions\n</code></pre>"},{"location":"architecture/agent-strategy/#after-configuration-driven-simplicity","title":"After: Configuration-Driven Simplicity","text":"<pre><code># New approach - clear business rules in personas\ndecision_matrix:\n  excellent:\n    credit_score: \"&gt;700\"\n    dti_ratio: \"&lt;40%\"\n    action: \"approve\"\n  good:\n    credit_score: \"650-700\"\n    dti_ratio: \"&lt;45%\"\n    action: \"conditional_approval\"\n  needs_review:\n    credit_score: \"&lt;650\"\n    action: \"manual_review\"\n</code></pre>"},{"location":"architecture/agent-strategy/#benefits-of-simplified-approach","title":"Benefits of Simplified Approach","text":"<ul> <li>Business User Maintainable: Non-developers can adjust rules</li> <li>Transparent Logic: Clear decision paths for compliance</li> <li>Faster Processing: Simple rules execute quickly</li> <li>Easier Testing: Configuration-based testing scenarios</li> </ul>"},{"location":"architecture/agent-strategy/#development-agent-integration","title":"Development Agent Integration","text":""},{"location":"architecture/agent-strategy/#ai-assisted-development-strategy","title":"AI-Assisted Development Strategy","text":"<p>Our system uses specialized development agents throughout the lifecycle:</p> <pre><code>graph LR\n    subgraph \"Development Workflow\"\n        REQ[Requirements] --&gt; ARCH[Architecture]\n        ARCH --&gt; CODE[Coding]\n        CODE --&gt; REVIEW[Review]\n        REVIEW --&gt; TEST[Testing]\n    end\n\n    subgraph \"Development Agents\"\n        PM[PM Advisor]\n        SA[System Architect]\n        DEV[Claude/Copilot]\n        CR[Code Reviewer]\n        UX[UX Designer]\n    end\n\n    PM --&gt; REQ\n    SA --&gt; ARCH\n    DEV --&gt; CODE\n    CR --&gt; REVIEW\n    UX --&gt; TEST</code></pre>"},{"location":"architecture/agent-strategy/#development-agent-benefits","title":"Development Agent Benefits","text":"<ul> <li>Requirements Quality: PM agent ensures business alignment</li> <li>Architecture Validation: System architect reviews design decisions</li> <li>Code Quality: Code reviewer enforces best practices</li> <li>UX Consistency: UX designer validates user experience</li> </ul>"},{"location":"architecture/agent-strategy/#integration-with-ides","title":"Integration with IDEs","text":"<p>Our development agents integrate with: - Claude Code: Primary development agent - GitHub Copilot: Code completion and generation - Cursor IDE: AI-native development environment - VS Code: Extensions for agent interaction</p>"},{"location":"architecture/agent-strategy/#strategic-success-metrics","title":"Strategic Success Metrics","text":""},{"location":"architecture/agent-strategy/#technical-metrics","title":"Technical Metrics","text":"<ul> <li>Configuration Changes vs Code Changes: 10:1 ratio</li> <li>New Agent Development Time: &lt;2 hours via configuration</li> <li>Provider Switch Time: &lt;30 minutes through configuration</li> <li>Test Coverage: 75% automated through configuration</li> </ul>"},{"location":"architecture/agent-strategy/#business-metrics-ai-projections","title":"Business Metrics (AI Projections)","text":"<ul> <li>Processing Time: 3-5 minutes vs industry 3-5 days</li> <li>Cost per Application: $6-10 vs industry $50-75</li> <li>Approval Rate: 15-20% higher through better assessment</li> <li>Error Rate: &lt;2% vs industry 8-12%</li> </ul>"},{"location":"architecture/agent-strategy/#implementation-roadmap","title":"Implementation Roadmap","text":""},{"location":"architecture/agent-strategy/#phase-1-foundation-current","title":"Phase 1: Foundation (Current)","text":"<p>\u2705 Configuration-driven personas \u2705 Sequential orchestration \u2705 OpenAI SDK provider \u2705 Development agent integration</p>"},{"location":"architecture/agent-strategy/#phase-2-enhancement-3-6-months","title":"Phase 2: Enhancement (3-6 months)","text":"<ul> <li> Parallel orchestration patterns</li> <li> Semantic Kernel provider</li> <li> Conditional routing logic</li> <li> Performance optimization</li> </ul>"},{"location":"architecture/agent-strategy/#phase-3-scale-6-12-months","title":"Phase 3: Scale (6-12 months)","text":"<ul> <li> Multi-provider load balancing</li> <li> Autogen integration</li> <li> Complex orchestration patterns</li> <li> Production deployment tools</li> </ul>"},{"location":"architecture/agent-strategy/#phase-4-advanced-features-12-months","title":"Phase 4: Advanced Features (12+ months)","text":"<ul> <li> Custom provider framework</li> <li> Self-optimizing agents</li> <li> Industry-specific configurations</li> <li> Global market adaptations</li> </ul>"},{"location":"architecture/agent-strategy/#architectural-decision-records","title":"Architectural Decision Records","text":"<p>Key decisions that shaped our strategy:</p>"},{"location":"architecture/agent-strategy/#adr-001-configuration-driven-architecture","title":"ADR-001: Configuration-Driven Architecture","text":"<ul> <li>Decision: Use YAML configuration for agent definition</li> <li>Rationale: Enables business user maintenance and rapid iteration</li> <li>Trade-offs: Slight runtime overhead for massive flexibility gain</li> </ul>"},{"location":"architecture/agent-strategy/#adr-002-provider-abstraction-layer","title":"ADR-002: Provider Abstraction Layer","text":"<ul> <li>Decision: Abstract provider implementations behind interface</li> <li>Rationale: Avoid vendor lock-in, enable cost optimization</li> <li>Trade-offs: Additional abstraction complexity for provider independence</li> </ul>"},{"location":"architecture/agent-strategy/#adr-003-persona-based-business-logic","title":"ADR-003: Persona-Based Business Logic","text":"<ul> <li>Decision: Keep business rules in markdown personas, not code</li> <li>Rationale: Non-developers can modify rules, easier compliance audits</li> <li>Trade-offs: Requires careful persona management and versioning</li> </ul>"},{"location":"architecture/agent-strategy/#adr-004-development-agent-integration","title":"ADR-004: Development Agent Integration","text":"<ul> <li>Decision: Use AI agents for development process itself</li> <li>Rationale: Improve code quality, accelerate development</li> <li>Trade-offs: Requires team training on agent collaboration</li> </ul>"},{"location":"architecture/agent-strategy/#conclusion","title":"Conclusion","text":"<p>Our configuration-driven, provider-agnostic agent strategy represents a different approach to multi-agent system design. By separating business logic from implementation, abstracting provider dependencies, and using AI-assisted development, we've created a system that is:</p> <ul> <li>Flexible: Adapt to changing requirements through configuration</li> <li>Scalable: Add agents and capabilities without architectural changes</li> <li>Maintainable: Business users can modify rules without code changes</li> <li>Future-Proof: Provider independence ensures long-term viability</li> </ul> <p>This experimental system demonstrates how modern multi-agent architectures should be built - with configuration at the core, providers as pluggable components, and AI agents assisting in both runtime and development.</p>"},{"location":"architecture/correct-two-endpoint-architecture/","title":"Correct Two-Endpoint API Architecture Design","text":"<p>Status: Recommended Architecture Date: 2025-09-29 Related ADRs: ADR-004, ADR-005, ADR-006, ADR-007, ADR-010</p>"},{"location":"architecture/correct-two-endpoint-architecture/#executive-summary","title":"Executive Summary","text":"<p>This document provides the correct architectural design for implementing the Loan Avengers API using the two-endpoint pattern that properly separates conversational data collection from formal loan processing.</p>"},{"location":"architecture/correct-two-endpoint-architecture/#key-principles","title":"Key Principles","text":"<ol> <li>Separation of Concerns: Cap-ital America collects data (conversational), WorkflowOrchestrator processes applications (technical)</li> <li>Type Safety: Strict type progression from <code>str</code> \u2192 <code>Dict[str, Any]</code> \u2192 <code>LoanApplication</code> \u2192 <code>LoanDecision</code></li> <li>ADR Compliance: Follows ADR-004 dual-layer architecture, ADR-006 sequential orchestration</li> <li>Framework Alignment: Proper use of Microsoft Agent Framework patterns</li> </ol>"},{"location":"architecture/correct-two-endpoint-architecture/#architecture-score-9510-vs-unified_workflowpy-4510","title":"Architecture Score: 9.5/10 (vs. unified_workflow.py: 4.5/10)","text":""},{"location":"architecture/correct-two-endpoint-architecture/#table-of-contents","title":"Table of Contents","text":"<ol> <li>System Architecture Overview</li> <li>Sequence Diagrams</li> <li>Component Architecture</li> <li>API Endpoint Specifications</li> <li>State Management Design</li> <li>Integration Points</li> <li>Implementation Checklist</li> <li>Migration Strategy</li> <li>Testing Strategy</li> <li>Answers to Specific Questions</li> </ol>"},{"location":"architecture/correct-two-endpoint-architecture/#system-architecture-overview","title":"System Architecture Overview","text":""},{"location":"architecture/correct-two-endpoint-architecture/#high-level-architecture","title":"High-Level Architecture","text":"<pre><code>\u250c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2510\n\u2502                        Frontend (React)                          \u2502\n\u2502  \u250c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2510              \u250c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2510    \u2502\n\u2502  \u2502  Cap-ital America Chat UI   \u2502              \u2502  Progress Display    \u2502    \u2502\n\u2502  \u2502  (Collection)    \u2502              \u2502  (Processing)        \u2502    \u2502\n\u2502  \u2514\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u252c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2518              \u2514\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u252c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2518    \u2502\n\u2514\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u253c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u253c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2518\n            \u2502                                     \u2502\n            \u2502 POST /api/chat                     \u2502 POST /api/process\n            \u2502 (Iterative)                        \u2502 (One-shot, streaming)\n            \u2502                                     \u2502\n\u250c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u253c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u253c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2510\n\u2502           \u2502          FastAPI Backend            \u2502                \u2502\n\u2502  \u250c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u25bc\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2510                   \u250c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u25bc\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2510    \u2502\n\u2502  \u2502  /api/chat      \u2502                   \u2502  /api/process     \u2502    \u2502\n\u2502  \u2502  Endpoint       \u2502                   \u2502  Endpoint         \u2502    \u2502\n\u2502  \u2514\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u252c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2518                   \u2514\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u252c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2518    \u2502\n\u2502           \u2502                                      \u2502                \u2502\n\u2502  \u250c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u25bc\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2510                   \u250c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u25bc\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2510    \u2502\n\u2502  \u2502 RileyCoordinator\u2502                   \u2502WorkflowOrchestrator\u2502   \u2502\n\u2502  \u2502 (Conversational)\u2502                   \u2502 (Technical)        \u2502    \u2502\n\u2502  \u2514\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u252c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2518                   \u2514\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u252c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2518    \u2502\n\u2502           \u2502                                      \u2502                \u2502\n\u2502           \u2502    LoanApplication                   \u2502                \u2502\n\u2502           \u2502    create_loan_application()         \u2502                \u2502\n\u2502           \u2514\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2518                \u2502\n\u2502                                                                    \u2502\n\u2502  \u250c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2510   \u2502\n\u2502  \u2502               ConversationSession                         \u2502   \u2502\n\u2502  \u2502  - collected_data: Dict[str, Any]                        \u2502   \u2502\n\u2502  \u2502  - application: LoanApplication | None                    \u2502   \u2502\n\u2502  \u2502  - decision: LoanDecision | None                          \u2502   \u2502\n\u2502  \u2502  - agent_thread: AgentThread                              \u2502   \u2502\n\u2502  \u2502  - status: active|ready|processing|completed              \u2502   \u2502\n\u2502  \u2514\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2518   \u2502\n\u2514\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2518\n</code></pre>"},{"location":"architecture/correct-two-endpoint-architecture/#phase-separation","title":"Phase Separation","text":"<p>Phase 1: Conversational Collection (Cap-ital America) - Endpoint: <code>POST /api/chat</code> - Pattern: Iterative conversation (multiple requests) - Input: User message (string) - Output: Cap-ital America response with collected data - State: Accumulated in <code>session.collected_data</code> - Completion: When Cap-ital America determines data is complete (<code>action: \"ready_for_processing\"</code>)</p> <p>Phase 2: Formal Processing (WorkflowOrchestrator) - Endpoint: <code>POST /api/process</code> - Pattern: One-shot processing (single request, streams events) - Input: Session ID (references complete application data) - Output: Streaming workflow events \u2192 Final LoanDecision - State: Read from <code>session.application</code>, write to <code>session.decision</code> - Completion: When final decision is made</p>"},{"location":"architecture/correct-two-endpoint-architecture/#sequence-diagrams","title":"Sequence Diagrams","text":""},{"location":"architecture/correct-two-endpoint-architecture/#complete-user-journey-collection-to-decision","title":"Complete User Journey: Collection to Decision","text":"<pre><code>sequenceDiagram\n    participant User\n    participant Frontend\n    participant ChatAPI as /api/chat\n    participant Cap-ital America as RileyCoordinator\n    participant Session as ConversationSession\n    participant ProcessAPI as /api/process\n    participant Workflow as WorkflowOrchestrator\n    participant Agents as Technical Agents\n\n    %% Phase 1: Data Collection\n    Note over User,Session: Phase 1: Conversational Data Collection\n\n    User-&gt;&gt;Frontend: Opens loan application\n    Frontend-&gt;&gt;ChatAPI: POST /api/chat (initial greeting)\n    ChatAPI-&gt;&gt;Session: create_session()\n    Session--&gt;&gt;ChatAPI: session_id\n    ChatAPI-&gt;&gt;Cap-ital America: process_conversation(\"\", thread, {})\n    Cap-ital America--&gt;&gt;ChatAPI: RileyResponse (greeting, 0% complete)\n    ChatAPI--&gt;&gt;Frontend: ConversationResponse\n    Frontend--&gt;&gt;User: Cap-ital America greeting displayed\n\n    loop Until data complete\n        User-&gt;&gt;Frontend: Types message (e.g., \"I need a home loan\")\n        Frontend-&gt;&gt;ChatAPI: POST /api/chat {user_message, session_id}\n        ChatAPI-&gt;&gt;Session: get_session(session_id)\n        Session--&gt;&gt;ChatAPI: session with collected_data\n        ChatAPI-&gt;&gt;Cap-ital America: process_conversation(msg, thread, collected_data)\n        Cap-ital America--&gt;&gt;ChatAPI: RileyResponse (updated data, completion %)\n        ChatAPI-&gt;&gt;Session: update_data(collected_data, completion)\n        ChatAPI--&gt;&gt;Frontend: ConversationResponse\n        Frontend--&gt;&gt;User: Cap-ital America response + progress bar\n    end\n\n    %% Transition point\n    Note over User,Session: Transition: Data Collection Complete\n\n    User-&gt;&gt;Frontend: Final message (completes data)\n    Frontend-&gt;&gt;ChatAPI: POST /api/chat {user_message, session_id}\n    ChatAPI-&gt;&gt;Cap-ital America: process_conversation(msg, thread, collected_data)\n    Cap-ital America--&gt;&gt;ChatAPI: RileyResponse (action: \"ready_for_processing\", 100%)\n    ChatAPI-&gt;&gt;Session: mark_ready_for_processing()\n    ChatAPI--&gt;&gt;Frontend: ConversationResponse (action: \"ready_for_processing\")\n    Frontend--&gt;&gt;User: \"Ready to process!\" + transition UI\n\n    %% Phase 2: Formal Processing\n    Note over User,Agents: Phase 2: Formal Loan Processing\n\n    User-&gt;&gt;Frontend: Clicks \"Submit Application\"\n    Frontend-&gt;&gt;ProcessAPI: POST /api/process {session_id}\n    ProcessAPI-&gt;&gt;Session: get_session(session_id)\n    Session--&gt;&gt;ProcessAPI: session with collected_data\n    ProcessAPI-&gt;&gt;Cap-ital America: create_loan_application(collected_data)\n    Cap-ital America--&gt;&gt;ProcessAPI: LoanApplication (validated)\n    ProcessAPI-&gt;&gt;Session: start_processing(application)\n    ProcessAPI-&gt;&gt;Workflow: process_loan_application(application, thread)\n\n    loop Workflow streaming\n        Workflow-&gt;&gt;Agents: Intake \u2192 Credit \u2192 Income \u2192 Risk\n        Agents--&gt;&gt;Workflow: Assessment results\n        Workflow--&gt;&gt;ProcessAPI: WorkflowResponse events (streaming)\n        ProcessAPI--&gt;&gt;Frontend: SSE events\n        Frontend--&gt;&gt;User: Progress updates by agent\n    end\n\n    Workflow--&gt;&gt;ProcessAPI: Final WorkflowResponse with LoanDecision\n    ProcessAPI-&gt;&gt;Session: complete_processing(decision)\n    ProcessAPI--&gt;&gt;Frontend: Final decision event\n    Frontend--&gt;&gt;User: Decision displayed with celebration/guidance</code></pre>"},{"location":"architecture/correct-two-endpoint-architecture/#phase-1-conversational-collection-detail","title":"Phase 1: Conversational Collection Detail","text":"<pre><code>sequenceDiagram\n    participant User\n    participant Frontend\n    participant API as /api/chat\n    participant Cap-ital America\n    participant Session\n    participant Thread as AgentThread\n\n    User-&gt;&gt;Frontend: \"I need a $300k home loan\"\n    Frontend-&gt;&gt;API: POST {user_message, session_id}\n\n    API-&gt;&gt;Session: get_or_create_session(session_id)\n    Session--&gt;&gt;API: session\n\n    API-&gt;&gt;Session: get_or_create_thread()\n    Session--&gt;&gt;API: agent_thread\n\n    API-&gt;&gt;Cap-ital America: process_conversation(message, thread, collected_data)\n\n    Cap-ital America-&gt;&gt;Thread: Add user message to conversation\n    Cap-ital America-&gt;&gt;Cap-ital America: Extract data via AI (loan_amount: 300000, loan_purpose: \"home\")\n    Cap-ital America-&gt;&gt;Cap-ital America: Calculate completion (2/8 fields = 25%)\n    Cap-ital America-&gt;&gt;Cap-ital America: Generate conversational response\n    Cap-ital America-&gt;&gt;Thread: Add Cap-ital America response to conversation\n\n    Cap-ital America--&gt;&gt;API: RileyResponse {&lt;br/&gt;  message: \"Great! A home loan for $300k...\",&lt;br/&gt;  action: \"collect_info\",&lt;br/&gt;  collected_data: {loan_amount: 300000, ...},&lt;br/&gt;  completion_percentage: 25,&lt;br/&gt;  next_step: \"Let me get your name...\"&lt;br/&gt;}\n\n    API-&gt;&gt;Session: update_data(collected_data, 25)\n\n    API--&gt;&gt;Frontend: ConversationResponse\n    Frontend--&gt;&gt;User: Display Cap-ital America's message + 25% progress</code></pre>"},{"location":"architecture/correct-two-endpoint-architecture/#phase-2-formal-processing-detail","title":"Phase 2: Formal Processing Detail","text":"<pre><code>sequenceDiagram\n    participant Frontend\n    participant API as /api/process\n    participant Session\n    participant Cap-ital America\n    participant Workflow\n    participant Agents as Sequential Agents\n\n    Frontend-&gt;&gt;API: POST /api/process {session_id}\n\n    API-&gt;&gt;Session: get_session(session_id)\n    Session--&gt;&gt;API: session (status: ready_for_processing)\n\n    alt Session not ready\n        API--&gt;&gt;Frontend: 400 Bad Request \"Session not ready\"\n    end\n\n    API-&gt;&gt;Cap-ital America: create_loan_application(session.collected_data)\n\n    alt Validation fails\n        Cap-ital America--&gt;&gt;API: ValueError (missing/invalid fields)\n        API--&gt;&gt;Frontend: 400 Bad Request with details\n    end\n\n    Cap-ital America--&gt;&gt;API: LoanApplication (validated)\n\n    API-&gt;&gt;Session: start_processing(application)\n    API-&gt;&gt;Workflow: process_loan_application(application, thread)\n\n    Workflow-&gt;&gt;Workflow: Build SequentialBuilder workflow\n    Workflow-&gt;&gt;Agents: workflow.run_stream(application)\n\n    loop For each agent\n        Agents--&gt;&gt;Workflow: AgentRunUpdateEvent (streaming)\n        Workflow--&gt;&gt;API: WorkflowResponse (agent update)\n        API--&gt;&gt;Frontend: SSE event\n    end\n\n    Agents--&gt;&gt;Workflow: WorkflowOutputEvent (final decision)\n    Workflow-&gt;&gt;Workflow: Parse decision from output\n\n    Workflow--&gt;&gt;API: WorkflowResponse with LoanDecision\n    API-&gt;&gt;Session: complete_processing(decision)\n    API--&gt;&gt;Frontend: Final SSE event with decision\n    Frontend--&gt;&gt;Frontend: Close SSE connection\n    Frontend--&gt;&gt;User: Display final decision UI</code></pre>"},{"location":"architecture/correct-two-endpoint-architecture/#state-transition-diagram","title":"State Transition Diagram","text":"<pre><code>stateDiagram-v2\n    [*] --&gt; Active: create_session()\n\n    state \"Collection Phase\" as Collection {\n        Active --&gt; Active: Cap-ital America conversation&lt;br/&gt;(update_data)\n        Active --&gt; ReadyForProcessing: completion = 100%&lt;br/&gt;(mark_ready_for_processing)\n    }\n\n    state \"Transition\" as Trans {\n        ReadyForProcessing --&gt; Processing: /api/process called&lt;br/&gt;(start_processing)\n    }\n\n    state \"Processing Phase\" as Proc {\n        Processing --&gt; Processing: Workflow events\n        Processing --&gt; Completed: Decision made&lt;br/&gt;(complete_processing)\n        Processing --&gt; Error: Workflow fails&lt;br/&gt;(mark_error)\n    }\n\n    Completed --&gt; [*]\n    Error --&gt; [*]\n\n    note right of Collection\n        - Status: active\n        - collected_data accumulates\n        - completion_percentage grows\n        - Multiple /api/chat calls\n    end note\n\n    note right of Trans\n        - Status: ready_for_processing\n        - LoanApplication created\n        - Validation occurs here\n    end note\n\n    note right of Proc\n        - Status: processing \u2192 completed\n        - WorkflowOrchestrator runs\n        - LoanDecision generated\n        - Single /api/process call\n    end note</code></pre>"},{"location":"architecture/correct-two-endpoint-architecture/#component-architecture","title":"Component Architecture","text":""},{"location":"architecture/correct-two-endpoint-architecture/#component-diagram","title":"Component Diagram","text":"<pre><code>graph TB\n    subgraph \"Frontend Layer\"\n        ChatUI[Cap-ital America Chat Component]\n        ProgressUI[Progress Display Component]\n        DecisionUI[Decision Display Component]\n    end\n\n    subgraph \"API Layer\"\n        ChatEndpoint[/api/chat Endpoint]\n        ProcessEndpoint[/api/process Endpoint]\n        SessionEndpoint[/api/sessions/* Endpoints]\n    end\n\n    subgraph \"Agent Layer\"\n        Cap-ital America[RileyCoordinator&lt;br/&gt;Conversational Collection]\n        Workflow[WorkflowOrchestrator&lt;br/&gt;Technical Processing]\n\n        subgraph \"Technical Agents\"\n            Intake[Intake Agent&lt;br/&gt;Intake Agent]\n            Credit[Credit Agent&lt;br/&gt;Scarlet Witch-Credit]\n            Income[Income Agent&lt;br/&gt;Hawk-Income]\n            Risk[Risk Agent&lt;br/&gt;Doctor Strange-Risk]\n        end\n    end\n\n    subgraph \"State Layer\"\n        SessionMgr[SessionManager]\n        ConvSession[ConversationSession&lt;br/&gt;- collected_data&lt;br/&gt;- application&lt;br/&gt;- decision&lt;br/&gt;- agent_thread&lt;br/&gt;- status]\n    end\n\n    subgraph \"Framework Layer\"\n        AgentThread[AgentThread&lt;br/&gt;Conversation Context]\n        SequentialBuilder[SequentialBuilder&lt;br/&gt;Workflow Construction]\n    end\n\n    subgraph \"Model Layer\"\n        Models[LoanApplication&lt;br/&gt;LoanDecision&lt;br/&gt;Pydantic Validation]\n    end\n\n    ChatUI --&gt;|POST /api/chat| ChatEndpoint\n    ChatEndpoint --&gt; Cap-ital America\n    ChatEndpoint --&gt; SessionMgr\n    SessionMgr --&gt; ConvSession\n    Cap-ital America --&gt; AgentThread\n    Cap-ital America --&gt; Models\n\n    ProgressUI --&gt;|POST /api/process| ProcessEndpoint\n    ProcessEndpoint --&gt; SessionMgr\n    ProcessEndpoint --&gt; Cap-ital America\n    ProcessEndpoint --&gt; Workflow\n    Workflow --&gt; SequentialBuilder\n    Workflow --&gt; AgentThread\n    SequentialBuilder --&gt; Intake\n    SequentialBuilder --&gt; Credit\n    SequentialBuilder --&gt; Income\n    SequentialBuilder --&gt; Risk\n\n    Workflow --&gt; Models\n    ProcessEndpoint --&gt;|SSE| DecisionUI\n\n    style Cap-ital America fill:#e1f5e1\n    style Workflow fill:#fff4e1\n    style Intake fill:#fff4e1\n    style Credit fill:#fff4e1\n    style Income fill:#fff4e1\n    style Risk fill:#fff4e1\n    style ConvSession fill:#e1f0ff</code></pre>"},{"location":"architecture/correct-two-endpoint-architecture/#separation-of-concerns","title":"Separation of Concerns","text":""},{"location":"architecture/correct-two-endpoint-architecture/#layer-1-conversational-collection-cap-ital-america","title":"Layer 1: Conversational Collection (Cap-ital America)","text":"<ul> <li>Purpose: Natural language data gathering</li> <li>Responsibility: Extract application data from conversation</li> <li>Input: User messages (strings)</li> <li>Output: Collected data (Dict[str, Any])</li> <li>Pattern: Iterative (multiple turns)</li> <li>Temperature: 0.7 (conversational)</li> <li>No MCP Tools: Cap-ital America doesn't process, just collects</li> </ul>"},{"location":"architecture/correct-two-endpoint-architecture/#layer-2-technical-processing-workfloworchestrator","title":"Layer 2: Technical Processing (WorkflowOrchestrator)","text":"<ul> <li>Purpose: Formal loan application processing</li> <li>Responsibility: Execute business logic, generate decision</li> <li>Input: LoanApplication (validated Pydantic)</li> <li>Output: LoanDecision (validated Pydantic)</li> <li>Pattern: One-shot (single workflow run)</li> <li>Temperature: 0.1-0.2 (analytical)</li> <li>MCP Tools: Credit bureau, document processing, financial calculations</li> </ul>"},{"location":"architecture/correct-two-endpoint-architecture/#transition-point-data-validation","title":"Transition Point: Data Validation","text":"<pre><code># Cap-ital America's responsibility\ncollected_data: Dict[str, Any] = riley.process_conversation(...)\n\n# Transition: Validation\napplication: LoanApplication = riley.create_loan_application(collected_data)\n# ^^ This raises ValueError if data is invalid/incomplete\n\n# WorkflowOrchestrator's responsibility\ndecision: LoanDecision = workflow.process_loan_application(application)\n</code></pre>"},{"location":"architecture/correct-two-endpoint-architecture/#api-endpoint-specifications","title":"API Endpoint Specifications","text":""},{"location":"architecture/correct-two-endpoint-architecture/#endpoint-1-post-apichat","title":"Endpoint 1: POST /api/chat","text":"<p>Purpose: Handle conversational data collection with Cap-ital America</p> <p>Request Schema: <pre><code>class ConversationRequest(BaseModel):\n    user_message: str = Field(\n        ...,\n        description=\"User's message in the conversation\",\n        min_length=1,\n        max_length=2000,\n        examples=[\"I need a home loan for $300,000\"]\n    )\n    session_id: str | None = Field(\n        None,\n        description=\"Session ID for conversation continuity (optional for first message)\"\n    )\n</code></pre></p> <p>Response Schema: <pre><code>class ConversationResponse(BaseModel):\n    agent_name: str = Field(\n        default=\"Cap-ital America\",\n        description=\"Name of the responding agent\"\n    )\n    message: str = Field(\n        ...,\n        description=\"Cap-ital America's conversational response to the user\"\n    )\n    action: str = Field(\n        ...,\n        description=\"Current action status\",\n        pattern=\"^(collect_info|ready_for_processing|need_clarification|error)$\"\n    )\n    collected_data: Dict[str, Any] = Field(\n        default_factory=dict,\n        description=\"Application data collected so far (can be partial)\"\n    )\n    next_step: str = Field(\n        ...,\n        description=\"Brief description of what Cap-ital America will ask/do next\"\n    )\n    completion_percentage: int = Field(\n        ...,\n        ge=0,\n        le=100,\n        description=\"Percentage of required data collected (0-100)\"\n    )\n    session_id: str = Field(\n        ...,\n        description=\"Session ID for subsequent requests\"\n    )\n</code></pre></p> <p>Response Examples:</p> <p>Initial greeting (no user message yet): <pre><code>{\n  \"agent_name\": \"Cap-ital America\",\n  \"message\": \"Hi! I'm Cap-ital America, your friendly loan coordinator! \ud83d\ude0a I'm here to help you with your loan application. What type of loan are you interested in?\",\n  \"action\": \"collect_info\",\n  \"collected_data\": {},\n  \"next_step\": \"Waiting for loan type\",\n  \"completion_percentage\": 0,\n  \"session_id\": \"550e8400-e29b-41d4-a716-446655440000\"\n}\n</code></pre></p> <p>Mid-conversation (data being collected): <pre><code>{\n  \"agent_name\": \"Cap-ital America\",\n  \"message\": \"Wonderful! A $300,000 home loan - that's a great investment! \ud83c\udfe1 Now, could you tell me your full name?\",\n  \"action\": \"collect_info\",\n  \"collected_data\": {\n    \"loan_amount\": 300000,\n    \"loan_purpose\": \"home\",\n    \"loan_term_months\": 360\n  },\n  \"next_step\": \"Collecting applicant name\",\n  \"completion_percentage\": 25,\n  \"session_id\": \"550e8400-e29b-41d4-a716-446655440000\"\n}\n</code></pre></p> <p>Data collection complete: <pre><code>{\n  \"agent_name\": \"Cap-ital America\",\n  \"message\": \"Perfect! I have everything I need. \u2728 Your application is ready to be processed by our specialist team. Would you like me to submit it now?\",\n  \"action\": \"ready_for_processing\",\n  \"collected_data\": {\n    \"applicant_name\": \"Intake Agent Doe\",\n    \"email\": \"john@example.com\",\n    \"phone\": \"+1-555-123-4567\",\n    \"date_of_birth\": \"1985-06-15\",\n    \"loan_amount\": 300000,\n    \"loan_purpose\": \"home\",\n    \"loan_term_months\": 360,\n    \"annual_income\": 120000,\n    \"employment_status\": \"employed\",\n    \"employer_name\": \"Tech Corp\",\n    \"months_employed\": 48\n  },\n  \"next_step\": \"Ready for formal processing\",\n  \"completion_percentage\": 100,\n  \"session_id\": \"550e8400-e29b-41d4-a716-446655440000\"\n}\n</code></pre></p> <p>Error Responses:</p> <p>500 Internal Server Error: <pre><code>{\n  \"error\": \"Failed to process conversation\",\n  \"details\": \"Agent framework connection failed\",\n  \"error_code\": \"AGENT_UNAVAILABLE\"\n}\n</code></pre></p> <p>Implementation: <pre><code>@app.post(\"/api/chat\", response_model=ConversationResponse)\nasync def handle_chat(request: ConversationRequest):\n    \"\"\"\n    Handle conversational data collection with Cap-ital America.\n\n    This endpoint manages ONLY the collection phase:\n    - Natural language conversation\n    - Data extraction and accumulation\n    - Progress tracking\n    - Readiness determination\n\n    Does NOT perform formal loan processing.\n    Use POST /api/process when action = \"ready_for_processing\".\n    \"\"\"\n    # Get or create session\n    session = session_manager.get_or_create_session(request.session_id)\n\n    # Initialize Cap-ital America\n    riley = RileyCoordinator()\n\n    # Process conversation\n    response = await riley.process_conversation(\n        user_message=request.user_message,\n        thread=session.get_or_create_thread(),\n        current_data=session.collected_data\n    )\n\n    # Update session state\n    session.update_data(\n        response.assessment.collected_data,\n        response.assessment.completion_percentage\n    )\n\n    # Mark ready if Cap-ital America says so\n    if response.assessment.action == \"ready_for_processing\":\n        session.mark_ready_for_processing()\n\n    # Return response\n    return ConversationResponse(\n        agent_name=\"Cap-ital America\",\n        message=response.assessment.message,\n        action=response.assessment.action,\n        collected_data=response.assessment.collected_data,\n        completion_percentage=response.assessment.completion_percentage,\n        next_step=response.assessment.next_step,\n        session_id=session.session_id\n    )\n</code></pre></p>"},{"location":"architecture/correct-two-endpoint-architecture/#endpoint-2-post-apiprocess","title":"Endpoint 2: POST /api/process","text":"<p>Purpose: Process complete loan application through WorkflowOrchestrator</p> <p>Request Schema: <pre><code>class ProcessingRequest(BaseModel):\n    session_id: str = Field(\n        ...,\n        description=\"Session ID containing complete application data\"\n    )\n</code></pre></p> <p>Response: Server-Sent Events (SSE) stream</p> <p>Event Format: <pre><code>class WorkflowEvent(BaseModel):\n    agent_name: str = Field(\n        ...,\n        description=\"Name of the agent currently processing\"\n    )\n    content: str = Field(\n        ...,\n        description=\"Event content/message\"\n    )\n    metadata: Dict[str, Any] | None = Field(\n        None,\n        description=\"Additional event metadata (step, status, etc.)\"\n    )\n    event_type: str = Field(\n        default=\"agent_update\",\n        description=\"Type of event\",\n        pattern=\"^(agent_update|phase_transition|final_decision|error)$\"\n    )\n</code></pre></p> <p>SSE Stream Example:</p> <pre><code>event: agent_update\ndata: {\"agent_name\": \"Intake_Agent\", \"content\": \"Validating application completeness...\", \"event_type\": \"agent_update\", \"metadata\": {\"step\": \"intake_validation\", \"phase\": \"validating\"}}\n\nevent: agent_update\ndata: {\"agent_name\": \"Intake_Agent\", \"content\": \"Application data verified. All required fields present.\", \"event_type\": \"agent_update\", \"metadata\": {\"step\": \"intake_validation\", \"phase\": \"validating\"}}\n\nevent: phase_transition\ndata: {\"agent_name\": \"Workflow_Orchestrator\", \"content\": \"Moving to credit assessment...\", \"event_type\": \"phase_transition\", \"metadata\": {\"from_phase\": \"validating\", \"to_phase\": \"credit_assessment\"}}\n\nevent: agent_update\ndata: {\"agent_name\": \"Credit_Agent\", \"content\": \"Analyzing credit history and debt-to-income ratio...\", \"event_type\": \"agent_update\", \"metadata\": {\"step\": \"credit_assessment\", \"phase\": \"credit\"}}\n\nevent: agent_update\ndata: {\"agent_name\": \"Credit_Agent\", \"content\": \"Credit score: 750. DTI ratio: 28%. Strong creditworthiness.\", \"event_type\": \"agent_update\", \"metadata\": {\"step\": \"credit_assessment\", \"phase\": \"credit\"}}\n\nevent: phase_transition\ndata: {\"agent_name\": \"Workflow_Orchestrator\", \"content\": \"Moving to income verification...\", \"event_type\": \"phase_transition\", \"metadata\": {\"from_phase\": \"credit\", \"to_phase\": \"income_verification\"}}\n\nevent: agent_update\ndata: {\"agent_name\": \"Income_Agent\", \"content\": \"Verifying employment and income stability...\", \"event_type\": \"agent_update\", \"metadata\": {\"step\": \"income_verification\", \"phase\": \"income\"}}\n\nevent: agent_update\ndata: {\"agent_name\": \"Income_Agent\", \"content\": \"Verified: $120k annual income, 4 years employment. Income stable.\", \"event_type\": \"agent_update\", \"metadata\": {\"step\": \"income_verification\", \"phase\": \"income\"}}\n\nevent: phase_transition\ndata: {\"agent_name\": \"Workflow_Orchestrator\", \"content\": \"Moving to risk analysis...\", \"event_type\": \"phase_transition\", \"metadata\": {\"from_phase\": \"income\", \"to_phase\": \"risk_analysis\"}}\n\nevent: agent_update\ndata: {\"agent_name\": \"Risk_Agent\", \"content\": \"Synthesizing all assessments for final risk determination...\", \"event_type\": \"agent_update\", \"metadata\": {\"step\": \"risk_analysis\", \"phase\": \"risk\"}}\n\nevent: final_decision\ndata: {\n  \"agent_name\": \"Workflow_Orchestrator\",\n  \"content\": \"\ud83c\udf89 Loan Application APPROVED!\",\n  \"event_type\": \"final_decision\",\n  \"metadata\": {\n    \"step\": \"final_decision\",\n    \"decision\": {\n      \"application_id\": \"LN987654321\",\n      \"decision\": \"approved\",\n      \"decision_reason\": \"Strong credit profile, stable income, acceptable risk\",\n      \"confidence_score\": 0.92,\n      \"approved_amount\": 300000,\n      \"approved_rate\": 0.0625,\n      \"approved_term_months\": 360,\n      \"conditions\": [\"Final employment verification\", \"Property appraisal required\"],\n      \"decision_maker\": \"WorkflowOrchestrator\",\n      \"reasoning\": \"Applicant demonstrates excellent creditworthiness (750 score), stable employment (4 years), and strong income ($120k) relative to loan amount ($300k). Debt-to-income ratio of 28% is well within acceptable limits. Risk analysis indicates low default probability.\",\n      \"agents_consulted\": [\"Intake_Agent\", \"Credit_Agent\", \"Income_Agent\", \"Risk_Agent\"],\n      \"processing_duration_seconds\": 12.3,\n      \"review_priority\": \"standard\",\n      \"orchestration_pattern\": \"sequential\"\n    }\n  }\n}\n</code></pre> <p>Error Event Example: <pre><code>event: error\ndata: {\"agent_name\": \"Workflow_Orchestrator\", \"content\": \"Application processing failed: Credit bureau service unavailable\", \"event_type\": \"error\", \"metadata\": {\"error_code\": \"CREDIT_BUREAU_UNAVAILABLE\", \"retry_possible\": true}}\n</code></pre></p> <p>Implementation: <pre><code>from fastapi.responses import StreamingResponse\nimport json\n\n@app.post(\"/api/process\")\nasync def handle_processing(request: ProcessingRequest):\n    \"\"\"\n    Process formal loan application through WorkflowOrchestrator.\n\n    This endpoint manages ONLY the processing phase:\n    - Validates session is ready\n    - Creates validated LoanApplication from collected data\n    - Runs sequential agent workflow (Intake \u2192 Credit \u2192 Income \u2192 Risk)\n    - Streams workflow events in real-time\n    - Generates final loan decision\n\n    Requires: session_id with status \"ready_for_processing\".\n    Returns: Server-Sent Events (SSE) stream.\n    \"\"\"\n\n    async def event_generator():\n        try:\n            # Get session\n            session = session_manager.get_session(request.session_id)\n            if not session:\n                error_event = {\n                    \"agent_name\": \"System\",\n                    \"content\": \"Session not found\",\n                    \"event_type\": \"error\",\n                    \"metadata\": {\"error_code\": \"SESSION_NOT_FOUND\"}\n                }\n                yield f\"event: error\\ndata: {json.dumps(error_event)}\\n\\n\"\n                return\n\n            if session.status != \"ready_for_processing\":\n                error_event = {\n                    \"agent_name\": \"System\",\n                    \"content\": f\"Session not ready for processing. Current status: {session.status}\",\n                    \"event_type\": \"error\",\n                    \"metadata\": {\"error_code\": \"SESSION_NOT_READY\", \"status\": session.status}\n                }\n                yield f\"event: error\\ndata: {json.dumps(error_event)}\\n\\n\"\n                return\n\n            # Create validated LoanApplication\n            riley = RileyCoordinator()\n            try:\n                application = riley.create_loan_application(session.collected_data)\n            except ValueError as e:\n                error_event = {\n                    \"agent_name\": \"System\",\n                    \"content\": f\"Invalid application data: {str(e)}\",\n                    \"event_type\": \"error\",\n                    \"metadata\": {\"error_code\": \"VALIDATION_FAILED\", \"details\": str(e)}\n                }\n                yield f\"event: error\\ndata: {json.dumps(error_event)}\\n\\n\"\n                return\n\n            # Mark session as processing\n            session.start_processing(application)\n\n            # Initialize WorkflowOrchestrator\n            orchestrator = WorkflowOrchestrator()\n\n            # Stream workflow events\n            async for workflow_response in orchestrator.process_loan_application(\n                application,\n                thread=session.get_or_create_thread()\n            ):\n                # Convert WorkflowResponse to SSE event\n                event_data = {\n                    \"agent_name\": workflow_response.agent_name,\n                    \"content\": workflow_response.content,\n                    \"event_type\": workflow_response.metadata.get(\"event_type\", \"agent_update\"),\n                    \"metadata\": workflow_response.metadata\n                }\n\n                event_type = event_data[\"event_type\"]\n                yield f\"event: {event_type}\\ndata: {json.dumps(event_data)}\\n\\n\"\n\n                # If final decision, complete session\n                if event_type == \"final_decision\" and \"decision\" in workflow_response.metadata:\n                    decision_dict = workflow_response.metadata[\"decision\"]\n                    decision = LoanDecision(**decision_dict)\n                    session.complete_processing(decision)\n\n        except Exception as e:\n            logger.error(f\"Processing stream error: {e}\", exc_info=True)\n            error_event = {\n                \"agent_name\": \"System\",\n                \"content\": f\"Processing error: {str(e)}\",\n                \"event_type\": \"error\",\n                \"metadata\": {\"error_code\": \"PROCESSING_ERROR\", \"details\": str(e)}\n            }\n            yield f\"event: error\\ndata: {json.dumps(error_event)}\\n\\n\"\n\n    return StreamingResponse(\n        event_generator(),\n        media_type=\"text/event-stream\",\n        headers={\n            \"Cache-Control\": \"no-cache\",\n            \"Connection\": \"keep-alive\",\n            \"X-Accel-Buffering\": \"no\"  # Disable nginx buffering\n        }\n    )\n</code></pre></p>"},{"location":"architecture/correct-two-endpoint-architecture/#state-management-design","title":"State Management Design","text":""},{"location":"architecture/correct-two-endpoint-architecture/#single-source-of-truth-conversationsession","title":"Single Source of Truth: ConversationSession","text":"<pre><code>class ConversationSession:\n    \"\"\"\n    Single source of truth for session state.\n\n    Manages both collection and processing phases with clear state transitions.\n    \"\"\"\n\n    def __init__(self, session_id: str | None = None):\n        self.session_id = session_id or str(uuid.uuid4())\n        self.created_at = datetime.now(timezone.utc)\n        self.last_activity = datetime.now(timezone.utc)\n\n        # Collection phase state\n        self.collected_data: Dict[str, Any] = {}\n        self.completion_percentage: int = 0\n        self.collection_status: Literal[\"active\", \"complete\"] = \"active\"\n\n        # Processing phase state\n        self.processing_status: Literal[\"pending\", \"ready\", \"processing\", \"completed\", \"error\"] = \"pending\"\n        self.application: LoanApplication | None = None\n        self.decision: LoanDecision | None = None\n\n        # Framework integration (private)\n        self._agent_thread: AgentThread | None = None\n\n    # Overall session status (for API responses)\n    @property\n    def status(self) -&gt; str:\n        \"\"\"\n        Compute overall session status from phase-specific states.\n\n        Returns one of:\n        - \"active\": Collection in progress\n        - \"ready_for_processing\": Collection complete, ready to process\n        - \"processing\": WorkflowOrchestrator running\n        - \"completed\": Final decision made\n        - \"error\": Error occurred\n        \"\"\"\n        if self.processing_status == \"error\":\n            return \"error\"\n        if self.processing_status == \"completed\":\n            return \"completed\"\n        if self.processing_status == \"processing\":\n            return \"processing\"\n        if self.processing_status == \"ready\":\n            return \"ready_for_processing\"\n        if self.collection_status == \"active\":\n            return \"active\"\n        return \"active\"\n\n    def get_or_create_thread(self) -&gt; AgentThread:\n        \"\"\"\n        Get AgentThread for Microsoft Agent Framework integration.\n\n        The thread provides conversation context for both Cap-ital America and\n        WorkflowOrchestrator, enabling conversation continuity.\n        \"\"\"\n        if not self._agent_thread:\n            self._agent_thread = AgentThread()\n            logger.debug(f\"Created AgentThread for session {self.session_id[:8]}***\")\n        return self._agent_thread\n\n    # Collection phase methods\n\n    def update_data(self, new_data: Dict[str, Any], completion_percentage: int) -&gt; None:\n        \"\"\"\n        Update collected application data during collection phase.\n\n        Called after each Cap-ital America conversation turn.\n        \"\"\"\n        self.collected_data.update(new_data)\n        self.completion_percentage = completion_percentage\n        self.last_activity = datetime.now(timezone.utc)\n\n        if completion_percentage &gt;= 100:\n            self.collection_status = \"complete\"\n\n    def mark_ready_for_processing(self) -&gt; None:\n        \"\"\"\n        Mark session as ready for formal processing.\n\n        Called when Cap-ital America determines data collection is complete.\n        \"\"\"\n        self.collection_status = \"complete\"\n        self.processing_status = \"ready\"\n        self.last_activity = datetime.now(timezone.utc)\n\n    # Processing phase methods\n\n    def start_processing(self, application: LoanApplication) -&gt; None:\n        \"\"\"\n        Transition to processing phase.\n\n        Called when /api/process endpoint begins workflow.\n        \"\"\"\n        self.application = application\n        self.processing_status = \"processing\"\n        self.last_activity = datetime.now(timezone.utc)\n\n    def complete_processing(self, decision: LoanDecision) -&gt; None:\n        \"\"\"\n        Complete processing phase with final decision.\n\n        Called when WorkflowOrchestrator produces final decision.\n        \"\"\"\n        self.decision = decision\n        self.processing_status = \"completed\"\n        self.last_activity = datetime.now(timezone.utc)\n\n    def mark_error(self, error_details: str | None = None) -&gt; None:\n        \"\"\"Mark session as errored.\"\"\"\n        self.processing_status = \"error\"\n        self.last_activity = datetime.now(timezone.utc)\n        logger.error(f\"Session {self.session_id[:8]}*** marked as error: {error_details}\")\n\n    # Serialization\n\n    def to_dict(self) -&gt; Dict[str, Any]:\n        \"\"\"Convert session to dictionary for API responses.\"\"\"\n        return {\n            \"session_id\": self.session_id,\n            \"created_at\": self.created_at.isoformat(),\n            \"last_activity\": self.last_activity.isoformat(),\n            \"status\": self.status,  # Computed property\n            \"collection_status\": self.collection_status,\n            \"processing_status\": self.processing_status,\n            \"completion_percentage\": self.completion_percentage,\n            \"collected_data\": self.collected_data,\n            \"has_application\": self.application is not None,\n            \"has_decision\": self.decision is not None,\n        }\n</code></pre>"},{"location":"architecture/correct-two-endpoint-architecture/#state-transition-rules","title":"State Transition Rules","text":"<pre><code>\u250c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2510\n\u2502                    Session Lifecycle                        \u2502\n\u2514\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2518\n\nStatus: \"active\" (Initial)\n\u251c\u2500 collection_status: \"active\"\n\u251c\u2500 processing_status: \"pending\"\n\u251c\u2500 collected_data: {} (empty or partial)\n\u251c\u2500 completion_percentage: 0-99\n\u2514\u2500 Allowed operations: POST /api/chat\n\n        \u2193 Cap-ital America conversation turns (multiple)\n\nStatus: \"active\" (Data accumulating)\n\u251c\u2500 collection_status: \"active\"\n\u251c\u2500 processing_status: \"pending\"\n\u251c\u2500 collected_data: {...} (partial, growing)\n\u251c\u2500 completion_percentage: 0-99 (increasing)\n\u2514\u2500 Allowed operations: POST /api/chat\n\n        \u2193 Cap-ital America determines complete (action: \"ready_for_processing\")\n\nStatus: \"ready_for_processing\" (Transition point)\n\u251c\u2500 collection_status: \"complete\"\n\u251c\u2500 processing_status: \"ready\"\n\u251c\u2500 collected_data: {...} (complete)\n\u251c\u2500 completion_percentage: 100\n\u2514\u2500 Allowed operations: POST /api/process\n\n        \u2193 /api/process called, LoanApplication created\n\nStatus: \"processing\" (WorkflowOrchestrator running)\n\u251c\u2500 collection_status: \"complete\"\n\u251c\u2500 processing_status: \"processing\"\n\u251c\u2500 application: LoanApplication (validated)\n\u251c\u2500 collected_data: {...} (frozen)\n\u2514\u2500 Allowed operations: (none - processing in progress)\n\n        \u2193 Workflow completes with decision\n\nStatus: \"completed\" (Final)\n\u251c\u2500 collection_status: \"complete\"\n\u251c\u2500 processing_status: \"completed\"\n\u251c\u2500 application: LoanApplication\n\u251c\u2500 decision: LoanDecision\n\u2514\u2500 Allowed operations: GET /api/sessions/{id}\n\n        \u2193 (Alternative path from any state)\n\nStatus: \"error\" (Error occurred)\n\u251c\u2500 processing_status: \"error\"\n\u251c\u2500 Error details logged\n\u2514\u2500 Allowed operations: GET /api/sessions/{id}\n</code></pre>"},{"location":"architecture/correct-two-endpoint-architecture/#no-sharedstate-duplication","title":"No SharedState Duplication","text":"<p>Important: Do NOT use Microsoft Agent Framework's <code>SharedState</code> for application data storage.</p> <p>Why: - Creates duplication with <code>ConversationSession.collected_data</code> - Synchronization challenges - Unclear source of truth - Additional complexity</p> <p>Correct pattern: <pre><code># \u2705 CORRECT: Session is source of truth\nsession = session_manager.get_session(session_id)\napplication_data = session.collected_data  # Read from session\n\n# Pass data as context to agents, not via SharedState\nriley_response = await riley.process_conversation(\n    user_message=msg,\n    thread=session.get_or_create_thread(),\n    current_data=session.collected_data  # Explicit parameter\n)\n\n# \u274c WRONG: Duplicating in SharedState\nshared_state = SharedState()\nawait shared_state.set(\"application_data\", session.collected_data)  # NO!\n</code></pre></p> <p>SharedState use cases (if needed in future): - Agent-to-agent temporary communication within a single workflow run - Caching computed values during processing - NOT for persisting application data</p>"},{"location":"architecture/correct-two-endpoint-architecture/#integration-points","title":"Integration Points","text":""},{"location":"architecture/correct-two-endpoint-architecture/#integration-point-1-cap-ital-america-loanapplication-validation","title":"Integration Point 1: Cap-ital America \u2192 LoanApplication Validation","text":"<p>Location: Transition from collection to processing</p> <p>Code: <pre><code># In /api/process endpoint\nsession = session_manager.get_session(request.session_id)\n\n# Integration point: Convert collected data to validated model\nriley = RileyCoordinator()\ntry:\n    application = riley.create_loan_application(session.collected_data)\nexcept ValueError as e:\n    # Validation failed - data incomplete or invalid\n    raise HTTPException(400, f\"Invalid application data: {str(e)}\")\n\n# If successful, application is now a validated Pydantic model\n# Safe to pass to WorkflowOrchestrator\n</code></pre></p> <p>RileyCoordinator.create_loan_application() (already implemented): <pre><code>def create_loan_application(self, collected_data: Dict[str, Any]) -&gt; LoanApplication:\n    \"\"\"\n    Convert collected data into validated LoanApplication.\n\n    Raises:\n        ValueError: If required fields missing or validation fails\n    \"\"\"\n    application_data = {\n        \"application_id\": f\"LN{hash(collected_data.get('email', 'unknown'))}\"[-10:],\n        \"applicant_name\": collected_data.get(\"applicant_name\"),\n        \"applicant_id\": str(hash(collected_data.get(\"email\", \"unknown\"))),\n        \"email\": collected_data.get(\"email\"),\n        \"phone\": collected_data.get(\"phone\"),\n        \"date_of_birth\": collected_data.get(\"date_of_birth\"),\n        \"loan_amount\": collected_data.get(\"loan_amount\"),\n        \"loan_purpose\": LoanPurpose(collected_data.get(\"loan_purpose\"))\n            if collected_data.get(\"loan_purpose\") else None,\n        \"loan_term_months\": collected_data.get(\"loan_term_months\", 360),\n        \"annual_income\": collected_data.get(\"annual_income\"),\n        \"employment_status\": EmploymentStatus(collected_data.get(\"employment_status\"))\n            if collected_data.get(\"employment_status\") else None,\n        \"employer_name\": collected_data.get(\"employer_name\"),\n        \"months_employed\": collected_data.get(\"months_employed\"),\n    }\n\n    # Pydantic validation happens here\n    # Raises ValidationError if data invalid\n    return LoanApplication(**application_data)\n</code></pre></p> <p>Error Handling: <pre><code>try:\n    application = riley.create_loan_application(collected_data)\nexcept ValueError as e:\n    # Return helpful error to frontend\n    return {\n        \"error\": \"validation_failed\",\n        \"message\": str(e),\n        \"missing_fields\": extract_missing_fields(e),  # Helper function\n        \"action\": \"return_to_collection\"  # UI should go back to chat\n    }\n</code></pre></p>"},{"location":"architecture/correct-two-endpoint-architecture/#integration-point-2-workfloworchestrator-event-streaming","title":"Integration Point 2: WorkflowOrchestrator Event Streaming","text":"<p>Location: /api/process endpoint event generator</p> <p>Pattern: Convert WorkflowResponse to SSE events</p> <pre><code>async def event_generator():\n    orchestrator = WorkflowOrchestrator()\n\n    # Stream events from orchestrator\n    async for workflow_response in orchestrator.process_loan_application(application, thread):\n        # Convert to SSE format\n        event_data = {\n            \"agent_name\": workflow_response.agent_name,\n            \"content\": workflow_response.content,\n            \"event_type\": workflow_response.metadata.get(\"event_type\", \"agent_update\"),\n            \"metadata\": workflow_response.metadata\n        }\n\n        # Determine event type for SSE\n        event_type = event_data[\"event_type\"]\n\n        # Yield SSE formatted event\n        yield f\"event: {event_type}\\ndata: {json.dumps(event_data)}\\n\\n\"\n\n        # Handle final decision\n        if event_type == \"final_decision\":\n            # Extract decision and update session\n            decision_dict = workflow_response.metadata[\"decision\"]\n            decision = LoanDecision(**decision_dict)\n            session.complete_processing(decision)\n</code></pre> <p>WorkflowResponse format (from WorkflowOrchestrator): <pre><code>class WorkflowResponse(BaseModel):\n    agent_name: str\n    content: str\n    metadata: Dict[str, Any] | None = None\n</code></pre></p> <p>Event type determination: <pre><code># In WorkflowOrchestrator, set event_type in metadata:\nyield WorkflowResponse(\n    agent_name=\"Intake_Agent\",\n    content=\"Validating application...\",\n    metadata={\n        \"event_type\": \"agent_update\",\n        \"step\": \"intake_validation\",\n        \"phase\": \"validating\"\n    }\n)\n\n# For final decision:\nyield WorkflowResponse(\n    agent_name=\"Workflow_Orchestrator\",\n    content=\"Loan approved!\",\n    metadata={\n        \"event_type\": \"final_decision\",\n        \"step\": \"final_decision\",\n        \"decision\": final_decision.model_dump(),\n        \"status\": \"approved\"\n    }\n)\n</code></pre></p>"},{"location":"architecture/correct-two-endpoint-architecture/#integration-point-3-frontend-event-handling","title":"Integration Point 3: Frontend Event Handling","text":"<p>Frontend SSE Connection: <pre><code>// In React component\nconst processApplication = async (sessionId: string) =&gt; {\n  const eventSource = new EventSource(\n    `http://localhost:8000/api/process?session_id=${sessionId}`\n  );\n\n  eventSource.addEventListener('agent_update', (event) =&gt; {\n    const data = JSON.parse(event.data);\n    // Update UI with agent progress\n    setCurrentAgent(data.agent_name);\n    setProgressMessage(data.content);\n  });\n\n  eventSource.addEventListener('phase_transition', (event) =&gt; {\n    const data = JSON.parse(event.data);\n    // Update phase indicator in UI\n    setCurrentPhase(data.metadata.to_phase);\n  });\n\n  eventSource.addEventListener('final_decision', (event) =&gt; {\n    const data = JSON.parse(event.data);\n    const decision = data.metadata.decision;\n\n    // Show final decision UI\n    setDecision(decision);\n    setProcessingComplete(true);\n\n    // Close SSE connection\n    eventSource.close();\n  });\n\n  eventSource.addEventListener('error', (event) =&gt; {\n    const data = JSON.parse(event.data);\n    // Show error UI\n    setError(data.content);\n    eventSource.close();\n  });\n\n  eventSource.onerror = () =&gt; {\n    // Handle connection errors\n    setError('Connection to server lost');\n    eventSource.close();\n  };\n};\n</code></pre></p> <p>Frontend State Management: <pre><code>// Chat phase (collection)\nconst [chatMessages, setChatMessages] = useState&lt;Message[]&gt;([]);\nconst [sessionId, setSessionId] = useState&lt;string | null&gt;(null);\nconst [completionPercentage, setCompletionPercentage] = useState(0);\nconst [readyForProcessing, setReadyForProcessing] = useState(false);\n\n// Processing phase\nconst [isProcessing, setIsProcessing] = useState(false);\nconst [currentAgent, setCurrentAgent] = useState&lt;string | null&gt;(null);\nconst [currentPhase, setCurrentPhase] = useState&lt;string | null&gt;(null);\nconst [decision, setDecision] = useState&lt;LoanDecision | null&gt;(null);\n\n// Transition\nuseEffect(() =&gt; {\n  if (completionPercentage === 100 &amp;&amp; readyForProcessing) {\n    // Show \"Ready to process\" UI with submit button\n    setShowSubmitButton(true);\n  }\n}, [completionPercentage, readyForProcessing]);\n\nconst handleSubmitApplication = () =&gt; {\n  setIsProcessing(true);\n  processApplication(sessionId!);\n};\n</code></pre></p>"},{"location":"architecture/correct-two-endpoint-architecture/#implementation-checklist","title":"Implementation Checklist","text":""},{"location":"architecture/correct-two-endpoint-architecture/#phase-1-api-refactoring-week-1","title":"Phase 1: API Refactoring (Week 1)","text":"<p>Files to Modify:</p> <ul> <li> <code>/workspaces/loan-avengers/loan_avengers/api/app.py</code></li> <li> Refactor <code>/api/chat</code> endpoint to use ONLY RileyCoordinator</li> <li> Remove unified_workflow imports and usage</li> <li> Create <code>/api/process</code> endpoint with SSE streaming</li> <li> Update error handling for both endpoints</li> <li> <p> Add comprehensive logging</p> </li> <li> <p> <code>/workspaces/loan-avengers/loan_avengers/api/models.py</code></p> </li> <li> Update <code>ConversationRequest</code> schema (already correct)</li> <li> Update <code>ConversationResponse</code> schema (already correct)</li> <li> Create <code>ProcessingRequest</code> schema</li> <li> Create <code>WorkflowEvent</code> schema for SSE events</li> <li> <p> Add validation patterns and examples</p> </li> <li> <p> <code>/workspaces/loan-avengers/loan_avengers/api/session_manager.py</code></p> </li> <li> Update <code>ConversationSession</code> with phase-specific states</li> <li> Add <code>collection_status</code> and <code>processing_status</code> fields</li> <li> Add <code>start_processing()</code> and <code>complete_processing()</code> methods</li> <li> Add <code>status</code> computed property</li> <li> Update <code>to_dict()</code> with new fields</li> </ul> <p>New Files to Create: None (use existing components)</p> <p>Files to Remove: - [ ] <code>/workspaces/loan-avengers/loan_avengers/agents/unified_workflow.py</code> (archive, don't delete) - [ ] <code>/workspaces/loan-avengers/loan_avengers/agents/mock_unified_workflow.py</code> (archive, don't delete)</p>"},{"location":"architecture/correct-two-endpoint-architecture/#phase-2-frontend-updates-week-1-2","title":"Phase 2: Frontend Updates (Week 1-2)","text":"<p>Files to Modify:</p> <ul> <li> <code>/workspaces/loan-avengers/loan_avengers/ui/src/components/chat/RileyChat.tsx</code></li> <li> Remove unified workflow handling</li> <li> Update to call <code>/api/chat</code> only</li> <li> Add detection for <code>action: \"ready_for_processing\"</code></li> <li> Show \"Submit Application\" button when ready</li> <li> <p> Add <code>onReadyForProcessing</code> callback prop</p> </li> <li> <p> Create new component: <code>/workspaces/loan-avengers/loan_avengers/ui/src/components/workflow/ProcessingView.tsx</code></p> </li> <li> SSE connection to <code>/api/process</code></li> <li> Real-time agent progress display</li> <li> Phase transition animations</li> <li> <p> Final decision display</p> </li> <li> <p> <code>/workspaces/loan-avengers/loan_avengers/ui/src/App.tsx</code></p> </li> <li> Add state management for phase transitions</li> <li> Show Cap-ital America chat during collection</li> <li> Show processing view during workflow</li> <li> Show decision view when complete</li> </ul>"},{"location":"architecture/correct-two-endpoint-architecture/#phase-3-workfloworchestrator-enhancement-week-2-3","title":"Phase 3: WorkflowOrchestrator Enhancement (Week 2-3)","text":"<p>Files to Modify:</p> <ul> <li> <code>/workspaces/loan-avengers/loan_avengers/agents/workflow_orchestrator.py</code></li> <li> Expand from MVP (Intake only) to full workflow</li> <li> Add Credit, Income, Risk agent executors</li> <li> Implement full SequentialBuilder workflow</li> <li> Add metadata to WorkflowResponse for event types</li> <li> Enhance error handling and recovery</li> </ul> <p>New Agent Persona Files (if not complete): - [ ] Ensure <code>/workspaces/loan-avengers/loan_avengers/agents/agent-persona/credit-agent-persona.md</code> exists - [ ] Ensure <code>/workspaces/loan-avengers/loan_avengers/agents/agent-persona/income-agent-persona.md</code> exists - [ ] Ensure <code>/workspaces/loan-avengers/loan_avengers/agents/agent-persona/risk-agent-persona.md</code> exists</p>"},{"location":"architecture/correct-two-endpoint-architecture/#phase-4-testing-week-3","title":"Phase 4: Testing (Week 3)","text":"<p>Test Files to Create/Update:</p> <ul> <li> <code>tests/api/test_chat_endpoint.py</code></li> <li> Test Cap-ital America conversation flow</li> <li> Test session creation and continuity</li> <li> Test data accumulation</li> <li> <p> Test completion detection</p> </li> <li> <p> <code>tests/api/test_process_endpoint.py</code></p> </li> <li> Test validation of session status</li> <li> Test LoanApplication creation</li> <li> Test SSE streaming</li> <li> <p> Test error handling</p> </li> <li> <p> <code>tests/integration/test_full_workflow.py</code></p> </li> <li> Test complete user journey</li> <li> Test phase transitions</li> <li> Test state management</li> <li> Test error recovery</li> </ul>"},{"location":"architecture/correct-two-endpoint-architecture/#phase-5-documentation-week-3-4","title":"Phase 5: Documentation (Week 3-4)","text":"<p>Documentation to Create/Update:</p> <ul> <li> This document (ADR-011 or similar)</li> <li> <code>/workspaces/loan-avengers/docs/api/api-endpoints.md</code> - Full API documentation</li> <li> <code>/workspaces/loan-avengers/docs/architecture/state-management.md</code> - State management patterns</li> <li> <code>/workspaces/loan-avengers/README.md</code> - Update with new architecture</li> <li> <code>/workspaces/loan-avengers/CLAUDE.md</code> - Update with two-endpoint pattern</li> </ul>"},{"location":"architecture/correct-two-endpoint-architecture/#migration-strategy","title":"Migration Strategy","text":""},{"location":"architecture/correct-two-endpoint-architecture/#step-1-archive-current-implementation-immediate","title":"Step 1: Archive Current Implementation (Immediate)","text":"<pre><code># Create archive directory\nmkdir -p /workspaces/loan-avengers/archive/unified-workflow-attempt\n\n# Move unified workflow files to archive\nmv loan_avengers/agents/unified_workflow.py archive/unified-workflow-attempt/\nmv loan_avengers/agents/mock_unified_workflow.py archive/unified-workflow-attempt/\n\n# Document why archived\ncat &gt; archive/unified-workflow-attempt/README.md &lt;&lt; 'EOF'\n# Unified Workflow - Archived Implementation\n\n**Date Archived**: 2025-09-29\n**Reason**: Architectural violations (see ADR-010)\n\nThis implementation attempted to unify collection and processing\nphases, but violated established architectural principles:\n- ADR-004: Dual-layer architecture\n- Confused Cap-ital America's role (conversational vs. technical)\n- Misused Microsoft Agent Framework SequentialBuilder\n\n**Replacement**: Two-endpoint pattern (see ADR-011)\n- `/api/chat` - Cap-ital America conversational collection\n- `/api/process` - WorkflowOrchestrator technical processing\nEOF\n</code></pre>"},{"location":"architecture/correct-two-endpoint-architecture/#step-2-implement-two-endpoint-pattern-week-1","title":"Step 2: Implement Two-Endpoint Pattern (Week 1)","text":"<p>Day 1-2: Update API Layer <pre><code># Priority 1: Refactor /api/chat to use only Cap-ital America\n@app.post(\"/api/chat\", response_model=ConversationResponse)\nasync def handle_chat(request: ConversationRequest):\n    # Remove unified_workflow imports\n    # Use only RileyCoordinator\n    # (See implementation in API Endpoint Specifications section)\n    pass\n\n# Priority 2: Create /api/process with SSE\n@app.post(\"/api/process\")\nasync def handle_processing(request: ProcessingRequest):\n    # SSE streaming of WorkflowOrchestrator events\n    # (See implementation in API Endpoint Specifications section)\n    pass\n</code></pre></p> <p>Day 3-4: Update Session Management <pre><code># Add phase-specific state fields\nclass ConversationSession:\n    collection_status: Literal[\"active\", \"complete\"]\n    processing_status: Literal[\"pending\", \"ready\", \"processing\", \"completed\", \"error\"]\n    # (See full implementation in State Management Design section)\n</code></pre></p> <p>Day 5: Testing and Validation - Test /api/chat with Cap-ital America - Test /api/process with WorkflowOrchestrator - Test session state transitions - Verify no SharedState duplication</p>"},{"location":"architecture/correct-two-endpoint-architecture/#step-3-frontend-updates-week-1-2","title":"Step 3: Frontend Updates (Week 1-2)","text":"<p>Week 1: Update Cap-ital America Chat Component <pre><code>// Remove unified workflow calls\n// Add readyForProcessing detection\n// Emit onReadyForProcessing event\n\nexport function RileyChat({\n  onApplicationComplete,\n  onProgressUpdate,\n  onReadyForProcessing  // NEW\n}: RileyChatProps) {\n  // ... existing chat logic ...\n\n  // Check if ready for processing\n  if (data.action === 'ready_for_processing' &amp;&amp; data.completion_percentage === 100) {\n    onReadyForProcessing(data.collected_data, sessionId);\n  }\n}\n</code></pre></p> <p>Week 2: Create Processing View Component <pre><code>// New component for workflow processing phase\nexport function ProcessingView({ sessionId }: ProcessingViewProps) {\n  // SSE connection to /api/process\n  // Display agent progress\n  // Show final decision\n}\n</code></pre></p>"},{"location":"architecture/correct-two-endpoint-architecture/#step-4-rollout-plan","title":"Step 4: Rollout Plan","text":"<p>Development Environment (Days 1-5): 1. Deploy API changes to dev 2. Update frontend to use new endpoints 3. End-to-end testing 4. Performance testing</p> <p>Staging Environment (Days 6-10): 1. Deploy to staging 2. QA testing with real-like data 3. Load testing 4. User acceptance testing (if applicable)</p> <p>Production Deployment (Day 11+): 1. Feature flag: <code>use_two_endpoint_pattern</code> (enabled) 2. Deploy backend first (backwards compatible) 3. Deploy frontend with new flow 4. Monitor metrics:    - Response times for /api/chat    - Streaming performance for /api/process    - Error rates    - Session completion rates</p> <p>Rollback Plan: - If issues detected, disable feature flag - Frontend falls back to previous version - Session data preserved (forward compatible)</p>"},{"location":"architecture/correct-two-endpoint-architecture/#step-5-cleanup-week-4","title":"Step 5: Cleanup (Week 4)","text":"<p>Once stable in production: - Remove unified_workflow references completely - Clean up archived code - Update all documentation - Remove feature flags</p>"},{"location":"architecture/correct-two-endpoint-architecture/#testing-strategy","title":"Testing Strategy","text":""},{"location":"architecture/correct-two-endpoint-architecture/#unit-tests","title":"Unit Tests","text":"<p>Test RileyCoordinator (<code>tests/agents/test_riley_coordinator.py</code>): <pre><code>@pytest.mark.asyncio\nasync def test_riley_conversation_data_extraction():\n    \"\"\"Test Cap-ital America extracts data from user messages.\"\"\"\n    riley = RileyCoordinator()\n\n    response = await riley.process_conversation(\n        user_message=\"I need a $300,000 home loan\",\n        thread=None,\n        current_data={}\n    )\n\n    assert response.assessment.action == \"collect_info\"\n    assert response.assessment.collected_data[\"loan_amount\"] == 300000\n    assert response.assessment.collected_data[\"loan_purpose\"] == \"home\"\n    assert 0 &lt; response.assessment.completion_percentage &lt; 100\n\n@pytest.mark.asyncio\nasync def test_riley_completion_detection():\n    \"\"\"Test Cap-ital America detects when data collection is complete.\"\"\"\n    riley = RileyCoordinator()\n\n    complete_data = {\n        \"applicant_name\": \"Intake Agent Doe\",\n        \"email\": \"john@example.com\",\n        \"phone\": \"+1-555-123-4567\",\n        \"date_of_birth\": \"1985-06-15\",\n        \"loan_amount\": 300000,\n        \"loan_purpose\": \"home\",\n        \"annual_income\": 120000,\n        \"employment_status\": \"employed\"\n    }\n\n    response = await riley.process_conversation(\n        user_message=\"Yes, that's correct. Submit it.\",\n        thread=AgentThread(),\n        current_data=complete_data\n    )\n\n    assert response.assessment.action == \"ready_for_processing\"\n    assert response.assessment.completion_percentage == 100\n\ndef test_create_loan_application_success():\n    \"\"\"Test LoanApplication creation from complete data.\"\"\"\n    riley = RileyCoordinator()\n\n    collected_data = {\n        \"applicant_name\": \"Intake Agent Doe\",\n        \"email\": \"john@example.com\",\n        \"phone\": \"+1-555-123-4567\",\n        \"date_of_birth\": \"1985-06-15\",\n        \"loan_amount\": 300000,\n        \"loan_purpose\": \"home\",\n        \"annual_income\": 120000,\n        \"employment_status\": \"employed\",\n        \"employer_name\": \"Tech Corp\",\n        \"months_employed\": 48\n    }\n\n    application = riley.create_loan_application(collected_data)\n\n    assert isinstance(application, LoanApplication)\n    assert application.loan_amount == 300000\n    assert application.applicant_name == \"Intake Agent Doe\"\n\ndef test_create_loan_application_validation_fails():\n    \"\"\"Test LoanApplication creation fails with incomplete data.\"\"\"\n    riley = RileyCoordinator()\n\n    incomplete_data = {\n        \"applicant_name\": \"Intake Agent Doe\",\n        # Missing required fields\n    }\n\n    with pytest.raises(ValueError):\n        riley.create_loan_application(incomplete_data)\n</code></pre></p> <p>Test WorkflowOrchestrator (<code>tests/agents/test_workflow_orchestrator.py</code>): <pre><code>@pytest.mark.asyncio\nasync def test_workflow_orchestrator_intake_phase():\n    \"\"\"Test WorkflowOrchestrator processes application.\"\"\"\n    orchestrator = WorkflowOrchestrator()\n\n    application = LoanApplication(\n        application_id=\"LN12345\",\n        applicant_name=\"Intake Agent Doe\",\n        # ... complete application data ...\n    )\n\n    events = []\n    async for response in orchestrator.process_loan_application(application):\n        events.append(response)\n\n    # Verify events\n    assert len(events) &gt; 0\n    assert any(e.agent_name == \"Intake_Agent\" for e in events)\n    assert any(\"decision\" in e.metadata for e in events)\n\n    # Verify final decision\n    final_event = events[-1]\n    assert \"decision\" in final_event.metadata\n    decision = final_event.metadata[\"decision\"]\n    assert decision[\"application_id\"] == \"LN12345\"\n</code></pre></p>"},{"location":"architecture/correct-two-endpoint-architecture/#integration-tests","title":"Integration Tests","text":"<p>Test Complete User Journey (<code>tests/integration/test_full_workflow.py</code>): <pre><code>@pytest.mark.asyncio\nasync def test_complete_user_journey():\n    \"\"\"Test full journey: collection \u2192 validation \u2192 processing \u2192 decision.\"\"\"\n\n    # Phase 1: Collection with Cap-ital America\n    session_manager = SessionManager()\n    session = session_manager.create_session()\n    riley = RileyCoordinator()\n\n    # Simulate conversation turns\n    messages = [\n        \"I need a home loan for $300,000\",\n        \"My name is Intake Agent Doe\",\n        \"My email is john@example.com\",\n        # ... more messages to complete data ...\n    ]\n\n    for msg in messages:\n        response = await riley.process_conversation(\n            user_message=msg,\n            thread=session.get_or_create_thread(),\n            current_data=session.collected_data\n        )\n        session.update_data(\n            response.assessment.collected_data,\n            response.assessment.completion_percentage\n        )\n\n    # Verify collection complete\n    assert session.completion_percentage == 100\n\n    # Phase 2: Validation\n    application = riley.create_loan_application(session.collected_data)\n    assert isinstance(application, LoanApplication)\n\n    # Phase 3: Processing\n    session.start_processing(application)\n    orchestrator = WorkflowOrchestrator()\n\n    events = []\n    async for event in orchestrator.process_loan_application(\n        application,\n        thread=session.get_or_create_thread()\n    ):\n        events.append(event)\n\n    # Verify final decision\n    final_event = events[-1]\n    assert \"decision\" in final_event.metadata\n\n    decision_dict = final_event.metadata[\"decision\"]\n    decision = LoanDecision(**decision_dict)\n\n    session.complete_processing(decision)\n\n    # Verify final state\n    assert session.status == \"completed\"\n    assert session.decision is not None\n</code></pre></p>"},{"location":"architecture/correct-two-endpoint-architecture/#api-tests","title":"API Tests","text":"<p>Test /api/chat Endpoint (<code>tests/api/test_chat_endpoint.py</code>): <pre><code>from fastapi.testclient import TestClient\n\ndef test_chat_endpoint_initial_greeting():\n    \"\"\"Test /api/chat returns Cap-ital America's greeting.\"\"\"\n    client = TestClient(app)\n\n    response = client.post(\"/api/chat\", json={\n        \"user_message\": \"Hello\"\n    })\n\n    assert response.status_code == 200\n    data = response.json()\n    assert data[\"agent_name\"] == \"Cap-ital America\"\n    assert \"session_id\" in data\n    assert data[\"action\"] == \"collect_info\"\n\ndef test_chat_endpoint_session_continuity():\n    \"\"\"Test /api/chat maintains session across requests.\"\"\"\n    client = TestClient(app)\n\n    # First request\n    response1 = client.post(\"/api/chat\", json={\n        \"user_message\": \"I need a $300k loan\"\n    })\n    session_id = response1.json()[\"session_id\"]\n\n    # Second request with same session\n    response2 = client.post(\"/api/chat\", json={\n        \"user_message\": \"My name is Intake Agent Doe\",\n        \"session_id\": session_id\n    })\n\n    data = response2.json()\n    assert data[\"session_id\"] == session_id\n    assert \"loan_amount\" in data[\"collected_data\"]\n    assert \"applicant_name\" in data[\"collected_data\"]\n</code></pre></p> <p>Test /api/process Endpoint (<code>tests/api/test_process_endpoint.py</code>): <pre><code>def test_process_endpoint_requires_ready_session():\n    \"\"\"Test /api/process rejects session not ready.\"\"\"\n    client = TestClient(app)\n\n    # Create session but don't complete data\n    session = session_manager.create_session()\n\n    response = client.post(\"/api/process\", json={\n        \"session_id\": session.session_id\n    })\n\n    assert response.status_code == 400\n    assert \"not ready\" in response.json()[\"detail\"].lower()\n\ndef test_process_endpoint_sse_streaming():\n    \"\"\"Test /api/process returns SSE stream.\"\"\"\n    client = TestClient(app)\n\n    # Create ready session\n    session = session_manager.create_session()\n    session.collected_data = {...}  # Complete data\n    session.mark_ready_for_processing()\n\n    # Stream events\n    with client.stream(\"POST\", f\"/api/process?session_id={session.session_id}\") as response:\n        events = []\n        for line in response.iter_lines():\n            if line.startswith(\"data:\"):\n                event_data = json.loads(line[5:])  # Remove \"data:\" prefix\n                events.append(event_data)\n\n        # Verify events\n        assert len(events) &gt; 0\n        assert any(e[\"agent_name\"] == \"Intake_Agent\" for e in events)\n        assert any(e[\"event_type\"] == \"final_decision\" for e in events)\n</code></pre></p>"},{"location":"architecture/correct-two-endpoint-architecture/#answers-to-specific-questions","title":"Answers to Specific Questions","text":""},{"location":"architecture/correct-two-endpoint-architecture/#q1-should-workfloworchestrator-be-expanded-to-include-all-agents-or-start-with-intake-only","title":"Q1: Should WorkflowOrchestrator be expanded to include ALL agents or start with Intake only?","text":"<p>Answer: Start with Intake only (MVP), then expand incrementally.</p> <p>Reasoning: 1. MVP Validation: Current WorkflowOrchestrator MVP with Intake \u2192 Mock Approval is working. Validate the two-endpoint pattern works correctly first. 2. Incremental Risk: Adding all agents at once increases complexity and risk. Better to add one agent at a time. 3. Framework Learning: Team learns SequentialBuilder patterns incrementally. 4. User Value: Intake-only still provides value (validation, basic approval/rejection).</p> <p>Recommended Expansion Schedule: - Week 1-2: Two-endpoint pattern with Intake MVP - Week 3: Add Credit agent executor - Week 4: Add Income agent executor - Week 5: Add Risk agent executor - Week 6: Full workflow integration and optimization</p> <p>Implementation Pattern: <pre><code># Week 3: Add Credit agent\ndef _create_credit_executor(self) -&gt; ChatAgent:\n    persona = PersonaLoader.load_persona(\"credit\")\n    return ChatAgent(\n        chat_client=self.chat_client,\n        instructions=persona,\n        name=\"Credit_Agent\",\n        temperature=0.2,\n        max_tokens=600\n    )\n\n# Update workflow\nworkflow = (WorkflowBuilder()\n    .set_start_executor(self.intake_executor)\n    .add_edge(self.intake_executor, self.credit_executor)  # NEW\n    .build())\n</code></pre></p>"},{"location":"architecture/correct-two-endpoint-architecture/#q2-how-should-we-handle-the-transition-between-collection-and-processing-in-the-ui","title":"Q2: How should we handle the transition between collection and processing in the UI?","text":"<p>Answer: Clear visual transition with user confirmation.</p> <p>UI Flow:</p> <pre><code>\u250c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2510\n\u2502 Phase 1: Collection (Cap-ital America Chat Interface)                  \u2502\n\u251c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2524\n\u2502                                                              \u2502\n\u2502  [Chat messages with Cap-ital America]                                 \u2502\n\u2502  User: \"I need a $300k home loan\"                           \u2502\n\u2502  Cap-ital America: \"Great! Could you tell me your name?\"               \u2502\n\u2502  User: \"Intake Agent Doe\"                                           \u2502\n\u2502  ...                                                         \u2502\n\u2502                                                              \u2502\n\u2502  \u250c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2510  \u2502\n\u2502  \u2502 Progress: \u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2591\u2591\u2591\u2591\u2591\u2591\u2591\u2591\u2591\u2591 75% Complete      \u2502  \u2502\n\u2502  \u2514\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2518  \u2502\n\u2502                                                              \u2502\n\u2514\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2518\n                            \u2193\n        (Cap-ital America: action = \"ready_for_processing\")\n                            \u2193\n\u250c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2510\n\u2502 Transition: Application Complete                            \u2502\n\u251c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2524\n\u2502                                                              \u2502\n\u2502  \u2705 Application Complete!                                   \u2502\n\u2502                                                              \u2502\n\u2502  Cap-ital America has collected all required information. Review       \u2502\n\u2502  your details below, then submit for processing.            \u2502\n\u2502                                                              \u2502\n\u2502  \u250c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2510  \u2502\n\u2502  \u2502 Applicant: Intake Agent Doe                                  \u2502  \u2502\n\u2502  \u2502 Loan Amount: $300,000                                \u2502  \u2502\n\u2502  \u2502 Purpose: Home Purchase                               \u2502  \u2502\n\u2502  \u2502 Income: $120,000/year                                \u2502  \u2502\n\u2502  \u2502 [View All Details \u25bc]                                 \u2502  \u2502\n\u2502  \u2514\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2518  \u2502\n\u2502                                                              \u2502\n\u2502  [ \u2190 Edit Details ]  [ Submit Application \u2192 ]             \u2502\n\u2502                                                              \u2502\n\u2514\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2518\n                            \u2193\n            (User clicks \"Submit Application\")\n                            \u2193\n\u250c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2510\n\u2502 Phase 2: Processing (Workflow Progress Interface)           \u2502\n\u251c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2524\n\u2502                                                              \u2502\n\u2502  Processing Your Application...                             \u2502\n\u2502                                                              \u2502\n\u2502  \u250c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2510  \u2502\n\u2502  \u2502 \u2705 Intake Validation   (Intake Agent - Complete)            \u2502  \u2502\n\u2502  \u2502 \u23f3 Credit Assessment   (Scarlet Witch-Credit - In Progress)       \u2502  \u2502\n\u2502  \u2502 \u26aa Income Verification (Hawk-Income - Pending)            \u2502  \u2502\n\u2502  \u2502 \u26aa Risk Analysis       (Doctor Strange-Risk - Pending)             \u2502  \u2502\n\u2502  \u2514\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2518  \u2502\n\u2502                                                              \u2502\n\u2502  Current: Analyzing credit history and debt ratios...       \u2502\n\u2502                                                              \u2502\n\u2502  [Live updates via SSE]                                     \u2502\n\u2502                                                              \u2502\n\u2514\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2518\n                            \u2193\n                (Workflow completes)\n                            \u2193\n\u250c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2510\n\u2502 Final: Decision Display                                      \u2502\n\u251c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2524\n\u2502                                                              \u2502\n\u2502  \ud83c\udf89 Congratulations! Your loan is APPROVED!                 \u2502\n\u2502                                                              \u2502\n\u2502  Approved Amount: $300,000                                  \u2502\n\u2502  Interest Rate: 6.25% APR                                   \u2502\n\u2502  Term: 30 years (360 months)                                \u2502\n\u2502                                                              \u2502\n\u2502  Next Steps:                                                \u2502\n\u2502  \u2022 Schedule property appraisal                              \u2502\n\u2502  \u2022 Complete employment verification                         \u2502\n\u2502  \u2022 Review and sign loan documents                           \u2502\n\u2502                                                              \u2502\n\u2502  [ View Full Decision Details ]                             \u2502\n\u2502                                                              \u2502\n\u2514\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2518\n</code></pre> <p>Implementation:</p> <pre><code>// App.tsx - Main state machine\nconst [phase, setPhase] = useState&lt;'collection' | 'transition' | 'processing' | 'complete'&gt;('collection');\nconst [sessionId, setSessionId] = useState&lt;string | null&gt;(null);\nconst [collectedData, setCollectedData] = useState&lt;any&gt;(null);\nconst [decision, setDecision] = useState&lt;LoanDecision | null&gt;(null);\n\nconst handleReadyForProcessing = (data: any, sid: string) =&gt; {\n  setCollectedData(data);\n  setSessionId(sid);\n  setPhase('transition');\n};\n\nconst handleSubmitApplication = () =&gt; {\n  setPhase('processing');\n  processApplication(sessionId!);\n};\n\nreturn (\n  &lt;&gt;\n    {phase === 'collection' &amp;&amp; (\n      &lt;RileyChat onReadyForProcessing={handleReadyForProcessing} /&gt;\n    )}\n\n    {phase === 'transition' &amp;&amp; (\n      &lt;ApplicationReview\n        data={collectedData}\n        onEdit={() =&gt; setPhase('collection')}\n        onSubmit={handleSubmitApplication}\n      /&gt;\n    )}\n\n    {phase === 'processing' &amp;&amp; (\n      &lt;ProcessingView\n        sessionId={sessionId!}\n        onComplete={(dec) =&gt; {\n          setDecision(dec);\n          setPhase('complete');\n        }}\n      /&gt;\n    )}\n\n    {phase === 'complete' &amp;&amp; (\n      &lt;DecisionView decision={decision!} /&gt;\n    )}\n  &lt;/&gt;\n);\n</code></pre> <p>Key UX Principles: 1. Clear Progress: Always show what phase user is in 2. User Control: User clicks \"Submit\" to start processing (not automatic) 3. Review Opportunity: Show collected data, allow edits before submitting 4. No Surprises: Explain what happens next at each stage 5. Transparent Processing: Show real-time agent progress during workflow</p>"},{"location":"architecture/correct-two-endpoint-architecture/#q3-whats-the-best-way-to-validate-collected-data-before-creating-loanapplication","title":"Q3: What's the best way to validate collected data before creating LoanApplication?","text":"<p>Answer: Use RileyCoordinator.create_loan_application() with comprehensive error handling.</p> <p>Validation Approach:</p> <pre><code># In /api/process endpoint\ntry:\n    # Attempt to create validated LoanApplication\n    application = riley.create_loan_application(session.collected_data)\n\nexcept ValueError as validation_error:\n    # Pydantic validation failed\n\n    # Parse error to extract missing/invalid fields\n    missing_fields = []\n    invalid_fields = []\n\n    error_str = str(validation_error)\n\n    # Extract field names from Pydantic error message\n    # (Pydantic provides structured errors - use those)\n    if hasattr(validation_error, 'errors'):\n        for err in validation_error.errors():\n            field = err['loc'][0]\n            error_type = err['type']\n\n            if error_type == 'missing':\n                missing_fields.append(field)\n            else:\n                invalid_fields.append({\n                    'field': field,\n                    'error': err['msg']\n                })\n\n    # Return helpful error to frontend\n    raise HTTPException(\n        status_code=400,\n        detail={\n            \"error\": \"validation_failed\",\n            \"message\": \"Application data is incomplete or invalid\",\n            \"missing_fields\": missing_fields,\n            \"invalid_fields\": invalid_fields,\n            \"action\": \"return_to_collection\",\n            \"suggestion\": \"Please provide the missing information.\"\n        }\n    )\n\nexcept Exception as e:\n    # Unexpected error\n    logger.error(f\"Unexpected validation error: {e}\", exc_info=True)\n    raise HTTPException(\n        status_code=500,\n        detail=f\"Validation error: {str(e)}\"\n    )\n</code></pre> <p>Frontend Handling:</p> <pre><code>const handleSubmitApplication = async () =&gt; {\n  try {\n    setPhase('processing');\n    await processApplication(sessionId!);\n  } catch (error) {\n    if (error.status === 400) {\n      // Validation failed - return to collection\n      const details = error.detail;\n\n      // Show error message\n      setErrorMessage(details.message);\n\n      // Highlight missing fields\n      setMissingFields(details.missing_fields);\n\n      // Return to chat to complete missing data\n      setPhase('collection');\n\n      // Add system message in chat\n      addSystemMessage(\n        `I need a bit more information: ${details.missing_fields.join(', ')}`\n      );\n    } else {\n      // Unexpected error\n      setErrorMessage('An unexpected error occurred. Please try again.');\n    }\n  }\n};\n</code></pre> <p>Validation Best Practices: 1. Cap-ital America's Responsibility: Cap-ital America should minimize validation errors by collecting complete data 2. Double-Check: RileyCoordinator.create_loan_application() is final validation gate 3. Clear Errors: Provide specific field-level errors, not generic messages 4. Easy Recovery: Allow user to return to chat and complete missing data 5. Log for Improvement: Log validation failures to improve Cap-ital America's collection prompts</p>"},{"location":"architecture/correct-two-endpoint-architecture/#q4-should-we-use-server-sent-events-sse-or-websockets-for-streaming-workflow-events","title":"Q4: Should we use Server-Sent Events (SSE) or WebSockets for streaming workflow events?","text":"<p>Answer: Use Server-Sent Events (SSE).</p> <p>Reasoning:</p> Aspect SSE (Recommended) WebSockets Complexity Simple (one-way server\u2192client) Complex (bi-directional) Overhead Minimal Higher (handshake, framing) Use Case Fit \u2705 Perfect (streaming events) \u274c Overkill (don't need client\u2192server during processing) Auto-Reconnect \u2705 Built-in \u274c Manual implementation HTTP/2 Support \u2705 Yes \u2705 Yes Proxy-Friendly \u2705 Standard HTTP \u26a0\ufe0f Some proxies block Browser Support \u2705 All modern browsers \u2705 All modern browsers FastAPI Support \u2705 <code>StreamingResponse</code> \u26a0\ufe0f Requires <code>starlette.websockets</code> <p>SSE Implementation (already shown in API specs): <pre><code>from fastapi.responses import StreamingResponse\n\n@app.post(\"/api/process\")\nasync def handle_processing(request: ProcessingRequest):\n    async def event_generator():\n        # ... yield SSE events ...\n        yield f\"event: {event_type}\\ndata: {json.dumps(data)}\\n\\n\"\n\n    return StreamingResponse(\n        event_generator(),\n        media_type=\"text/event-stream\"\n    )\n</code></pre></p> <p>Frontend SSE Consumption: <pre><code>const eventSource = new EventSource(`/api/process?session_id=${sessionId}`);\n\neventSource.addEventListener('agent_update', (event) =&gt; {\n  const data = JSON.parse(event.data);\n  updateUI(data);\n});\n\neventSource.addEventListener('final_decision', (event) =&gt; {\n  const data = JSON.parse(event.data);\n  showDecision(data.metadata.decision);\n  eventSource.close();\n});\n</code></pre></p> <p>When to Use WebSockets Instead: - If you need bi-directional communication (e.g., user can pause/cancel processing) - If you need low-latency real-time interaction - If SSE proves insufficient</p> <p>For our use case: Workflow processing is unidirectional (server\u2192client events), making SSE the better choice.</p>"},{"location":"architecture/correct-two-endpoint-architecture/#q5-how-do-we-handle-session-timeoutexpiration-during-long-conversations","title":"Q5: How do we handle session timeout/expiration during long conversations?","text":"<p>Answer: Implement session expiration with activity-based renewal and graceful recovery.</p> <p>Session Expiration Strategy:</p> <pre><code>class ConversationSession:\n    def __init__(self, session_id: str | None = None):\n        self.created_at = datetime.now(timezone.utc)\n        self.last_activity = datetime.now(timezone.utc)\n        self.expires_at = self.created_at + timedelta(hours=1)  # 1-hour initial expiration\n\n    def touch(self) -&gt; None:\n        \"\"\"\n        Update last activity time and extend expiration.\n\n        Called on every API interaction to keep session alive.\n        \"\"\"\n        self.last_activity = datetime.now(timezone.utc)\n        # Extend expiration by 30 minutes from now\n        self.expires_at = self.last_activity + timedelta(minutes=30)\n\n    def is_expired(self) -&gt; bool:\n        \"\"\"Check if session has expired.\"\"\"\n        return datetime.now(timezone.utc) &gt; self.expires_at\n\n    def time_until_expiration(self) -&gt; timedelta:\n        \"\"\"Get time remaining until expiration.\"\"\"\n        return self.expires_at - datetime.now(timezone.utc)\n\nclass SessionManager:\n    async def get_session(self, session_id: str) -&gt; ConversationSession | None:\n        \"\"\"Get session, checking for expiration.\"\"\"\n        session = self._sessions.get(session_id)\n\n        if not session:\n            return None\n\n        if session.is_expired():\n            logger.info(f\"Session {session_id[:8]}*** expired, removing\")\n            del self._sessions[session_id]\n            return None\n\n        # Touch session to extend expiration\n        session.touch()\n        return session\n\n    async def cleanup_expired_sessions(self) -&gt; int:\n        \"\"\"Clean up expired sessions (run periodically).\"\"\"\n        now = datetime.now(timezone.utc)\n        expired = [\n            sid for sid, session in self._sessions.items()\n            if session.expires_at &lt; now\n        ]\n\n        for session_id in expired:\n            del self._sessions[session_id]\n\n        logger.info(f\"Cleaned up {len(expired)} expired sessions\")\n        return len(expired)\n</code></pre> <p>Periodic Cleanup (add to app startup): <pre><code>from fastapi import FastAPI\nimport asyncio\n\napp = FastAPI()\n\n@app.on_event(\"startup\")\nasync def startup_cleanup_task():\n    \"\"\"Start background task to clean up expired sessions.\"\"\"\n    async def cleanup_loop():\n        while True:\n            await asyncio.sleep(300)  # Every 5 minutes\n            await session_manager.cleanup_expired_sessions()\n\n    asyncio.create_task(cleanup_loop())\n</code></pre></p> <p>Frontend Session Renewal: <pre><code>// Keep session alive during long conversations\nuseEffect(() =&gt; {\n  if (!sessionId) return;\n\n  // Heartbeat every 10 minutes to keep session alive\n  const heartbeat = setInterval(async () =&gt; {\n    try {\n      await fetch(`/api/sessions/${sessionId}/heartbeat`, { method: 'POST' });\n    } catch (error) {\n      console.error('Heartbeat failed:', error);\n    }\n  }, 10 * 60 * 1000);  // 10 minutes\n\n  return () =&gt; clearInterval(heartbeat);\n}, [sessionId]);\n</code></pre></p> <p>API Heartbeat Endpoint: <pre><code>@app.post(\"/api/sessions/{session_id}/heartbeat\")\nasync def session_heartbeat(session_id: str):\n    \"\"\"Keep session alive by updating last activity.\"\"\"\n    session = session_manager.get_session(session_id)\n\n    if not session:\n        raise HTTPException(404, \"Session not found or expired\")\n\n    session.touch()\n\n    return {\n        \"session_id\": session_id,\n        \"expires_in_seconds\": int(session.time_until_expiration().total_seconds()),\n        \"status\": session.status\n    }\n</code></pre></p> <p>Graceful Expiration Handling: <pre><code>// In /api/chat handler\ntry {\n  const response = await fetch('/api/chat', {\n    method: 'POST',\n    body: JSON.stringify({ user_message, session_id })\n  });\n\n  if (response.status === 404) {\n    // Session expired\n    alert('Your session has expired. Starting a new conversation.');\n    setSessionId(null);  // Clear session ID\n    setCollectedData({});  // Clear data\n    // Send message again with new session\n    sendMessage(userMessage);\n  }\n} catch (error) {\n  // Handle other errors\n}\n</code></pre></p> <p>Session Expiration Best Practices: 1. Activity-Based: Extend expiration on every interaction (session.touch()) 2. Reasonable Timeout: 30 minutes of inactivity (adjustable) 3. Periodic Cleanup: Background task removes expired sessions 4. Graceful Recovery: Frontend detects expiration and restarts 5. User Warning: Optionally warn user before expiration (show countdown at 5 minutes remaining)</p>"},{"location":"architecture/correct-two-endpoint-architecture/#q6-what-observabilitylogging-patterns-should-we-implement","title":"Q6: What observability/logging patterns should we implement?","text":"<p>Answer: Structured logging with correlation IDs, metrics tracking, and distributed tracing.</p> <p>Logging Strategy:</p> <pre><code>import structlog\nfrom loan_avengers.utils.observability import Observability\n\nlogger = Observability.get_logger(\"api\")\n\n# Correlation ID middleware\nfrom fastapi import Request\nimport uuid\n\n@app.middleware(\"http\")\nasync def add_correlation_id(request: Request, call_next):\n    \"\"\"Add correlation ID to all requests for tracing.\"\"\"\n    correlation_id = request.headers.get(\"X-Correlation-ID\", str(uuid.uuid4()))\n\n    # Add to request state\n    request.state.correlation_id = correlation_id\n\n    # Add to logger context\n    with structlog.contextvars.bind_contextvars(correlation_id=correlation_id):\n        response = await call_next(request)\n        response.headers[\"X-Correlation-ID\"] = correlation_id\n        return response\n\n# Structured logging in endpoints\n@app.post(\"/api/chat\")\nasync def handle_chat(request: ConversationRequest, req: Request):\n    correlation_id = req.state.correlation_id\n\n    logger.info(\n        \"Chat request received\",\n        extra={\n            \"correlation_id\": correlation_id,\n            \"session_id\": request.session_id[:8] + \"***\" if request.session_id else \"new\",\n            \"message_length\": len(request.user_message),\n            \"endpoint\": \"/api/chat\"\n        }\n    )\n\n    try:\n        # ... process request ...\n\n        logger.info(\n            \"Chat request completed\",\n            extra={\n                \"correlation_id\": correlation_id,\n                \"session_id\": session.session_id[:8] + \"***\",\n                \"action\": response.action,\n                \"completion_percentage\": response.completion_percentage,\n                \"duration_ms\": elapsed_time_ms\n            }\n        )\n\n    except Exception as e:\n        logger.error(\n            \"Chat request failed\",\n            extra={\n                \"correlation_id\": correlation_id,\n                \"session_id\": request.session_id[:8] + \"***\" if request.session_id else \"new\",\n                \"error_type\": type(e).__name__,\n                \"error_message\": str(e)\n            },\n            exc_info=True\n        )\n        raise\n</code></pre> <p>Metrics Tracking:</p> <pre><code>from prometheus_client import Counter, Histogram, Gauge\n\n# Define metrics\nchat_requests_total = Counter(\n    'loan_avengers_chat_requests_total',\n    'Total chat requests',\n    ['status']\n)\n\nchat_request_duration = Histogram(\n    'loan_avengers_chat_request_duration_seconds',\n    'Chat request duration',\n    buckets=[0.1, 0.5, 1.0, 2.0, 5.0, 10.0]\n)\n\nprocessing_requests_total = Counter(\n    'loan_avengers_processing_requests_total',\n    'Total processing requests',\n    ['status']\n)\n\nprocessing_duration = Histogram(\n    'loan_avengers_processing_duration_seconds',\n    'Processing duration',\n    buckets=[5.0, 10.0, 30.0, 60.0, 120.0]\n)\n\nactive_sessions = Gauge(\n    'loan_avengers_active_sessions',\n    'Number of active sessions'\n)\n\n# Usage in endpoints\nimport time\n\n@app.post(\"/api/chat\")\nasync def handle_chat(request: ConversationRequest):\n    start_time = time.time()\n\n    try:\n        response = await process_chat(request)\n        chat_requests_total.labels(status='success').inc()\n        return response\n\n    except Exception as e:\n        chat_requests_total.labels(status='error').inc()\n        raise\n\n    finally:\n        duration = time.time() - start_time\n        chat_request_duration.observe(duration)\n\n# Update gauge periodically\n@app.on_event(\"startup\")\nasync def update_metrics_loop():\n    async def update_loop():\n        while True:\n            active_sessions.set(len(session_manager._sessions))\n            await asyncio.sleep(10)\n\n    asyncio.create_task(update_loop())\n\n# Expose metrics endpoint\nfrom prometheus_client import make_asgi_app\n\nmetrics_app = make_asgi_app()\napp.mount(\"/metrics\", metrics_app)\n</code></pre> <p>Distributed Tracing (OpenTelemetry):</p> <pre><code>from opentelemetry import trace\nfrom opentelemetry.instrumentation.fastapi import FastAPIInstrumentor\n\ntracer = trace.get_tracer(__name__)\n\n# Auto-instrument FastAPI\nFastAPIInstrumentor.instrument_app(app)\n\n# Manual spans for important operations\n@app.post(\"/api/process\")\nasync def handle_processing(request: ProcessingRequest):\n    with tracer.start_as_current_span(\"process_loan_application\") as span:\n        span.set_attribute(\"session_id\", request.session_id)\n\n        # Create application\n        with tracer.start_as_current_span(\"create_loan_application\"):\n            application = riley.create_loan_application(session.collected_data)\n            span.set_attribute(\"application_id\", application.application_id)\n\n        # Run workflow\n        with tracer.start_as_current_span(\"workflow_orchestrator\"):\n            async for event in orchestrator.process_loan_application(application):\n                yield event\n</code></pre> <p>Observability Dashboard (example queries):</p> <pre><code># Average chat response time\nrate(loan_avengers_chat_request_duration_seconds_sum[5m])\n  /\nrate(loan_avengers_chat_request_duration_seconds_count[5m])\n\n# Processing success rate\nsum(rate(loan_avengers_processing_requests_total{status=\"success\"}[5m]))\n  /\nsum(rate(loan_avengers_processing_requests_total[5m]))\n\n# Active sessions\nloan_avengers_active_sessions\n</code></pre> <p>Observability Best Practices: 1. Correlation IDs: Track requests across services 2. Structured Logging: JSON logs with consistent fields 3. Metrics: Track key performance indicators (KPIs) 4. Distributed Tracing: Visualize request flow 5. Alerting: Set up alerts on error rates and latency 6. PII Protection: Mask sensitive data in logs (application_id[:8] + \"***\")</p>"},{"location":"architecture/correct-two-endpoint-architecture/#conclusion","title":"Conclusion","text":"<p>This architectural design provides a correct, scalable, and maintainable implementation of the two-endpoint API pattern that properly separates conversational data collection from formal loan processing.</p>"},{"location":"architecture/correct-two-endpoint-architecture/#key-takeaways","title":"Key Takeaways","text":"<ol> <li>Two-Endpoint Pattern: <code>/api/chat</code> for collection, <code>/api/process</code> for processing</li> <li>Clear Separation: Cap-ital America collects, WorkflowOrchestrator processes</li> <li>Type Safety: Strict progression from strings \u2192 dicts \u2192 Pydantic models</li> <li>ADR Compliance: Follows ADR-004, ADR-006, ADR-007 correctly</li> <li>Framework Alignment: Proper use of Microsoft Agent Framework patterns</li> <li>State Management: Single source of truth (ConversationSession)</li> <li>User Experience: Clear phase transitions with user control</li> <li>Observability: Comprehensive logging, metrics, and tracing</li> </ol>"},{"location":"architecture/correct-two-endpoint-architecture/#next-steps","title":"Next Steps","text":"<ol> <li>Review this document with team</li> <li>Create ADR-011 (or similar) formalizing this design</li> <li>Begin implementation according to checklist</li> <li>Test incrementally at each phase</li> <li>Document lessons learned</li> </ol> <p>This architecture has been validated against ADR-010's findings and addresses all identified issues.</p> <p>Document Version: 1.0 Last Updated: 2025-09-29 Authors: System Architect (AI Agent) Review Status: Ready for Team Review</p>"},{"location":"architecture/data-models/","title":"Data Models","text":"<p>Type-safe data structures powering the multi-agent loan processing system.</p>"},{"location":"architecture/data-models/#overview","title":"Overview","text":"<p>All data models use Pydantic v2 for runtime validation and type safety. Our models are:</p> <ul> <li>Privacy-First: Use secure <code>applicant_id</code> instead of SSN</li> <li>Type-Safe: Full type annotations with runtime validation</li> <li>Domain-Driven: Models reflect real loan processing concepts</li> <li>Extensible: Easy to add fields without breaking existing code</li> </ul>"},{"location":"architecture/data-models/#ai-agent-model-reference","title":"\ud83e\udd16 AI Agent Model Reference","text":""},{"location":"architecture/data-models/#model-import-patterns","title":"Model Import Patterns","text":"<pre><code># Import all core models\nfrom loan_processing.models import (\n    LoanApplication,     # Primary input model\n    LoanDecision,       # Final output model\n    CreditAssessment,   # Credit agent output\n    IncomeAssessment,   # Income agent output\n    RiskAssessment      # Risk agent output\n)\n\n# Create and validate models\napplication = LoanApplication(**data)\ndecision = LoanDecision.from_assessments(credit, income, risk)\n</code></pre>"},{"location":"architecture/data-models/#model-file-mapping","title":"Model File Mapping","text":"Model Class File Path Used By Agents Purpose <code>LoanApplication</code> <code>models/application.py</code> All agents Primary input data structure <code>CreditAssessment</code> <code>models/assessment.py</code> credit \u2192 risk Credit evaluation results <code>IncomeAssessment</code> <code>models/assessment.py</code> income \u2192 risk Income verification results <code>RiskAssessment</code> <code>models/assessment.py</code> risk \u2192 orchestrator Risk analysis results <code>LoanDecision</code> <code>models/decision.py</code> orchestrator Final loan decision"},{"location":"architecture/data-models/#model-relationships","title":"Model Relationships","text":"<pre><code>LoanApplication\n    \u2193 (processed by)\n[Credit Agent] \u2192 CreditAssessment\n[Income Agent] \u2192 IncomeAssessment\n    \u2193 (synthesized by)\n[Risk Agent] \u2192 RiskAssessment\n    \u2193 (finalized by)\n[Orchestrator] \u2192 LoanDecision\n</code></pre>"},{"location":"architecture/data-models/#core-models","title":"Core Models","text":""},{"location":"architecture/data-models/#loan-application","title":"Loan Application","text":"<p>The primary input structure for loan processing.</p> <p>File: <code>loan_processing/models/application.py</code></p> <pre><code>class LoanApplication(BaseModel):\n    application_id: str           # Unique application identifier\n    applicant_id: str            # Secure ID (never SSN)\n    applicant_name: str\n    loan_amount: Decimal\n    loan_purpose: LoanPurpose\n    annual_income: Decimal\n    employment_status: str\n    credit_score: Optional[int]\n    existing_debt: Decimal\n    down_payment: Decimal\n    property_value: Optional[Decimal]\n    additional_data: Dict[str, Any]  # Flexible extension point\n</code></pre> <p>Privacy Features: - No SSN storage - uses secure <code>applicant_id</code> - Sensitive data in <code>additional_data</code> can be encrypted - Audit trail maintained separately</p>"},{"location":"architecture/data-models/#agent-assessment","title":"Agent Assessment","text":"<p>Standardized output from each agent's evaluation.</p> <p>File: <code>loan_processing/models/assessment.py</code></p> <pre><code>class AgentAssessment(BaseModel):\n    agent_name: str\n    agent_type: str\n    assessment_timestamp: datetime\n    status: AssessmentStatus  # COMPLETE, FAILED, PENDING\n    confidence_score: float    # 0.0 to 1.0\n\n    # Flexible result structure\n    assessment_result: Dict[str, Any]\n\n    # Decision support\n    risk_factors: List[str]\n    recommendations: List[str]\n\n    # Audit trail\n    tools_used: List[str]\n    processing_time_ms: int\n</code></pre> <p>Key Features: - Standardized across all agent types - Flexible <code>assessment_result</code> for agent-specific data - Built-in observability with tools used and timing</p>"},{"location":"architecture/data-models/#loan-decision","title":"Loan Decision","text":"<p>Final output after all agents complete processing.</p> <p>File: <code>loan_processing/models/decision.py</code></p> <pre><code>class LoanDecision(BaseModel):\n    application_id: str\n    decision_id: str\n\n    # Core decision\n    decision: DecisionStatus  # APPROVED, DENIED, CONDITIONAL, MANUAL_REVIEW\n    decision_timestamp: datetime\n\n    # Decision details\n    approved_amount: Optional[Decimal]\n    interest_rate: Optional[Decimal]\n    term_months: Optional[int]\n\n    # Reasoning\n    primary_reason: str\n    supporting_reasons: List[str]\n    conditions: List[str]  # For conditional approvals\n\n    # Agent assessments\n    agent_assessments: List[AgentAssessment]\n\n    # Compliance\n    regulatory_checks: Dict[str, bool]\n    fcra_compliant: bool\n    ecoa_compliant: bool\n</code></pre>"},{"location":"architecture/data-models/#validation-examples","title":"Validation Examples","text":""},{"location":"architecture/data-models/#input-validation","title":"Input Validation","text":"<pre><code># Automatic validation on creation\napp = LoanApplication(\n    application_id=\"app-123\",\n    applicant_id=\"usr-456\",  # Secure ID, not SSN\n    loan_amount=Decimal(\"250000\"),\n    annual_income=Decimal(\"75000\"),\n    # Missing required field raises ValidationError\n)\n</code></pre>"},{"location":"architecture/data-models/#type-safety","title":"Type Safety","text":"<pre><code># Type checking at runtime\napp.credit_score = \"high\"  # ValidationError: not an integer\napp.loan_amount = -1000    # ValidationError: must be positive\n</code></pre>"},{"location":"architecture/data-models/#serialization","title":"Serialization","text":"<pre><code># Easy API integration\njson_data = app.model_dump_json()\nrestored = LoanApplication.model_validate_json(json_data)\n</code></pre>"},{"location":"architecture/data-models/#domain-enums","title":"Domain Enums","text":""},{"location":"architecture/data-models/#loan-purpose","title":"Loan Purpose","text":"<pre><code>class LoanPurpose(str, Enum):\n    HOME_PURCHASE = \"home_purchase\"\n    REFINANCE = \"refinance\"\n    HOME_EQUITY = \"home_equity\"\n    DEBT_CONSOLIDATION = \"debt_consolidation\"\n</code></pre>"},{"location":"architecture/data-models/#decision-status","title":"Decision Status","text":"<pre><code>class DecisionStatus(str, Enum):\n    APPROVED = \"approved\"\n    DENIED = \"denied\"\n    CONDITIONAL = \"conditional_approval\"\n    MANUAL_REVIEW = \"manual_review\"\n</code></pre>"},{"location":"architecture/data-models/#assessment-status","title":"Assessment Status","text":"<pre><code>class AssessmentStatus(str, Enum):\n    COMPLETE = \"complete\"\n    FAILED = \"failed\"\n    PENDING = \"pending\"\n    TIMEOUT = \"timeout\"\n</code></pre>"},{"location":"architecture/data-models/#integration-with-agents","title":"Integration with Agents","text":""},{"location":"architecture/data-models/#agent-input","title":"Agent Input","text":"<pre><code># Agents receive standardized context\ncontext = {\n    \"application\": loan_application.model_dump(),\n    \"previous_assessments\": [assessment.model_dump() for assessment in assessments]\n}\n</code></pre>"},{"location":"architecture/data-models/#agent-output","title":"Agent Output","text":"<pre><code># Agents produce typed assessments\nassessment = AgentAssessment(\n    agent_name=\"Credit Agent\",\n    agent_type=\"credit\",\n    assessment_result={\n        \"credit_score\": 720,\n        \"credit_tier\": \"excellent\",\n        \"debt_to_income_ratio\": 0.28\n    },\n    confidence_score=0.92\n)\n</code></pre>"},{"location":"architecture/data-models/#benefits","title":"Benefits","text":"<ol> <li>Type Safety: Catch errors at development time</li> <li>Validation: Automatic input validation</li> <li>Documentation: Models serve as API documentation</li> <li>Serialization: Easy JSON/dict conversion</li> <li>Privacy: Built-in privacy compliance</li> <li>Extensibility: Add fields without breaking code</li> </ol>"},{"location":"architecture/data-models/#implementation-files","title":"Implementation Files","text":"<ul> <li><code>loan_processing/models/application.py</code> - Application model</li> <li><code>loan_processing/models/assessment.py</code> - Assessment model</li> <li><code>loan_processing/models/decision.py</code> - Decision model</li> <li><code>loan_processing/models/__init__.py</code> - Model exports</li> </ul> <p>See actual code files for complete implementation details.</p>"},{"location":"architecture/mcp-servers/","title":"Mcp Servers","text":"<p>Coming soon...</p>"},{"location":"architecture/orchestration/","title":"Loan Processing Workflow Patterns","text":"<p>Business workflow patterns for coordinating multi-agent loan processing.</p>"},{"location":"architecture/orchestration/#overview","title":"Overview","text":"<p>Our Business Logic First approach provides proven workflow patterns for loan processing:</p> <ul> <li>Business Focus: Agents designed around loan processing expertise</li> <li>Configuration-Driven: Business rules and agent roles defined in YAML</li> <li>Progressive Enhancement: Start with basic workflows, add sophistication as needed</li> <li>Customer-Centric: Agents designed around customer jobs-to-be-done</li> </ul>"},{"location":"architecture/orchestration/#business-logic-foundation","title":"Business Logic Foundation","text":""},{"location":"architecture/orchestration/#loan-processing-workflow","title":"Loan Processing Workflow","text":"<p>Our business logic foundation provides the essential components for loan processing:</p> <p>Configuration: <code>loan_processing/config/agents.yaml</code></p> <pre><code>agent_personas:\n  intake:\n    file: \"intake-agent-persona.md\"\n    description: \"Fast application triage and routing\"\n    mcp_servers: []  # Speed optimized\n  credit:\n    file: \"credit-agent-persona.md\"\n    description: \"Comprehensive credit evaluation\"\n    mcp_servers: [\"application_verification\", \"financial_calculations\"]\n</code></pre> <p>MCP Servers: <code>loan_processing/config/mcp_servers.yaml</code></p> <pre><code>servers:\n  application_verification:\n    host: \"localhost\"\n    port: 8010\n    url: \"http://localhost:8010/sse\"\n    tools: [\"verify_identity\", \"get_credit_report\"]\n</code></pre> <pre><code>Application \u2192 Intake \u2192 Credit \u2192 Income \u2192 Risk \u2192 Decision\n     \u2193          \u2193        \u2193        \u2193       \u2193\n  Context    Context  Context  Context  Final\n   Init      +Intake  +Credit  +Income  Decision\n</code></pre> <p>Business Workflow Configuration: <pre><code># Loan processing business logic\nfrom loan_processing.utils import ConfigurationLoader, PersonaLoader\nfrom loan_processing.config.settings import get_mcp_config\nfrom loan_processing.models import LoanApplication, LoanDecision\n\n# Load business configuration\nconfig = ConfigurationLoader.load_config()\nmcp_config = get_mcp_config()\n\n# Each agent has specific business role\nworkflow_agents = {\n    'intake': 'Fast application validation and routing',\n    'credit': 'Comprehensive creditworthiness assessment',\n    'income': 'Employment and income verification',\n    'risk': 'Final decision synthesis and compliance'\n}\n\nfor agent_name, business_role in workflow_agents.items():\n    agent_config = config['agent_personas'][agent_name]\n    print(f\"{agent_name}: {business_role}\")\n    print(f\"Tools: {agent_config['mcp_servers']}\")\n</code></pre></p> <p>Business Benefits: - Specialized domain expertise in each agent - Clear separation of business responsibilities - Audit trail through sequential processing - Consistent evaluation standards</p>"},{"location":"architecture/orchestration/#business-workflow-patterns","title":"Business Workflow Patterns","text":"<p>Different business scenarios require different workflow patterns:</p>"},{"location":"architecture/orchestration/#standard-sequential-processing","title":"Standard Sequential Processing","text":"<p>Use Case: Most loan applications requiring comprehensive evaluation</p> <pre><code># Standard loan processing workflow\nclass StandardLoanWorkflow:\n    def __init__(self):\n        self.config = ConfigurationLoader.load_config()\n        self.workflow_steps = [\"intake\", \"credit\", \"income\", \"risk\"]\n\n    def process_application(self, application: LoanApplication) -&gt; dict:\n        \"\"\"Process application through standard workflow\"\"\"\n        workflow_result = {\n            \"application_id\": application.application_id,\n            \"workflow_type\": \"standard_sequential\",\n            \"agents_used\": [],\n            \"business_logic\": {}\n        }\n\n        for step, agent_name in enumerate(self.workflow_steps):\n            agent_config = self.config['agent_personas'][agent_name]\n            workflow_result[\"agents_used\"].append({\n                \"step\": step + 1,\n                \"agent\": agent_name,\n                \"business_role\": agent_config['description'],\n                \"tools_available\": agent_config['mcp_servers']\n            })\n\n        return workflow_result\n</code></pre>"},{"location":"architecture/orchestration/#fast-track-parallel-processing","title":"Fast-Track Parallel Processing","text":"<p>Use Case: High-quality applications needing quick turnaround</p> <pre><code># Fast-track workflow for premium applications\nclass FastTrackLoanWorkflow:\n    def __init__(self):\n        self.config = ConfigurationLoader.load_config()\n        self.parallel_agents = [\"credit\", \"income\"]  # Process simultaneously\n        self.final_agent = \"risk\"\n\n    def process_application(self, application: LoanApplication) -&gt; dict:\n        \"\"\"Fast-track processing for qualified applications\"\"\"\n        workflow_result = {\n            \"application_id\": application.application_id,\n            \"workflow_type\": \"fast_track_parallel\",\n            \"business_rationale\": \"High credit score enables parallel processing\",\n            \"time_saved\": \"40-50% faster than standard workflow\"\n        }\n\n        # Parallel assessment phase\n        parallel_assessments = []\n        for agent_name in self.parallel_agents:\n            agent_config = self.config['agent_personas'][agent_name]\n            parallel_assessments.append({\n                \"agent\": agent_name,\n                \"role\": agent_config['description'],\n                \"tools\": agent_config['mcp_servers'],\n                \"processing\": \"parallel\"\n            })\n\n        # Final synthesis\n        risk_config = self.config['agent_personas'][self.final_agent]\n        final_assessment = {\n            \"agent\": self.final_agent,\n            \"role\": risk_config['description'],\n            \"inputs\": [\"credit_assessment\", \"income_assessment\"],\n            \"processing\": \"synthesis\"\n        }\n\n        workflow_result[\"assessment_phases\"] = {\n            \"parallel\": parallel_assessments,\n            \"final\": final_assessment\n        }\n\n        return workflow_result\n</code></pre>"},{"location":"architecture/orchestration/#adaptive-conditional-processing","title":"Adaptive Conditional Processing","text":"<p>Use Case: Applications requiring different evaluation paths based on complexity</p> <pre><code># Adaptive workflow based on application characteristics\nclass AdaptiveLoanWorkflow:\n    def __init__(self):\n        self.config = ConfigurationLoader.load_config()\n        self.routing_rules = {\n            'FAST_TRACK': ['credit', 'risk'],  # High credit score, simple case\n            'ENHANCED': ['credit', 'income', 'employment', 'assets', 'risk'],  # Complex case\n            'STANDARD': ['credit', 'income', 'risk']  # Normal processing\n        }\n\n    def determine_workflow_path(self, application: LoanApplication) -&gt; str:\n        \"\"\"Business logic to determine appropriate workflow\"\"\"\n        if (application.credit_score and application.credit_score &gt; 750 and\n            application.debt_to_income_ratio &lt; 0.30):\n            return 'FAST_TRACK'\n        elif (application.loan_purpose == 'business' or\n              application.employment_status == 'self_employed'):\n            return 'ENHANCED'\n        else:\n            return 'STANDARD'\n\n    def process_application(self, application: LoanApplication) -&gt; dict:\n        \"\"\"Route application through appropriate workflow path\"\"\"\n        workflow_path = self.determine_workflow_path(application)\n        selected_agents = self.routing_rules[workflow_path]\n\n        workflow_result = {\n            \"application_id\": application.application_id,\n            \"workflow_type\": \"adaptive_conditional\",\n            \"selected_path\": workflow_path,\n            \"routing_rationale\": self._get_routing_rationale(application, workflow_path),\n            \"agents_sequence\": []\n        }\n\n        for agent_name in selected_agents:\n            agent_config = self.config['agent_personas'][agent_name]\n            workflow_result[\"agents_sequence\"].append({\n                \"agent\": agent_name,\n                \"business_role\": agent_config['description'],\n                \"tools\": agent_config['mcp_servers']\n            })\n\n        return workflow_result\n\n    def _get_routing_rationale(self, application: LoanApplication, path: str) -&gt; str:\n        \"\"\"Explain why this path was selected\"\"\"\n        rationales = {\n            'FAST_TRACK': f\"High credit score ({application.credit_score}) and low DTI ratio enable expedited processing\",\n            'ENHANCED': f\"Complex application ({application.loan_purpose}, {application.employment_status}) requires comprehensive evaluation\",\n            'STANDARD': \"Standard evaluation criteria apply\"\n        }\n        return rationales.get(path, \"Standard processing\")\n</code></pre> <p>Routing Logic in Intake Persona: <pre><code># Intake Agent Persona (Example)\n\n## Decision Framework\nBased on application characteristics, route as follows:\n\n- **FAST_TRACK**: Credit score &gt; 750, DTI &lt; 30%, employment &gt; 2 years\n- **ENHANCED**: First-time buyer, self-employed, or complex income\n- **STANDARD**: All other applications\n\n## Output Requirements\n- routing_decision: FAST_TRACK/ENHANCED/STANDARD\n- confidence_score: 0-100\n- reasoning: Explanation of routing choice\n</code></pre></p>"},{"location":"architecture/orchestration/#custom-framework-hierarchical-pattern","title":"Custom Framework - Hierarchical Pattern","text":"<pre><code># Supervisor-agent pattern with specialist teams\nclass HierarchicalLoanOrchestrator:\n    def __init__(self):\n        # Load supervisor persona\n        self.supervisor = self._create_agent('loan_supervisor')\n\n        # Create specialist teams\n        self.credit_team = {\n            'lead': self._create_agent('credit_lead'),\n            'specialists': [\n                self._create_agent('fico_specialist'),\n                self._create_agent('alternative_credit_specialist')\n            ]\n        }\n\n    async def process_application(self, application):\n        # Supervisor makes initial assessment\n        supervisor_assessment = await self.supervisor.assess(application)\n\n        # Route to appropriate specialist teams\n        if supervisor_assessment.complexity == 'HIGH':\n            # Use all specialists\n            return await self._full_team_review(application)\n        else:\n            # Standard processing\n            return await self._standard_review(application)\n</code></pre> <p>Benefits: - Clear escalation paths through business personas - Specialist expertise in separate agent personas - Supervisor logic in configuration, not code</p>"},{"location":"architecture/orchestration/#context-management-patterns","title":"Context Management Patterns","text":""},{"location":"architecture/orchestration/#simple-context-passing","title":"Simple Context Passing","text":"<pre><code># Any framework can use this pattern\nclass ContextManager:\n    def __init__(self):\n        self.application_data = None\n        self.assessments = {}\n\n    def add_assessment(self, agent_name: str, result: dict):\n        self.assessments[agent_name] = result\n\n    def get_context_for_agent(self, agent_name: str) -&gt; dict:\n        return {\n            \"application\": self.application_data,\n            \"previous_assessments\": self.assessments,\n            \"agent_config\": self._get_agent_config(agent_name)\n        }\n</code></pre>"},{"location":"architecture/orchestration/#framework-specific-context","title":"Framework-Specific Context","text":"<pre><code># Microsoft Agent Framework example\ncontext = {\n    \"messages\": [\n        {\"role\": \"system\", \"content\": persona_instructions},\n        {\"role\": \"user\", \"content\": f\"Application: {application_json}\"}\n    ]\n}\n\n# OpenAI Assistants example\nthread = openai.beta.threads.create()\nfor assessment in previous_assessments:\n    openai.beta.threads.messages.create(\n        thread_id=thread.id,\n        role=\"user\",\n        content=f\"Previous assessment: {assessment}\"\n    )\n</code></pre>"},{"location":"architecture/orchestration/#quality-control-patterns","title":"Quality Control Patterns","text":""},{"location":"architecture/orchestration/#business-logic-validation","title":"Business Logic Validation","text":"<pre><code># Built into business models\nfrom loan_processing.models import AgentAssessment\n\ndef validate_assessment(assessment_data: dict) -&gt; bool:\n    try:\n        # Automatic validation through Pydantic\n        assessment = AgentAssessment.model_validate(assessment_data)\n\n        # Business logic validation\n        if assessment.confidence_score &lt; 0.7:\n            return False\n        if assessment.status != \"COMPLETE\":\n            return False\n\n        return True\n    except ValidationError:\n        return False\n</code></pre>"},{"location":"architecture/orchestration/#persona-driven-quality-gates","title":"Persona-Driven Quality Gates","text":"<pre><code># Example from Risk Agent Persona\n\n## Quality Requirements\nBefore making final decision, ensure:\n- Credit assessment confidence &gt; 80%\n- Income verification completed\n- All regulatory checks passed\n\nIf any requirement fails, set decision to MANUAL_REVIEW\n</code></pre>"},{"location":"architecture/orchestration/#error-handling-patterns","title":"Error Handling Patterns","text":""},{"location":"architecture/orchestration/#framework-error-handling","title":"Framework Error Handling","text":"<pre><code># Each framework implements its own error handling\nclass FrameworkErrorHandler:\n    async def handle_agent_error(self, agent_name: str, error: Exception, context: dict):\n        # Log error with application context\n        logger.error(f\"Agent {agent_name} failed\", extra={\n            \"application_id\": context.get(\"application\", {}).get(\"application_id\"),\n            \"error\": str(error)\n        })\n\n        # Business logic: what to do on error\n        if agent_name == \"intake\":\n            return {\"decision\": \"MANUAL_REVIEW\", \"reason\": \"Intake validation failed\"}\n        elif agent_name in [\"credit\", \"income\"]:\n            return {\"decision\": \"MANUAL_REVIEW\", \"reason\": f\"{agent_name} assessment failed\"}\n        else:\n            return {\"decision\": \"MANUAL_REVIEW\", \"reason\": \"System error\"}\n</code></pre>"},{"location":"architecture/orchestration/#business-fallback-rules","title":"Business Fallback Rules","text":"<pre><code># Encoded in agent personas\nFALLBACK_RULES = {\n    \"insufficient_data\": \"MANUAL_REVIEW\",\n    \"system_timeout\": \"RETRY_ONCE_THEN_MANUAL\",\n    \"confidence_too_low\": \"MANUAL_REVIEW\",\n    \"regulatory_concern\": \"IMMEDIATE_MANUAL_REVIEW\"\n}\n</code></pre>"},{"location":"architecture/orchestration/#observability-patterns","title":"Observability Patterns","text":""},{"location":"architecture/orchestration/#framework-agnostic-logging","title":"Framework-Agnostic Logging","text":"<pre><code># Built into business models\nfrom loan_processing.models import AgentAssessment\nfrom loan_processing.utils import logger\n\ndef log_agent_assessment(agent_name: str, assessment: AgentAssessment, application_id: str):\n    logger.info(\"Agent assessment completed\", extra={\n        \"application_id\": application_id,\n        \"agent_name\": agent_name,\n        \"status\": assessment.status,\n        \"confidence\": assessment.confidence_score,\n        \"tools_used\": assessment.tools_used,\n        \"processing_time_ms\": assessment.processing_time_ms\n    })\n</code></pre>"},{"location":"architecture/orchestration/#business-audit-trail","title":"Business Audit Trail","text":"<pre><code># Preserved in decision model\nclass LoanDecision(BaseModel):\n    # ... other fields ...\n\n    # Complete audit trail\n    agent_assessments: List[AgentAssessment]\n    decision_rationale: str\n    regulatory_checks: Dict[str, bool]\n\n    def get_audit_trail(self) -&gt; Dict[str, Any]:\n        \"\"\"Generate compliance-ready audit trail\"\"\"\n        return {\n            \"application_id\": self.application_id,\n            \"decision\": self.decision,\n            \"timestamp\": self.decision_timestamp,\n            \"agents_involved\": [a.agent_name for a in self.agent_assessments],\n            \"tools_used\": list(set(tool for a in self.agent_assessments for tool in a.tools_used)),\n            \"rationale\": self.decision_rationale\n        }\n</code></pre>"},{"location":"architecture/orchestration/#business-implementation-examples","title":"Business Implementation Examples","text":""},{"location":"architecture/orchestration/#complete-loan-processing-system","title":"Complete Loan Processing System","text":"<pre><code># Complete business workflow implementation\nfrom loan_processing.utils import ConfigurationLoader, PersonaLoader\nfrom loan_processing.models import LoanApplication, LoanDecision\nfrom loan_processing.config.settings import get_mcp_config\n\nclass LoanProcessingSystem:\n    def __init__(self):\n        self.config = ConfigurationLoader.load_config()\n        self.mcp_config = get_mcp_config()\n        self.workflow_manager = WorkflowManager()\n\n    def get_business_capabilities(self) -&gt; dict:\n        \"\"\"Get complete system business capabilities\"\"\"\n        capabilities = {\n            \"agents\": {},\n            \"tools\": {},\n            \"workflows\": [\"standard\", \"fast_track\", \"enhanced\", \"adaptive\"]\n        }\n\n        # Document each agent's business role\n        for agent_name, agent_config in self.config['agent_personas'].items():\n            capabilities[\"agents\"][agent_name] = {\n                \"business_role\": agent_config['description'],\n                \"mcp_servers\": agent_config['mcp_servers'],\n                \"capabilities\": agent_config.get('capabilities', [])\n            }\n\n        # Document available business tools\n        for server_name, server_config in self.mcp_config.get_available_servers().items():\n            capabilities[\"tools\"][server_name] = {\n                \"business_purpose\": self._get_business_purpose(server_name),\n                \"tools\": server_config.get('tools', [])\n            }\n\n        return capabilities\n\n    def _get_business_purpose(self, server_name: str) -&gt; str:\n        \"\"\"Get business purpose of MCP server\"\"\"\n        purposes = {\n            \"application_verification\": \"Identity, employment, and credit verification\",\n            \"document_processing\": \"Document analysis and data extraction\",\n            \"financial_calculations\": \"Loan affordability and risk calculations\"\n        }\n        return purposes.get(server_name, \"Business tool server\")\n\n    def process_loan_application(self, application: LoanApplication) -&gt; dict:\n        \"\"\"Process loan through appropriate business workflow\"\"\"\n        # Determine workflow based on business rules\n        workflow_type = self.workflow_manager.determine_workflow(application)\n\n        result = {\n            \"application_id\": application.application_id,\n            \"workflow_selected\": workflow_type,\n            \"business_rationale\": self.workflow_manager.get_workflow_rationale(workflow_type),\n            \"processing_time_estimate\": self._get_time_estimate(workflow_type),\n            \"agents_involved\": self.workflow_manager.get_workflow_agents(workflow_type),\n            \"compliance_checks\": self._get_required_compliance_checks(application)\n        }\n\n        return result\n\n    def _get_time_estimate(self, workflow_type: str) -&gt; str:\n        \"\"\"Estimate processing time for workflow type\"\"\"\n        estimates = {\n            \"fast_track\": \"2-3 minutes\",\n            \"standard\": \"3-5 minutes\",\n            \"enhanced\": \"5-8 minutes\",\n            \"adaptive\": \"3-8 minutes depending on routing\"\n        }\n        return estimates.get(workflow_type, \"3-5 minutes\")\n\n    def _get_required_compliance_checks(self, application: LoanApplication) -&gt; list:\n        \"\"\"Get compliance checks required for this application\"\"\"\n        checks = [\"FCRA_COMPLIANCE\", \"ECOA_COMPLIANCE\"]\n\n        if application.loan_amount &gt; 100000:\n            checks.append(\"HIGH_VALUE_REVIEW\")\n\n        if application.loan_purpose in ['business', 'investment']:\n            checks.append(\"COMMERCIAL_LENDING_RULES\")\n\n        return checks\n</code></pre>"},{"location":"architecture/orchestration/#benefits-of-business-logic-foundation","title":"Benefits of Business Logic Foundation","text":"<ol> <li>Domain Expertise: Each agent contains specialized loan processing knowledge</li> <li>Business Agility: Modify decision criteria and workflows without code changes</li> <li>Regulatory Compliance: Built-in audit trails and decision transparency</li> <li>Cost Efficiency: Reduce processing time from days to minutes</li> <li>Quality Consistency: Standardized evaluation criteria across all applications</li> <li>Scalability: Add new agents or business rules without system changes</li> </ol>"},{"location":"architecture/orchestration/#implementation-files","title":"Implementation Files","text":"<p>Business Logic Foundation: - Agent Personas: <code>loan_processing/agents/agent-persona/</code> - Domain expertise - Configuration: <code>loan_processing/config/agents.yaml</code> - Agent mappings - MCP Servers: <code>loan_processing/config/mcp_servers.yaml</code> - Tool configurations - Data Models: <code>loan_processing/models/</code> - Type-safe business models - Utilities: <code>loan_processing/utils/</code> - Configuration and persona loading</p> <p>Integration Examples: - Business Case: <code>docs/business-case.md</code> - ROI and implementation strategy - Agent Strategy: <code>docs/agent-strategy.md</code> - Configuration-driven architecture - Jobs-to-be-Done: <code>docs/jobs-to-be-done.md</code> - Customer-centric agent design</p> <p>Framework implementations can be built on top of this foundation using the patterns shown above.</p>"},{"location":"architecture/system-architecture/","title":"System Architecture - Loan Avengers Multi-Agent Framework","text":""},{"location":"architecture/system-architecture/#complete-end-to-end-agent-workflow-architecture","title":"Complete End-to-End Agent Workflow Architecture","text":"<pre><code>graph TB\n    %% User Layer\n    subgraph \"\ud83d\udc64 User Experience Layer\"\n        User[\ud83d\udc64 User&lt;br/&gt;\"I need a $250K loan\"]\n        Browser[\ud83c\udf10 Web Browser&lt;br/&gt;React 19 + TypeScript]\n    end\n\n    %% UI Layer\n    subgraph \"\ud83c\udfa8 Frontend Layer - Alisha (UI Coordinator)\"\n        direction TB\n        UI[\ud83c\udf1f Alisha - UI Coordinator&lt;br/&gt;React Components&lt;br/&gt;Real-time Updates]\n        ThemeToggle[\ud83c\udf19 Dark Mode Toggle&lt;br/&gt;Vite-inspired Design]\n        Progress[\ud83d\udcca Progress Tracker&lt;br/&gt;Agent Status Display]\n        Confetti[\ud83c\udf89 Celebration Effects&lt;br/&gt;Success Animations]\n    end\n\n    %% API Gateway\n    subgraph \"\ud83d\ude80 API Gateway Layer\"\n        direction TB\n        FastAPI[\u26a1 FastAPI Backend&lt;br/&gt;Async Request Handling&lt;br/&gt;Entra ID Auth]\n        Stream[\ud83d\udce1 Server-Sent Events&lt;br/&gt;Real-time Streaming&lt;br/&gt;MCP Streamable HTTP]\n        ThreadMgr[\ud83e\uddf5 AgentThread Manager&lt;br/&gt;Conversation State&lt;br/&gt;Context Persistence]\n    end\n\n    %% Agent Orchestration\n    subgraph \"\ud83e\uddb8\u200d\u2642\ufe0f Microsoft Agent Framework - Sequential Workflow\"\n        direction LR\n\n        subgraph \"\ud83e\udd85 Intake Agent \"The Eagle Eye\" Validator\"\n            Intake Agent[\ud83d\udc41\ufe0f Intake Agent \"The Eagle Eye\"&lt;br/&gt;Lightning Validation&lt;br/&gt;&amp;lt;5 seconds]\n            JohnPersona[\ud83d\udccb Persona: intake-agent-persona.md&lt;br/&gt;\ud83c\udfaf Mission: Validate &amp; Route&lt;br/&gt;\u26a1 Tools: None (Speed optimized)]\n        end\n\n        subgraph \"\ud83d\udcbc Hawk-Income - Income Specialist\"\n            Hawk-Income[\ud83d\udcbc Hawk-Income - Income Specialist&lt;br/&gt;Employment Verification&lt;br/&gt;&amp;lt;30 seconds]\n            SarahPersona[\ud83d\udccb Persona: income-agent-persona.md&lt;br/&gt;\ud83c\udfaf Mission: Income Analysis&lt;br/&gt;\ud83d\udd27 Tools: Document + Financial]\n        end\n\n        subgraph \"\ud83d\udcca Scarlet Witch-Credit - Credit Analyst\"\n            Scarlet Witch-Credit[\ud83d\udcca Scarlet Witch-Credit - Credit Analyst&lt;br/&gt;Credit Assessment&lt;br/&gt;&amp;lt;60 seconds]\n            MarcusPersona[\ud83d\udccb Persona: credit-agent-persona.md&lt;br/&gt;\ud83c\udfaf Mission: Credit Evaluation&lt;br/&gt;\ud83d\udd27 Tools: Application + Financial]\n        end\n\n        subgraph \"\ud83d\udee1\ufe0f Doctor Strange-Risk - Risk Assessor\"\n            Doctor Strange-Risk[\ud83d\udee1\ufe0f Doctor Strange-Risk - Risk Assessor&lt;br/&gt;Final Decision&lt;br/&gt;&amp;lt;90 seconds]\n            AlexPersona[\ud83d\udccb Persona: risk-agent-persona.md&lt;br/&gt;\ud83c\udfaf Mission: Risk Analysis&lt;br/&gt;\ud83d\udd27 Tools: All MCP Servers]\n        end\n\n        Intake Agent --&gt; Hawk-Income\n        Hawk-Income --&gt; Scarlet Witch-Credit\n        Scarlet Witch-Credit --&gt; Doctor Strange-Risk\n    end\n\n    %% MCP Tool Layer\n    subgraph \"\ud83d\udd27 MCP Server Tool Integration\"\n        direction TB\n\n        subgraph \"\ud83d\udd0d Application Verification Server\"\n            MCP1[\ud83d\udd0d Application Verification&lt;br/&gt;Port 8010&lt;br/&gt;SSE Protocol]\n            Tools1[\ud83d\udee0\ufe0f Tools:&lt;br/&gt;\u2022 verify_identity&lt;br/&gt;\u2022 get_credit_report&lt;br/&gt;\u2022 validate_documents]\n        end\n\n        subgraph \"\ud83d\udcc4 Document Processing Server\"\n            MCP2[\ud83d\udcc4 Document Processing&lt;br/&gt;Port 8011&lt;br/&gt;SSE Protocol]\n            Tools2[\ud83d\udee0\ufe0f Tools:&lt;br/&gt;\u2022 extract_income_data&lt;br/&gt;\u2022 process_pay_stubs&lt;br/&gt;\u2022 validate_employment]\n        end\n\n        subgraph \"\ud83d\udcb0 Financial Calculations Server\"\n            MCP3[\ud83d\udcb0 Financial Calculations&lt;br/&gt;Port 8012&lt;br/&gt;SSE Protocol]\n            Tools3[\ud83d\udee0\ufe0f Tools:&lt;br/&gt;\u2022 calculate_dti_ratio&lt;br/&gt;\u2022 assess_affordability&lt;br/&gt;\u2022 compute_risk_score]\n        end\n    end\n\n    %% Data Models Layer\n    subgraph \"\ud83d\udcca Data Models &amp; State Management\"\n        direction TB\n\n        subgraph \"\ud83d\udcbe Core Data Models (Pydantic v2)\"\n            LoanApp[\ud83d\udccb LoanApplication&lt;br/&gt;Type-safe validation&lt;br/&gt;Business rules]\n            Assessment[\ud83d\udcc8 AgentAssessment&lt;br/&gt;Structured responses&lt;br/&gt;Decision tracking]\n            Decision[\u2705 LoanDecision&lt;br/&gt;Final outcome&lt;br/&gt;Audit trail]\n        end\n\n        subgraph \"\ud83e\uddf5 Conversation State\"\n            AgentThread[\ud83e\uddf5 AgentThread&lt;br/&gt;Conversation Context&lt;br/&gt;Multi-turn interactions]\n            Cache[\u26a1 Redis Cache&lt;br/&gt;State persistence&lt;br/&gt;30-min TTL]\n        end\n    end\n\n    %% External Services\n    subgraph \"\ud83c\udf0d External Service Integration\"\n        direction TB\n        AOAI[\ud83e\udde0 Azure OpenAI&lt;br/&gt;GPT-4 Models&lt;br/&gt;Agent reasoning]\n        CreditAPI[\ud83d\udcca Credit Bureau APIs&lt;br/&gt;Credit reports&lt;br/&gt;Identity verification]\n        BankAPI[\ud83c\udfe6 Banking APIs&lt;br/&gt;Income verification&lt;br/&gt;Employment data]\n        DocStorage[\ud83d\udce6 Azure Blob Storage&lt;br/&gt;Document uploads&lt;br/&gt;Secure storage]\n    end\n\n    %% Workflow Connections\n    User --&gt; Browser\n    Browser --&gt; UI\n    UI --&gt; FastAPI\n    FastAPI --&gt; Stream\n    FastAPI --&gt; ThreadMgr\n\n    ThreadMgr --&gt; Intake Agent\n    Intake Agent --&gt; Hawk-Income\n    Hawk-Income --&gt; Scarlet Witch-Credit\n    Scarlet Witch-Credit --&gt; Doctor Strange-Risk\n\n    %% Agent to MCP connections\n    Hawk-Income --&gt; MCP2\n    Hawk-Income --&gt; MCP3\n    Scarlet Witch-Credit --&gt; MCP1\n    Scarlet Witch-Credit --&gt; MCP3\n    Doctor Strange-Risk --&gt; MCP1\n    Doctor Strange-Risk --&gt; MCP2\n    Doctor Strange-Risk --&gt; MCP3\n\n    %% MCP to External Services\n    MCP1 --&gt; CreditAPI\n    MCP1 --&gt; AOAI\n    MCP2 --&gt; BankAPI\n    MCP2 --&gt; DocStorage\n    MCP3 --&gt; AOAI\n\n    %% State Management\n    ThreadMgr --&gt; AgentThread\n    AgentThread --&gt; Cache\n    FastAPI --&gt; LoanApp\n    Intake Agent --&gt; Assessment\n    Hawk-Income --&gt; Assessment\n    Scarlet Witch-Credit --&gt; Assessment\n    Doctor Strange-Risk --&gt; Decision\n\n    %% Real-time Updates\n    Doctor Strange-Risk --&gt; Stream\n    Stream --&gt; Progress\n    Decision --&gt; Confetti\n\n    %% Styling\n    classDef userLayer fill:#E3F2FD,stroke:#1976D2,stroke-width:2px\n    classDef uiLayer fill:#E8F5E8,stroke:#388E3C,stroke-width:2px\n    classDef apiLayer fill:#FFF3E0,stroke:#F57C00,stroke-width:2px\n    classDef agentLayer fill:#F3E5F5,stroke:#7B1FA2,stroke-width:2px\n    classDef mcpLayer fill:#FFEBEE,stroke:#D32F2F,stroke-width:2px\n    classDef dataLayer fill:#E0F2F1,stroke:#00796B,stroke-width:2px\n    classDef externalLayer fill:#FFF8E1,stroke:#FFA000,stroke-width:2px\n\n    class User,Browser userLayer\n    class UI,ThemeToggle,Progress,Confetti uiLayer\n    class FastAPI,Stream,ThreadMgr apiLayer\n    class Intake Agent,Hawk-Income,Scarlet Witch-Credit,Doctor Strange-Risk,JohnPersona,SarahPersona,MarcusPersona,AlexPersona agentLayer\n    class MCP1,MCP2,MCP3,Tools1,Tools2,Tools3 mcpLayer\n    class LoanApp,Assessment,Decision,AgentThread,Cache dataLayer\n    class AOAI,CreditAPI,BankAPI,DocStorage externalLayer</code></pre>"},{"location":"architecture/system-architecture/#workflow-sequence-diagram","title":"Workflow Sequence Diagram","text":"<pre><code>sequenceDiagram\n    participant U as \ud83d\udc64 User\n    participant A as \ud83c\udf1f Alisha (UI)\n    participant API as \ud83d\ude80 FastAPI\n    participant T as \ud83e\uddf5 AgentThread\n    participant J as \ud83e\udd85 Intake Agent (Validator)\n    participant S as \ud83d\udcbc Hawk-Income (Income)\n    participant M as \ud83d\udcca Scarlet Witch-Credit (Credit)\n    participant X as \ud83d\udee1\ufe0f Doctor Strange-Risk (Risk)\n    participant MCP as \ud83d\udd27 MCP Servers\n    participant AOI as \ud83e\udde0 Azure OpenAI\n\n    U-&gt;&gt;A: \"I need a $250K loan for my dream house\"\n    A-&gt;&gt;API: POST /api/applications\n    API-&gt;&gt;T: Create AgentThread with conversation context\n\n    Note over A: \ud83c\udf1f Alisha introduces the Dream Team\n    A--&gt;&gt;U: \"Let me get my Dream Team! AVENGERS, ASSEMBLE!\"\n\n    API-&gt;&gt;J: Invoke Intake Agent with LoanApplication\n    J-&gt;&gt;AOI: Process validation with persona context\n    J-&gt;&gt;T: Update context with validation results\n    J--&gt;&gt;A: \"Eagle eyes engaged! \ud83e\udd85 Application looks pristine!\"\n    A--&gt;&gt;U: Real-time status update\n\n    T-&gt;&gt;S: Pass context + application to Hawk-Income\n    S-&gt;&gt;MCP: Call document processing &amp; financial tools\n    S-&gt;&gt;AOI: Analyze income with persona context\n    S-&gt;&gt;T: Update context with income assessment\n    S--&gt;&gt;A: \"You're crushing it with your $85K income!\"\n    A--&gt;&gt;U: Real-time status update\n\n    T-&gt;&gt;M: Pass enriched context to Scarlet Witch-Credit\n    M-&gt;&gt;MCP: Call application verification &amp; financial tools\n    M-&gt;&gt;AOI: Analyze credit with persona context\n    M-&gt;&gt;T: Update context with credit assessment\n    M--&gt;&gt;A: \"Your 740 credit score is opening doors!\"\n    A--&gt;&gt;U: Real-time status update\n\n    T-&gt;&gt;X: Pass complete context to Doctor Strange-Risk\n    X-&gt;&gt;MCP: Call all available tools for comprehensive analysis\n    X-&gt;&gt;AOI: Final risk assessment with all context\n    X-&gt;&gt;T: Update with final decision\n    X--&gt;&gt;A: \"MISSION COMPLETE! Loan approved! \ud83c\udf8a\"\n    A--&gt;&gt;U: Celebration with confetti animation\n\n    Note over U,AOI: Total processing time: &lt;3 minutes vs traditional 24-48 hours</code></pre>"},{"location":"architecture/system-architecture/#architecture-principles","title":"Architecture Principles","text":""},{"location":"architecture/system-architecture/#agent-specialization","title":"\ud83c\udfaf Agent Specialization","text":"<ul> <li>Intake Agent (Validator): Ultra-fast triage and routing (&lt;5 seconds)</li> <li>Hawk-Income (Income): Deep income and employment analysis</li> <li>Scarlet Witch-Credit (Credit): Comprehensive credit evaluation</li> <li>Doctor Strange-Risk (Risk): Final synthesis and decision making</li> </ul>"},{"location":"architecture/system-architecture/#sequential-workflow-benefits","title":"\ud83d\udd04 Sequential Workflow Benefits","text":"<ul> <li>Context Accumulation: Each agent builds on previous assessments</li> <li>Specialized Expertise: Domain-focused agent personalities</li> <li>Quality Gates: Each step validates before progression</li> <li>Real-time Feedback: User sees progress throughout journey</li> </ul>"},{"location":"architecture/system-architecture/#mcp-tool-integration","title":"\ud83d\udee0\ufe0f MCP Tool Integration","text":"<ul> <li>Microservice Architecture: Independent, scalable tool servers</li> <li>Protocol Standardization: SSE-based communication</li> <li>Tool Flexibility: Agents autonomously select appropriate tools</li> <li>Security Isolation: Tools run in separate containers</li> </ul>"},{"location":"architecture/system-architecture/#modern-ux-principles","title":"\ud83d\udcf1 Modern UX Principles","text":"<ul> <li>Mobile-First Design: Responsive across all devices</li> <li>Real-time Updates: Server-sent events for live progress</li> <li>Accessibility: WCAG 2.1 AA compliance</li> <li>Performance: Optimized animations and interactions</li> </ul>"},{"location":"architecture/decisions/adr-001-multi-agent-strategic-foundation/","title":"ADR-001: Multi-Agent Strategic Foundation","text":""},{"location":"architecture/decisions/adr-001-multi-agent-strategic-foundation/#status","title":"Status","text":"<p>Accepted</p>"},{"location":"architecture/decisions/adr-001-multi-agent-strategic-foundation/#context","title":"Context","text":"<p>During the migration from OpenAI Agent SDK to Microsoft Agent Framework, we evaluated whether to maintain the multi-agent architecture or simplify to a single orchestrator approach. The question was whether multi-agent complexity was justified for the current business requirements.</p>"},{"location":"architecture/decisions/adr-001-multi-agent-strategic-foundation/#decision","title":"Decision","text":"<p>Maintain the multi-agent strategic foundation while simplifying implementation to business logic only.</p>"},{"location":"architecture/decisions/adr-001-multi-agent-strategic-foundation/#rationale","title":"Rationale","text":""},{"location":"architecture/decisions/adr-001-multi-agent-strategic-foundation/#strategic-investment","title":"Strategic Investment","text":"<p>The multi-agent architecture represents a strategic investment in progressive autonomy. While current implementations may be simple, the foundation supports future intelligence growth as: - MCP servers expand from current 3 to planned 20+ - Agent capabilities become more sophisticated - Business requirements demand specialized expertise</p>"},{"location":"architecture/decisions/adr-001-multi-agent-strategic-foundation/#preserved-business-value","title":"Preserved Business Value","text":"<p>Each agent represents distinct domain expertise: - Intake Agent: Data validation and routing logic - Credit Agent: Credit assessment and risk evaluation expertise - Income Agent: Employment and income verification knowledge - Risk Agent: Decision synthesis and policy application - Orchestrator Agent: Workflow coordination patterns</p>"},{"location":"architecture/decisions/adr-001-multi-agent-strategic-foundation/#framework-independence","title":"Framework Independence","text":"<p>By preserving agent personas as markdown files, any agent framework can: - Load specialized instructions directly - Understand domain-specific responsibilities - Access appropriate MCP tool sets - Maintain business logic separation</p>"},{"location":"architecture/decisions/adr-001-multi-agent-strategic-foundation/#implementation","title":"Implementation","text":""},{"location":"architecture/decisions/adr-001-multi-agent-strategic-foundation/#simplified-approach","title":"Simplified Approach","text":"<p>Instead of complex orchestration engines, we preserve: - Agent persona definitions (markdown files) - MCP server tool configurations - Business data models with validation - Service interface abstractions</p>"},{"location":"architecture/decisions/adr-001-multi-agent-strategic-foundation/#framework-integration","title":"Framework Integration","text":"<p>Any agent framework can use this foundation by: 1. Loading agent personas from <code>agents/agent-persona/*.md</code> 2. Connecting to MCP servers using <code>config/mcp_servers.yaml</code> 3. Using business models from <code>models/*.py</code> 4. Implementing framework-specific orchestration</p>"},{"location":"architecture/decisions/adr-001-multi-agent-strategic-foundation/#consequences","title":"Consequences","text":""},{"location":"architecture/decisions/adr-001-multi-agent-strategic-foundation/#positive","title":"Positive","text":"<ul> <li>Business logic preserved and framework-agnostic</li> <li>Agent expertise clearly defined and reusable</li> <li>Progressive enhancement path without refactoring</li> <li>Clear upgrade path as capabilities mature</li> <li>Regulatory compliance through specialized agents</li> </ul>"},{"location":"architecture/decisions/adr-001-multi-agent-strategic-foundation/#negative","title":"Negative","text":"<ul> <li>Requires framework to implement multi-agent coordination</li> <li>More complex than single-agent approach initially</li> <li>Need to maintain agent persona consistency</li> </ul>"},{"location":"architecture/decisions/adr-001-multi-agent-strategic-foundation/#future-evolution","title":"Future Evolution","text":""},{"location":"architecture/decisions/adr-001-multi-agent-strategic-foundation/#phase-1-current-business-logic-foundation","title":"Phase 1 (Current): Business Logic Foundation","text":"<ul> <li>Agent personas as instruction files</li> <li>MCP servers for tool integration</li> <li>Business models with validation</li> <li>Framework-agnostic utilities</li> </ul>"},{"location":"architecture/decisions/adr-001-multi-agent-strategic-foundation/#phase-2-framework-integration","title":"Phase 2: Framework Integration","text":"<ul> <li>Microsoft Agent Framework ChatClientAgent implementation</li> <li>Agent coordination patterns</li> <li>Real-time decision workflows</li> </ul>"},{"location":"architecture/decisions/adr-001-multi-agent-strategic-foundation/#phase-3-progressive-autonomy","title":"Phase 3: Progressive Autonomy","text":"<ul> <li>Agent-to-agent communication</li> <li>Dynamic tool selection</li> <li>Adaptive workflow patterns</li> <li>Machine learning integration</li> </ul>"},{"location":"architecture/decisions/adr-001-multi-agent-strategic-foundation/#related-decisions","title":"Related Decisions","text":"<ul> <li>ADR-002: Business Logic First Approach</li> <li>ADR-003: Configuration Separation</li> </ul> <p>Decision Date: 2024-09-24 Decision Authors: Development Team Status: Foundation implemented, framework integration pending</p>"},{"location":"architecture/decisions/adr-002-business-logic-first-approach/","title":"ADR-002: Business Logic First Approach","text":""},{"location":"architecture/decisions/adr-002-business-logic-first-approach/#status","title":"Status","text":"<p>Accepted</p>"},{"location":"architecture/decisions/adr-002-business-logic-first-approach/#context","title":"Context","text":"<p>The original repository contained complex orchestration engines, provider abstractions, and framework-specific implementations totaling 6,680+ lines. This complexity made framework migration difficult and obscured the core business value. We needed to decide between maintaining complex abstractions or simplifying to business essentials.</p>"},{"location":"architecture/decisions/adr-002-business-logic-first-approach/#decision","title":"Decision","text":"<p>Implement a \"Business Logic First\" approach that strips away framework complexity and preserves only essential business components.</p>"},{"location":"architecture/decisions/adr-002-business-logic-first-approach/#rationale","title":"Rationale","text":""},{"location":"architecture/decisions/adr-002-business-logic-first-approach/#framework-lock-in-problem","title":"Framework Lock-in Problem","text":"<p>The original approach created tight coupling between business logic and OpenAI Agent SDK: - Provider abstraction layers obscured simple operations - Orchestration engines encoded workflow logic in code - Complex agent creation patterns made framework switching difficult</p>"},{"location":"architecture/decisions/adr-002-business-logic-first-approach/#business-value-clarity","title":"Business Value Clarity","text":"<p>The valuable components were being obscured by framework complexity: - Data Models: Comprehensive loan processing models with validation - Business Rules: Domain expertise in credit, income, and risk assessment - Tool Integration: MCP servers for external data access - Agent Expertise: Specialized instruction sets for loan processing</p>"},{"location":"architecture/decisions/adr-002-business-logic-first-approach/#framework-agnostic-design","title":"Framework Agnostic Design","text":"<p>By focusing on business logic, we enable any framework integration: - Microsoft Agent Framework can load personas directly - OpenAI Assistants can use the same instruction files - LangChain can integrate with business models seamlessly - Custom implementations can access clean business APIs</p>"},{"location":"architecture/decisions/adr-002-business-logic-first-approach/#implementation","title":"Implementation","text":""},{"location":"architecture/decisions/adr-002-business-logic-first-approach/#what-we-kept-essential-business-logic","title":"What We Kept (Essential Business Logic)","text":"<pre><code>loan_processing/\n\u251c\u2500\u2500 models/                  # Business data models with validation\n\u251c\u2500\u2500 agents/agent-persona/    # Domain expertise as instruction files\n\u251c\u2500\u2500 tools/mcp_servers/      # External tool integration\n\u251c\u2500\u2500 tools/services/         # Business service interfaces\n\u251c\u2500\u2500 config/                 # Simple configuration files\n\u2514\u2500\u2500 utils/                  # Framework-agnostic utilities\n</code></pre>"},{"location":"architecture/decisions/adr-002-business-logic-first-approach/#what-we-removed-framework-complexity","title":"What We Removed (Framework Complexity)","text":"<ul> <li>Orchestration engines and pattern execution (1,000+ lines)</li> <li>Provider abstraction layers and agent factories</li> <li>Complex configuration systems with validation</li> <li>Framework-specific agent creation code</li> <li>Observability infrastructure and correlation tracking</li> </ul>"},{"location":"architecture/decisions/adr-002-business-logic-first-approach/#configuration-simplification","title":"Configuration Simplification","text":"<p>Before: Complex multi-provider configuration with validation <pre><code>providers:\n  openai:\n    provider_class: \"loan_processing.providers.openai.provider.OpenAIAgentProvider\"\n    # ... 50+ lines of configuration\n</code></pre></p> <p>After: Simple agent-to-tool mappings <pre><code>agent_personas:\n  credit:\n    file: \"credit-agent-persona.md\"\n    mcp_servers: [\"application_verification\", \"financial_calculations\"]\n</code></pre></p>"},{"location":"architecture/decisions/adr-002-business-logic-first-approach/#benefits","title":"Benefits","text":""},{"location":"architecture/decisions/adr-002-business-logic-first-approach/#immediate-benefits","title":"Immediate Benefits","text":"<ol> <li>Framework Independence: Can integrate with any agent system</li> <li>Clarity: Business logic is immediately visible and understandable</li> <li>Maintainability: Changes focus on business rules, not framework plumbing</li> <li>Testing: Business logic can be tested independently</li> <li>Documentation: Agent personas are self-documenting</li> </ol>"},{"location":"architecture/decisions/adr-002-business-logic-first-approach/#long-term-benefits","title":"Long-term Benefits","text":"<ol> <li>Future-Proof: Will work with frameworks that don't exist yet</li> <li>Specialization: Teams can focus on business expertise vs framework details</li> <li>Compliance: Business rules are explicit and auditable</li> <li>Evolution: Framework changes don't require business logic rewrites</li> </ol>"},{"location":"architecture/decisions/adr-002-business-logic-first-approach/#migration-strategy","title":"Migration Strategy","text":""},{"location":"architecture/decisions/adr-002-business-logic-first-approach/#phase-1-simplification","title":"Phase 1: Simplification \u2705","text":"<ul> <li>Remove complex orchestration and provider abstractions</li> <li>Preserve all business models and validation</li> <li>Convert agent definitions to persona files</li> <li>Simplify configuration to essential mappings</li> </ul>"},{"location":"architecture/decisions/adr-002-business-logic-first-approach/#phase-2-framework-integration-next","title":"Phase 2: Framework Integration (Next)","text":"<ul> <li>Implement Microsoft Agent Framework integration</li> <li>Load personas into ChatClientAgent instances</li> <li>Connect MCP servers as framework tools</li> <li>Implement framework-specific orchestration</li> </ul>"},{"location":"architecture/decisions/adr-002-business-logic-first-approach/#phase-3-enhancement-future","title":"Phase 3: Enhancement (Future)","text":"<ul> <li>Add advanced capabilities using framework strengths</li> <li>Implement sophisticated workflows</li> <li>Integrate machine learning components</li> </ul>"},{"location":"architecture/decisions/adr-002-business-logic-first-approach/#validation","title":"Validation","text":""},{"location":"architecture/decisions/adr-002-business-logic-first-approach/#business-logic-preservation-test","title":"Business Logic Preservation Test","text":"<p>All core business capabilities remain functional: <pre><code>from loan_processing.models import LoanApplication\nfrom loan_processing.agents import get_persona_path\n\n# Business models work immediately\napp = LoanApplication(...)\nprint(f\"DTI: {app.debt_to_income_ratio}\")\n\n# Agent personas load cleanly\ncredit_instructions = get_persona_path(\"credit\")\n</code></pre></p>"},{"location":"architecture/decisions/adr-002-business-logic-first-approach/#framework-integration-test","title":"Framework Integration Test","text":"<p>Any framework can use the foundation: <pre><code># Microsoft Agent Framework\nagent = ChatClientAgent(instructions=load_persona(\"credit\"))\n\n# OpenAI Assistants\nassistant = openai.beta.assistants.create(instructions=load_persona(\"credit\"))\n\n# LangChain\nagent = ConversationalAgent(system_message=load_persona(\"credit\"))\n</code></pre></p>"},{"location":"architecture/decisions/adr-002-business-logic-first-approach/#consequences","title":"Consequences","text":""},{"location":"architecture/decisions/adr-002-business-logic-first-approach/#positive","title":"Positive","text":"<ul> <li>\u2705 Clean Foundation: 27 Python files vs 49+ before</li> <li>\u2705 Framework Agnostic: Works with any agent system</li> <li>\u2705 Business Focused: All complexity serves business needs</li> <li>\u2705 Easy Integration: Simple APIs and clear documentation</li> <li>\u2705 Maintainable: Changes are business-driven, not framework-driven</li> </ul>"},{"location":"architecture/decisions/adr-002-business-logic-first-approach/#negative","title":"Negative","text":"<ul> <li>\u274c Framework Work Required: Need to implement orchestration in chosen framework</li> <li>\u274c Initial Setup: Requires more framework-specific code initially</li> <li>\u274c Documentation Gap: Need to create framework integration guides</li> </ul>"},{"location":"architecture/decisions/adr-002-business-logic-first-approach/#risk-mitigation","title":"Risk Mitigation","text":"<ul> <li>Framework Choice: Can switch frameworks without losing business logic</li> <li>Integration Complexity: Business logic simplicity compensates for framework work</li> <li>Learning Curve: Clear separation makes both business and framework concerns easier to understand</li> </ul>"},{"location":"architecture/decisions/adr-002-business-logic-first-approach/#related-decisions","title":"Related Decisions","text":"<ul> <li>ADR-001: Multi-Agent Strategic Foundation</li> <li>ADR-003: Configuration Separation</li> </ul> <p>Decision Date: 2024-09-24 Decision Authors: Development Team Impact: Repository restructured, 75% reduction in complexity while preserving 100% of business value</p>"},{"location":"architecture/decisions/adr-003-configuration-separation/","title":"ADR-003: Configuration Separation","text":""},{"location":"architecture/decisions/adr-003-configuration-separation/#status","title":"Status","text":"<p>Accepted</p>"},{"location":"architecture/decisions/adr-003-configuration-separation/#context","title":"Context","text":"<p>The original configuration mixed agent persona definitions with MCP server tool configurations in a single file. This violated the single responsibility principle and made it difficult to manage agent definitions separately from tool configurations. Framework integration would be cleaner with separated concerns.</p>"},{"location":"architecture/decisions/adr-003-configuration-separation/#decision","title":"Decision","text":"<p>Separate agent and MCP server configurations into dedicated files with single responsibility for each configuration type.</p>"},{"location":"architecture/decisions/adr-003-configuration-separation/#rationale","title":"Rationale","text":""},{"location":"architecture/decisions/adr-003-configuration-separation/#single-responsibility-principle","title":"Single Responsibility Principle","text":"<p>Each configuration file should have one clear purpose: - Agent definitions should not contain tool server details - MCP server configurations should not be mixed with agent logic - Framework integration should be able to load configurations independently</p>"},{"location":"architecture/decisions/adr-003-configuration-separation/#framework-integration-benefits","title":"Framework Integration Benefits","text":"<p>Separated configurations enable clean framework integration: - Load agent personas independently of tool configurations - Configure MCP servers without agent dependencies - Override environment-specific settings without affecting agent definitions - Support different deployment patterns (local, cloud, distributed)</p>"},{"location":"architecture/decisions/adr-003-configuration-separation/#maintenance-advantages","title":"Maintenance Advantages","text":"<p>Separated configurations improve maintainability: - Agent persona updates don't affect tool configurations - MCP server changes don't require agent definition updates - Environment-specific overrides are clearly scoped - Configuration validation can be specialized per type</p>"},{"location":"architecture/decisions/adr-003-configuration-separation/#implementation","title":"Implementation","text":""},{"location":"architecture/decisions/adr-003-configuration-separation/#file-structure","title":"File Structure","text":"<pre><code>loan_processing/config/\n\u251c\u2500\u2500 agents.yaml          # Agent persona mappings only\n\u251c\u2500\u2500 mcp_servers.yaml     # MCP server tool configurations only\n\u2514\u2500\u2500 settings.py          # Configuration loading with overrides\n</code></pre>"},{"location":"architecture/decisions/adr-003-configuration-separation/#agentsyaml-45-lines","title":"agents.yaml (45 lines)","text":"<p>Single Responsibility: Agent persona mappings and MCP server references <pre><code>agent_personas:\n  credit:\n    file: \"credit-agent-persona.md\"\n    description: \"Evaluates creditworthiness and financial risk\"\n    mcp_servers: [\"application_verification\", \"financial_calculations\"]\n</code></pre></p>"},{"location":"architecture/decisions/adr-003-configuration-separation/#mcp_serversyaml-48-lines","title":"mcp_servers.yaml (48 lines)","text":"<p>Single Responsibility: MCP server tool definitions and connection details <pre><code>servers:\n  application_verification:\n    host: \"localhost\"\n    port: 8010\n    url: \"http://localhost:8010/sse\"\n    tools: [\"verify_identity\", \"get_credit_report\", ...]\n</code></pre></p>"},{"location":"architecture/decisions/adr-003-configuration-separation/#settingspy-85-lines","title":"settings.py (85 lines)","text":"<p>Single Responsibility: Configuration loading with environment overrides <pre><code>class MCPServerConfig:\n    @classmethod\n    def load_from_yaml(cls, config_path: Path = None) -&gt; \"MCPServerConfig\":\n        # Load from mcp_servers.yaml with env overrides\n\n    def get_server_url(self, server_name: str) -&gt; str:\n        # Clean API for framework integration\n</code></pre></p>"},{"location":"architecture/decisions/adr-003-configuration-separation/#benefits","title":"Benefits","text":""},{"location":"architecture/decisions/adr-003-configuration-separation/#clean-framework-integration","title":"Clean Framework Integration","text":"<p>Framework code can load configurations independently: <pre><code># Microsoft Agent Framework integration\nfrom loan_processing.utils import ConfigurationLoader\nfrom loan_processing.config.settings import get_mcp_config\n\n# Load agent personas\nagent_config = ConfigurationLoader.load_config()\npersonas = agent_config['agent_personas']\n\n# Load MCP server configurations\nmcp_config = get_mcp_config()\nserver_url = mcp_config.get_server_url(\"application_verification\")\n</code></pre></p>"},{"location":"architecture/decisions/adr-003-configuration-separation/#environment-flexibility","title":"Environment Flexibility","text":"<p>MCP server settings can be overridden without touching agent definitions: <pre><code># Override MCP server hosts for production\nexport MCP_APPLICATION_VERIFICATION_HOST=prod-app-server.com\nexport MCP_FINANCIAL_CALCULATIONS_HOST=prod-calc-server.com\n\n# Agent personas remain unchanged\n</code></pre></p>"},{"location":"architecture/decisions/adr-003-configuration-separation/#independent-evolution","title":"Independent Evolution","text":"<ul> <li>Agent Personas: Can evolve business logic without affecting tool configs</li> <li>MCP Servers: Can change endpoints, add tools, modify deployment without agent updates</li> <li>Framework Integration: Can load different aspects of configuration as needed</li> </ul>"},{"location":"architecture/decisions/adr-003-configuration-separation/#migration-results","title":"Migration Results","text":""},{"location":"architecture/decisions/adr-003-configuration-separation/#before-mixed-configuration","title":"Before (Mixed Configuration)","text":"<p>Single <code>agents.yaml</code> with 74 lines containing: - Agent definitions - MCP server configurations - Provider abstractions - Complex metadata</p>"},{"location":"architecture/decisions/adr-003-configuration-separation/#after-separated-configuration","title":"After (Separated Configuration)","text":"<ul> <li><code>agents.yaml</code>: 45 lines of pure agent persona mappings</li> <li><code>mcp_servers.yaml</code>: 48 lines of pure MCP server configurations</li> <li><code>settings.py</code>: 85 lines of configuration loading logic</li> <li>Total: Clean separation with specialized APIs</li> </ul>"},{"location":"architecture/decisions/adr-003-configuration-separation/#configuration-loading","title":"Configuration Loading","text":"<p>Framework Integration Pattern: <pre><code># Load agent personas\nfrom loan_processing.utils import ConfigurationLoader\nconfig = ConfigurationLoader.load_config()\nagent_personas = config['agent_personas']\n\n# Load MCP servers\nfrom loan_processing.config.settings import get_mcp_config\nmcp_config = get_mcp_config()\navailable_servers = mcp_config.get_available_servers()\nserver_tools = mcp_config.get_server_tools(\"credit_assessment\")\n</code></pre></p>"},{"location":"architecture/decisions/adr-003-configuration-separation/#framework-integration-examples","title":"Framework Integration Examples","text":""},{"location":"architecture/decisions/adr-003-configuration-separation/#microsoft-agent-framework","title":"Microsoft Agent Framework","text":"<pre><code># Load agent persona\npersonas = ConfigurationLoader.load_config()['agent_personas']\ncredit_persona_file = personas['credit']['file']\ncredit_instructions = PersonaLoader.load_persona('credit')\n\n# Configure MCP tools\nmcp_config = get_mcp_config()\nmcp_servers = personas['credit']['mcp_servers']\nfor server_name in mcp_servers:\n    server_url = mcp_config.get_server_url(server_name)\n    # Connect to MCP server as framework tool\n</code></pre>"},{"location":"architecture/decisions/adr-003-configuration-separation/#openai-assistants","title":"OpenAI Assistants","text":"<pre><code># Same configuration loading, different framework implementation\npersona = PersonaLoader.load_persona('income')\nassistant = openai.beta.assistants.create(\n    instructions=persona,\n    tools=[{\"type\": \"function\", \"function\": tool} for tool in mcp_tools]\n)\n</code></pre>"},{"location":"architecture/decisions/adr-003-configuration-separation/#environment-variable-support","title":"Environment Variable Support","text":""},{"location":"architecture/decisions/adr-003-configuration-separation/#mcp-server-overrides","title":"MCP Server Overrides","text":"<pre><code># Override individual server settings\nMCP_APPLICATION_VERIFICATION_HOST=staging-server.com\nMCP_APPLICATION_VERIFICATION_PORT=9010\nMCP_DOCUMENT_PROCESSING_HOST=prod-docs.com\nMCP_FINANCIAL_CALCULATIONS_PORT=8015\n</code></pre>"},{"location":"architecture/decisions/adr-003-configuration-separation/#configuration-loading-priority","title":"Configuration Loading Priority","text":"<ol> <li>Environment Variables (highest priority)</li> <li>YAML Configuration Files (default values)</li> <li>Hardcoded Defaults (fallback)</li> </ol>"},{"location":"architecture/decisions/adr-003-configuration-separation/#consequences","title":"Consequences","text":""},{"location":"architecture/decisions/adr-003-configuration-separation/#positive","title":"Positive","text":"<ul> <li>\u2705 Single Responsibility: Each file has one clear purpose</li> <li>\u2705 Framework Independence: Load configurations as needed</li> <li>\u2705 Environment Flexibility: Override settings for different deployments</li> <li>\u2705 Maintainability: Changes are scoped to specific concerns</li> <li>\u2705 Clean APIs: Specialized configuration loading methods</li> </ul>"},{"location":"architecture/decisions/adr-003-configuration-separation/#negative","title":"Negative","text":"<ul> <li>\u274c Multiple Files: Need to manage two configuration files instead of one</li> <li>\u274c Reference Integrity: Must ensure agent MCP references match server definitions</li> <li>\u274c Documentation: Need to document the relationship between files</li> </ul>"},{"location":"architecture/decisions/adr-003-configuration-separation/#risk-mitigation","title":"Risk Mitigation","text":"<ul> <li>File Management: Clear documentation and examples in README</li> <li>Reference Validation: Configuration loading validates MCP server references</li> <li>Documentation: Comprehensive examples for framework integration</li> </ul>"},{"location":"architecture/decisions/adr-003-configuration-separation/#related-decisions","title":"Related Decisions","text":"<ul> <li>ADR-001: Multi-Agent Strategic Foundation</li> <li>ADR-002: Business Logic First Approach</li> </ul> <p>Decision Date: 2024-09-24 Decision Authors: Development Team Impact: Configuration separated for clean framework integration and single responsibility</p>"},{"location":"architecture/decisions/adr-004-personality-driven-agent-architecture/","title":"ADR-004: Personality-Driven Agent Architecture with Dual-Layer Design","text":"<p>Status: Accepted Date: 2025-01-25 Decision Makers: System Architect, Development Team Stakeholders: Product Team, UX Team, Compliance Team</p>"},{"location":"architecture/decisions/adr-004-personality-driven-agent-architecture/#context","title":"Context","text":"<p>The loan processing system is implementing a revolutionary AI Dream Team user experience featuring personality-driven agents (Hawk-Income, Scarlet Witch-Credit, Doctor Strange-Risk, Cap-ital America) with celebration-focused messaging and voice-first mobile experience. The core architectural question is how to implement personality-driven responses while maintaining the technical integrity of the existing loan processing workflow.</p>"},{"location":"architecture/decisions/adr-004-personality-driven-agent-architecture/#current-technical-foundation","title":"Current Technical Foundation","text":"<ul> <li>5 specialized agents: Intake \u2192 Credit \u2192 Income \u2192 Risk \u2192 Orchestrator</li> <li>Microsoft Agent Framework with structured Pydantic responses</li> <li>MCP servers for external verification (credit bureaus, document processing, financial calculations)</li> <li>Performance-optimized processing (intake agent &lt;10 seconds)</li> <li>Comprehensive business logic in data models and utilities</li> <li>Regulatory compliance and audit trail requirements</li> </ul>"},{"location":"architecture/decisions/adr-004-personality-driven-agent-architecture/#ux-vision-requirements","title":"UX Vision Requirements","text":"<ul> <li>AI Dream Team with distinct personalities for each agent</li> <li>Celebration-focused conversational responses</li> <li>Animation triggers and UI enhancements</li> <li>Voice-first mobile experience</li> <li>Emotional intelligence and encouragement</li> <li>Milestone recognition and progress celebration</li> </ul>"},{"location":"architecture/decisions/adr-004-personality-driven-agent-architecture/#architectural-constraints","title":"Architectural Constraints","text":"<ul> <li>Cannot compromise loan processing accuracy: Technical decisions must remain unaffected</li> <li>Regulatory compliance: Must maintain audit trails and compliance requirements</li> <li>Performance requirements: Cannot degrade current processing speed</li> <li>Team development: Technical and UX teams need parallel development capability</li> <li>Fallback requirements: System must function if personality layer fails</li> </ul>"},{"location":"architecture/decisions/adr-004-personality-driven-agent-architecture/#decision","title":"Decision","text":"<p>Implement a Dual-Layer Architecture with complete separation between business logic and personality presentation layers.</p>"},{"location":"architecture/decisions/adr-004-personality-driven-agent-architecture/#architecture-pattern-presentation-wrapper-with-enhanced-response-model","title":"Architecture Pattern: Presentation Wrapper with Enhanced Response Model","text":"<p>Layer 1: Technical Processing (Unchanged) - Preserve all existing technical agent personas exactly as-is - Maintain current MCP server integrations - Keep structured Pydantic response models - Continue regulatory compliance patterns</p> <p>Layer 2: Personality Enhancement (New) - Add personality agents for conversational responses - Generate UI trigger data for animations - Provide celebration and encouragement messaging - Handle emotional intelligence and milestone recognition</p>"},{"location":"architecture/decisions/adr-004-personality-driven-agent-architecture/#alternatives-considered","title":"Alternatives Considered","text":""},{"location":"architecture/decisions/adr-004-personality-driven-agent-architecture/#alternative-1-replace-technical-personas-entirely","title":"Alternative 1: Replace Technical Personas Entirely","text":"<p>Description: Merge personality instructions directly into existing technical personas. Rejected Because: - High risk of contaminating technical logic with presentation concerns - Difficult to maintain regulatory compliance - Cannot fallback to technical-only mode - Makes testing and validation complex</p>"},{"location":"architecture/decisions/adr-004-personality-driven-agent-architecture/#alternative-2-enhanced-single-agent","title":"Alternative 2: Enhanced Single Agent","text":"<p>Description: Single agent with both technical and personality instructions. Rejected Because: - Violates separation of concerns principle - Personality changes could affect technical accuracy - Difficult to optimize each concern independently - Team development conflicts between technical and UX requirements</p>"},{"location":"architecture/decisions/adr-004-personality-driven-agent-architecture/#alternative-3-dual-layer-architecture-selected","title":"Alternative 3: Dual-Layer Architecture (SELECTED)","text":"<p>Description: Complete separation with presentation wrapper pattern. Selected Because: - Zero risk to core business logic - Perfect separation of concerns - Independent evolution of each layer - Fallback safety to technical-only mode - Parallel team development capability</p>"},{"location":"architecture/decisions/adr-004-personality-driven-agent-architecture/#implementation-design","title":"Implementation Design","text":""},{"location":"architecture/decisions/adr-004-personality-driven-agent-architecture/#enhanced-response-model","title":"Enhanced Response Model","text":"<pre><code>class EnhancedAssessment(BaseModel):\n    \"\"\"Enhanced assessment with personality presentation layer.\"\"\"\n\n    # Technical assessment (unchanged)\n    technical_assessment: CreditAssessment | IncomeVerification | RiskAssessment\n\n    # Personality presentation layer\n    personality_response: PersonalityResponse\n\n    # UI enhancement triggers\n    ui_triggers: UITriggerResponse\n\nclass PersonalityResponse(BaseModel):\n    \"\"\"Personality-driven presentation data.\"\"\"\n    agent_name: str  # \"Hawk-Income\", \"Scarlet Witch-Credit\", \"Doctor Strange-Risk\", \"Cap-ital America\"\n    celebration_message: str\n    encouragement_note: str\n    milestone_achieved: str | None\n    emotional_tone: Literal[\"excited\", \"supportive\", \"professional\", \"celebratory\"]\n\nclass UITriggerResponse(BaseModel):\n    \"\"\"UI enhancement and animation triggers.\"\"\"\n    animation_trigger: str | None  # \"celebration\", \"progress\", \"milestone\"\n    progress_percentage: float\n    status_badge: str  # \"Great Progress!\", \"Excellent Credit!\"\n    next_step_preview: str\n</code></pre>"},{"location":"architecture/decisions/adr-004-personality-driven-agent-architecture/#agent-architecture-pattern","title":"Agent Architecture Pattern","text":"<pre><code>class PersonalityEnhancedCreditAgent:\n    def __init__(self):\n        # Layer 1: Technical processing (unchanged)\n        self.technical_agent = CreditAgent()\n\n        # Layer 2: Personality enhancement (new)\n        self.personality_agent = ChatClientAgent(\n            instructions=load_persona(\"marcus-personality-persona.md\"),\n            response_format=PersonalityResponse\n        )\n        self.ui_trigger_agent = ChatClientAgent(\n            instructions=load_persona(\"ui-enhancement-persona.md\"),\n            response_format=UITriggerResponse\n        )\n\n    async def assess_with_personality(self, application: LoanApplication) -&gt; EnhancedAssessment:\n        # Technical assessment (unchanged)\n        technical_result = await self.technical_agent.assess_credit(application)\n\n        # Personality enhancement (new)\n        personality_result = await self.personality_agent.run({\n            \"applicant_name\": application.applicant_name,\n            \"credit_score\": technical_result.credit_score,\n            \"risk_level\": technical_result.risk_level.value\n        })\n\n        # UI triggers (new)\n        ui_triggers = await self.ui_trigger_agent.run({\n            \"assessment_result\": technical_result.model_dump(),\n            \"personality_tone\": personality_result.emotional_tone\n        })\n\n        return EnhancedAssessment(\n            technical_assessment=technical_result,\n            personality_response=personality_result,\n            ui_triggers=ui_triggers\n        )\n</code></pre>"},{"location":"architecture/decisions/adr-004-personality-driven-agent-architecture/#data-flow-architecture","title":"Data Flow Architecture","text":"<pre><code>LoanApplication\n     \u2193\nTechnical Agent (unchanged)\n     \u2193\nCreditAssessment (unchanged)\n     \u2193\nPersonality Agent (new)\n     \u2193\nPersonalityResponse (presentation only)\n     \u2193\nUI Trigger Agent (new)\n     \u2193\nEnhancedAssessment (combined response)\n     \u2193\nUI Layer (animations, celebrations)\n</code></pre>"},{"location":"architecture/decisions/adr-004-personality-driven-agent-architecture/#consequences","title":"Consequences","text":""},{"location":"architecture/decisions/adr-004-personality-driven-agent-architecture/#positive-consequences","title":"Positive Consequences","text":"<ol> <li>Technical Integrity Preserved: Core loan processing logic remains completely unchanged</li> <li>Zero Business Risk: Technical decisions unaffected by personality layer</li> <li>Regulatory Compliance Maintained: Audit trails and compliance patterns unchanged</li> <li>Independent Evolution: Technical and personality layers can evolve separately</li> <li>Fallback Safety: Can disable personality layer without affecting core functionality</li> <li>Performance Optimization: Each layer can be optimized independently</li> <li>Parallel Development: Technical and UX teams can work simultaneously</li> <li>Testing Isolation: Technical and personality concerns tested separately</li> </ol>"},{"location":"architecture/decisions/adr-004-personality-driven-agent-architecture/#negative-consequences","title":"Negative Consequences","text":"<ol> <li>Increased Complexity: Additional architectural layer to maintain</li> <li>Response Time Impact: Additional processing for personality and UI triggers</li> <li>Development Overhead: Need to maintain both technical and personality personas</li> <li>Resource Usage: Additional AI agent calls for personality enhancement</li> </ol>"},{"location":"architecture/decisions/adr-004-personality-driven-agent-architecture/#risk-mitigation-strategies","title":"Risk Mitigation Strategies","text":"<ol> <li>Performance Impact:</li> <li>Implement async processing for personality layer</li> <li>Cache personality responses for similar scenarios</li> <li> <p>Optimize personality agent personas for speed</p> </li> <li> <p>Complexity Management:</p> </li> <li>Clear interface contracts between layers</li> <li>Comprehensive testing at each layer</li> <li> <p>Documentation for dual-persona maintenance</p> </li> <li> <p>Failure Handling:</p> </li> <li>Graceful degradation to technical-only responses</li> <li>Circuit breaker patterns for personality layer</li> <li>Monitoring for personality agent performance</li> </ol>"},{"location":"architecture/decisions/adr-004-personality-driven-agent-architecture/#implementation-phases","title":"Implementation Phases","text":""},{"location":"architecture/decisions/adr-004-personality-driven-agent-architecture/#phase-1-foundation-weeks-1-2","title":"Phase 1: Foundation (Weeks 1-2)","text":"<ul> <li> Create enhanced response models (EnhancedAssessment, PersonalityResponse, UITriggerResponse)</li> <li> Implement dual-layer agent wrapper pattern</li> <li> Create personality persona templates for each agent character</li> <li> Add fallback mechanisms for personality layer failures</li> </ul>"},{"location":"architecture/decisions/adr-004-personality-driven-agent-architecture/#phase-2-agent-personalities-weeks-3-4","title":"Phase 2: Agent Personalities (Weeks 3-4)","text":"<ul> <li> Develop Scarlet Witch-Credit (Credit Analyst) personality persona and responses</li> <li> Develop Hawk-Income (Income Specialist) personality persona and responses</li> <li> Develop Doctor Strange-Risk (Risk Assessor) personality persona and responses</li> <li> Develop Cap-ital America (Decision Coordinator) personality persona and responses</li> <li> Implement UI trigger generation for animations and celebrations</li> </ul>"},{"location":"architecture/decisions/adr-004-personality-driven-agent-architecture/#phase-3-integration-testing-weeks-5-6","title":"Phase 3: Integration &amp; Testing (Weeks 5-6)","text":"<ul> <li> Integrate personality layer with existing workflow</li> <li> Comprehensive testing of dual-layer architecture</li> <li> Performance optimization and caching strategies</li> <li> Fallback mode testing and validation</li> </ul>"},{"location":"architecture/decisions/adr-004-personality-driven-agent-architecture/#phase-4-ux-enhancement-weeks-7-8","title":"Phase 4: UX Enhancement (Weeks 7-8)","text":"<ul> <li> UI integration for personality responses and animations</li> <li> Voice-first mobile experience integration</li> <li> Celebration and milestone recognition features</li> <li> User acceptance testing and feedback incorporation</li> </ul>"},{"location":"architecture/decisions/adr-004-personality-driven-agent-architecture/#success-metrics","title":"Success Metrics","text":""},{"location":"architecture/decisions/adr-004-personality-driven-agent-architecture/#technical-metrics","title":"Technical Metrics","text":"<ul> <li>Processing Time: No degradation in core technical processing time</li> <li>Accuracy: 100% preservation of technical assessment accuracy</li> <li>Reliability: 99.9% uptime for technical layer, graceful degradation for personality failures</li> </ul>"},{"location":"architecture/decisions/adr-004-personality-driven-agent-architecture/#user-experience-metrics","title":"User Experience Metrics","text":"<ul> <li>Engagement: Increased user satisfaction scores with personality-driven experience</li> <li>Completion Rate: Improved loan application completion rates</li> <li>Emotional Response: Positive user feedback on celebration and encouragement features</li> </ul>"},{"location":"architecture/decisions/adr-004-personality-driven-agent-architecture/#operational-metrics","title":"Operational Metrics","text":"<ul> <li>Development Velocity: Parallel technical and UX development capability</li> <li>Maintenance: Separate maintenance cycles for technical and personality concerns</li> <li>Testing: Independent testing strategies for each architectural layer</li> </ul>"},{"location":"architecture/decisions/adr-004-personality-driven-agent-architecture/#references","title":"References","text":"<ul> <li>Microsoft Agent Framework Documentation</li> <li>Current loan processing workflow specifications</li> <li>UX Design specifications for AI Dream Team experience</li> <li>Regulatory compliance requirements for loan processing</li> <li>Performance benchmarks for current system</li> </ul>"},{"location":"architecture/decisions/adr-004-personality-driven-agent-architecture/#notes","title":"Notes","text":"<p>This architectural decision enables the revolutionary AI Dream Team user experience while maintaining complete technical integrity. The dual-layer design provides maximum flexibility for both technical accuracy and personality-driven user engagement, with clear separation of concerns and risk mitigation strategies.</p>"},{"location":"architecture/decisions/adr-005-api-architecture-with-agent-framework/","title":"ADR-005: API Architecture with FastAPI and Microsoft Agent Framework","text":"<p>Status: Accepted</p> <p>Date: 2025-09-28</p> <p>Decision: Use FastAPI for REST API with Microsoft Agent Framework's built-in workflow orchestration (SequentialBuilder), conversation state management (AgentThread), and event streaming (Workflow.run_stream).</p> <p>Context: - Need to expose multi-agent loan processing to UI - Require real-time progress updates during workflow execution - Must support conversational intake with state management - Need cloud-native deployment on Azure</p> <p>Alternatives Considered: 1. Custom Service Bus orchestration - Rejected: Agent Framework provides SequentialBuilder 2. Custom session management with Redis - Accepted partially: Use AgentThread with Redis-backed ChatMessageStore 3. WebSocket for all communication - Rejected: Streamable HTTP (MCP-aligned) is simpler 4. Flask/Django - Rejected: FastAPI has native async support and Pydantic integration</p> <p>Decision: - FastAPI for REST API layer with async support - SequentialBuilder for workflow orchestration (Intake \u2192 Credit \u2192 Income \u2192 Risk) - AgentThread for conversation state management - Workflow.run_stream() for real-time event streaming - Streamable HTTP transport aligned with MCP specification</p> <p>Consequences:</p> <p>Positive: - Leverage Agent Framework's built-in capabilities (no custom infrastructure) - Type-safe workflow construction with Python type hints - Automatic Pydantic validation for requests/responses - Built-in observability with WorkflowEvents - Simplified architecture (fewer moving parts)</p> <p>Negative: - Learning curve for Agent Framework patterns - Less flexibility than custom orchestration - Tight coupling to Microsoft Agent Framework</p> <p>Implementation: - API layer: <code>loan_avengers/api/</code> - Workflow service: Uses SequentialBuilder - Chat service: Uses AgentThread with RedisChatMessageStore - See: <code>docs/api/api-architecture.md</code></p> <p>Related ADRs: - ADR-001: Multi-agent strategic foundation - ADR-004: Personality-driven agent architecture - ADR-006: Sequential Workflow Orchestration</p>"},{"location":"architecture/decisions/adr-006-sequential-workflow-orchestration/","title":"ADR-006: Sequential Workflow Orchestration with SequentialBuilder","text":"<p>Status: Accepted Date: 2025-09-28</p> <p>Decision: Use Microsoft Agent Framework's SequentialBuilder for orchestrating loan processing agents in sequential workflow.</p> <p>Context: User asked to review Agent Framework capabilities rather than implementing custom Azure Service Bus orchestration. Agent Framework provides SequentialBuilder for sequential agent workflows with shared conversation context.</p> <p>Decision: Use SequentialBuilder to wire agents: Intake \u2192 Credit \u2192 Income \u2192 Risk \u2192 Decision</p> <pre><code>workflow = SequentialBuilder().participants([\n    intake_agent, credit_agent, income_agent, risk_agent\n]).build()\n</code></pre> <p>Consequences: Positive: Built-in orchestration, type-safe, automatic message passing Negative: Sequential only (no parallel processing)</p> <p>Related: ADR-005, ADR-007</p>"},{"location":"architecture/decisions/adr-007-conversation-state-with-agent-thread/","title":"ADR-007: Conversation State Management with AgentThread","text":"<p>Status: Accepted Date: 2025-09-28</p> <p>Decision: Use Agent Framework's AgentThread with Redis-backed ChatMessageStore for conversation state.</p> <p>Context: Need to manage conversation history for conversational intake. Agent Framework provides AgentThread with ChatMessageStore protocol for state management.</p> <p>Decision: - AgentThread for conversation state per application - RedisChatMessageStore implements ChatMessageStore protocol - 30-minute TTL for session state</p> <p>Consequences: Positive: Built-in state management, automatic serialization, type-safe Negative: Requires Redis for persistence</p> <p>Related: ADR-005, ADR-008</p>"},{"location":"architecture/decisions/adr-008-streamable-http-transport/","title":"ADR-008: Streamable HTTP Transport (MCP-Aligned)","text":"<p>Status: Accepted Date: 2025-09-28</p> <p>Decision: Use Streamable HTTP transport for real-time workflow events, aligned with Model Context Protocol (MCP) specification.</p> <p>Context: MCP servers use Streamable HTTP transport (single POST endpoint with optional SSE streaming). Align API with same pattern for consistency.</p> <p>Decision: - Single POST endpoint: <code>/api/v1/applications/{id}/stream</code> - Accept: text/event-stream for SSE streaming - Accept: application/json for single responses - JSON-RPC 2.0 event format</p> <p>Consequences: Positive: Consistent with MCP pattern, simpler than WebSocket, auto-reconnect Negative: One-way communication (use separate chat endpoint for bidirectional)</p> <p>Related: ADR-005</p>"},{"location":"architecture/decisions/adr-009-azure-container-apps-deployment/","title":"ADR-009: Azure Container Apps Deployment Strategy","text":"<p>Status: Accepted Date: 2025-09-28 (Updated: 2025-10-01)</p>"},{"location":"architecture/decisions/adr-009-azure-container-apps-deployment/#context","title":"Context","text":"<p>Need cloud-native, serverless deployment on Azure with auto-scaling and seamless integration with Azure services. Additionally, before public release, we need to ensure proper CI/CD security and deployment safeguards are in place.</p>"},{"location":"architecture/decisions/adr-009-azure-container-apps-deployment/#decision","title":"Decision","text":""},{"location":"architecture/decisions/adr-009-azure-container-apps-deployment/#infrastructure-components","title":"Infrastructure Components","text":"<ul> <li>Azure Container Apps for API hosting (serverless, auto-scaling)</li> <li>Azure Cache for Redis for AgentThread state management</li> <li>Azure Blob Storage for document storage</li> <li>Cosmos DB for completed applications persistence</li> <li>Azure Key Vault for secrets management</li> <li>Entra ID (Managed Identity) for authentication</li> </ul>"},{"location":"architecture/decisions/adr-009-azure-container-apps-deployment/#pre-deployment-requirements","title":"Pre-Deployment Requirements","text":"<p>Before deploying to production:</p> <ol> <li>Security Configuration (see ADR-017):</li> <li>All secrets in Azure Key Vault</li> <li>CORS origins restricted to production domains</li> <li>Debug mode disabled (<code>APP_DEBUG=false</code>)</li> <li>HTTPS enforced (automatic with Azure Container Apps)</li> <li>Azure Managed Identity configured</li> <li>Application Insights for security monitoring</li> <li>Session timeout configured</li> <li>Input validation on all endpoints</li> <li>Rate limiting enabled</li> <li> <p>Security headers (CSP, HSTS, X-Frame-Options)</p> </li> <li> <p>Branch Protection (see ADR-015):</p> </li> <li>Main branch protected with required approvals</li> <li>All CI/CD checks must pass before merge</li> <li>CODEOWNERS configured for workflow files</li> <li> <p>No direct pushes to main</p> </li> <li> <p>GitHub Actions Security (see ADR-016):</p> </li> <li>All workflows follow security best practices</li> <li>Secrets properly configured</li> <li>Dependabot enabled for dependency updates</li> <li>CodeQL scanning enabled</li> </ol>"},{"location":"architecture/decisions/adr-009-azure-container-apps-deployment/#deployment-process","title":"Deployment Process","text":"<ol> <li>Build: GitHub Actions builds Docker image</li> <li>Test: Automated tests run in CI/CD</li> <li>Security Scan: Container scanned for vulnerabilities</li> <li>Deploy: Push to Azure Container Registry</li> <li>Release: Container Apps pulls and deploys</li> <li>Monitor: Application Insights tracks performance</li> </ol>"},{"location":"architecture/decisions/adr-009-azure-container-apps-deployment/#consequences","title":"Consequences","text":""},{"location":"architecture/decisions/adr-009-azure-container-apps-deployment/#positive","title":"Positive","text":"<ul> <li>Serverless: No infrastructure management required</li> <li>Auto-scaling: Scales based on demand (0 to N instances)</li> <li>Native Azure Integration: Managed Identity, Key Vault, etc.</li> <li>Cost-effective: Pay only for usage</li> <li>Secure: Multiple layers of security protection</li> <li>CI/CD Automated: GitHub Actions handles build and deploy</li> </ul>"},{"location":"architecture/decisions/adr-009-azure-container-apps-deployment/#negative","title":"Negative","text":"<ul> <li>Azure-specific: Not multi-cloud portable</li> <li>Cold start: Initial request may have latency</li> <li>Azure dependency: Requires Azure subscription</li> <li>Learning curve: Azure-specific services and concepts</li> </ul>"},{"location":"architecture/decisions/adr-009-azure-container-apps-deployment/#mitigation","title":"Mitigation","text":"<ul> <li>Use Azure credits for initial deployment</li> <li>Document all Azure-specific configurations</li> <li>Consider multi-cloud support in future if needed</li> <li>Pre-warm containers for production use</li> </ul>"},{"location":"architecture/decisions/adr-009-azure-container-apps-deployment/#implementation","title":"Implementation","text":""},{"location":"architecture/decisions/adr-009-azure-container-apps-deployment/#phase-1-infrastructure-setup","title":"Phase 1: Infrastructure Setup","text":"<ol> <li>Create Azure resources (Container Apps, Redis, Key Vault, etc.)</li> <li>Configure Managed Identity</li> <li>Set up Application Insights</li> </ol>"},{"location":"architecture/decisions/adr-009-azure-container-apps-deployment/#phase-2-security-hardening","title":"Phase 2: Security Hardening","text":"<ol> <li>Complete all pre-deployment security requirements</li> <li>Configure branch protection (ADR-015)</li> <li>Fix GitHub Actions security issues (ADR-016)</li> <li>Enable all security features (ADR-017)</li> </ol>"},{"location":"architecture/decisions/adr-009-azure-container-apps-deployment/#phase-3-deployment-pipeline","title":"Phase 3: Deployment Pipeline","text":"<ol> <li>Configure GitHub Actions for Azure deployment</li> <li>Set up Container Registry</li> <li>Implement deployment workflow</li> <li>Test with staging environment</li> </ol>"},{"location":"architecture/decisions/adr-009-azure-container-apps-deployment/#phase-4-go-live","title":"Phase 4: Go Live","text":"<ol> <li>Verify all security checks pass</li> <li>Deploy to production</li> <li>Monitor for issues</li> <li>Make repository public (if applicable)</li> </ol>"},{"location":"architecture/decisions/adr-009-azure-container-apps-deployment/#references","title":"References","text":"<ul> <li>ADR-015: Branch Protection Strategy</li> <li>ADR-016: GitHub Actions Security Standards</li> <li>ADR-017: Public Release Readiness Standards</li> <li>ADR-005: API Architecture with Agent Framework</li> <li>Azure Container Apps Documentation</li> <li>Azure Deployment Guide: <code>docs/deployment/azure-deployment.md</code></li> <li>Security Checklist: <code>docs/deployment/deployment-checklist.md</code></li> </ul>"},{"location":"architecture/decisions/adr-009-azure-container-apps-deployment/#related-adrs","title":"Related ADRs","text":"<ul> <li>ADR-005: API Architecture with Agent Framework</li> <li>ADR-015: Branch Protection Strategy (pre-deployment requirement)</li> <li>ADR-016: GitHub Actions Security (CI/CD requirement)</li> <li>ADR-017: Public Release Readiness (overall standards)</li> </ul> <p>Last Updated: 2025-10-01 Author: Original decision 2025-09-28, Security additions 2025-10-01</p>"},{"location":"architecture/decisions/adr-010-monorepo-restructuring/","title":"ADR-010: Monorepo Restructuring with UV Workspace","text":"<p>Status: Accepted Date: 2025-10-01 Deciders: niksacdev, Claude Code (system-architecture-reviewer) Tags: architecture, deployment, monorepo, infrastructure</p>"},{"location":"architecture/decisions/adr-010-monorepo-restructuring/#context","title":"Context","text":"<p>The Loan Avengers application started as a single Python package with mixed API and UI code. As the project grew, we identified several challenges:</p> <ol> <li>Deployment Complexity: Cannot deploy API and UI independently</li> <li>Dependency Conflicts: Shared dependencies between API (Python) and UI (TypeScript)</li> <li>Build Optimization: Cannot optimize Docker builds for each component</li> <li>Scaling Issues: Cannot scale API and UI separately based on load</li> <li>Development Experience: Changes to UI require rebuilding entire project</li> </ol>"},{"location":"architecture/decisions/adr-010-monorepo-restructuring/#user-need","title":"User Need","text":"<ul> <li>Deploy components independently to different Azure Container Apps</li> <li>Scale services independently based on traffic patterns</li> <li>Optimize CI/CD by building only changed components</li> <li>Improve developer experience with faster iteration cycles</li> </ul>"},{"location":"architecture/decisions/adr-010-monorepo-restructuring/#decision","title":"Decision","text":"<p>We restructure the repository into a monorepo with independent apps using the following architecture:</p> <pre><code>loan-avengers/\n\u251c\u2500\u2500 pyproject.toml          # Workspace root (tooling config only)\n\u251c\u2500\u2500 .env                    # Shared environment variables\n\u251c\u2500\u2500 apps/\n\u2502   \u251c\u2500\u2500 api/                # Python FastAPI backend\n\u2502   \u2502   \u251c\u2500\u2500 pyproject.toml  # API-specific dependencies\n\u2502   \u2502   \u251c\u2500\u2500 uv.lock         # API dependency lock\n\u2502   \u2502   \u2514\u2500\u2500 loan_avengers/  # Application code\n\u2502   \u2514\u2500\u2500 ui/                 # TypeScript React frontend\n\u2502       \u251c\u2500\u2500 package.json    # UI-specific dependencies\n\u2502       \u251c\u2500\u2500 package-lock.json\n\u2502       \u2514\u2500\u2500 src/\n\u251c\u2500\u2500 tests/                  # Shared test suite\n\u2514\u2500\u2500 docs/\n</code></pre>"},{"location":"architecture/decisions/adr-010-monorepo-restructuring/#key-design-decisions","title":"Key Design Decisions","text":""},{"location":"architecture/decisions/adr-010-monorepo-restructuring/#1-uv-workspace-pattern","title":"1. UV Workspace Pattern","text":"<pre><code># Root pyproject.toml\n[tool.uv.workspace]\nmembers = [\"apps/api\"]\n\n# Shared tooling only (ruff, black, mypy, pytest)\n[tool.uv]\ndev-dependencies = [...]\n</code></pre> <p>Rationale: - Workspace allows shared development tools - Each app manages its own production dependencies - Lock files stay in app directories for independent deployment</p>"},{"location":"architecture/decisions/adr-010-monorepo-restructuring/#2-shared-env-at-root","title":"2. Shared .env at Root","text":"<pre><code># .env (root level)\nAZURE_AI_PROJECT_ENDPOINT=...\nAZURE_AI_MODEL_DEPLOYMENT_NAME=...\n</code></pre> <p>Rationale: - Single source of truth for configuration - Apps load from <code>../../.env</code> using python-dotenv - Simplifies local development - Azure Container Apps can override per-service</p>"},{"location":"architecture/decisions/adr-010-monorepo-restructuring/#3-independent-cicd","title":"3. Independent CI/CD","text":"<pre><code># .github/workflows/test-apps.yml\njobs:\n  test-api:\n    working-directory: apps/api\n  test-ui:\n    working-directory: apps/ui\n</code></pre> <p>Rationale: - Test each app independently - Deploy only changed components - Faster feedback loops</p>"},{"location":"architecture/decisions/adr-010-monorepo-restructuring/#4-container-per-app-deployment","title":"4. Container-Per-App Deployment","text":"<pre><code># apps/api/Dockerfile\nFROM python:3.11-slim\nWORKDIR /app\nCOPY apps/api .\nRUN uv sync\n</code></pre> <pre><code># apps/ui/Dockerfile\nFROM node:18-alpine\nWORKDIR /app\nCOPY apps/ui .\nRUN npm ci &amp;&amp; npm run build\n</code></pre> <p>Rationale: - Each app builds its own optimized container - No cross-app dependencies in containers - Smaller image sizes (API ~300MB, UI ~50MB)</p>"},{"location":"architecture/decisions/adr-010-monorepo-restructuring/#consequences","title":"Consequences","text":""},{"location":"architecture/decisions/adr-010-monorepo-restructuring/#positive","title":"Positive \u2705","text":"<ol> <li>Independent Deployment</li> <li>Deploy API without rebuilding UI</li> <li>Deploy UI without restarting API</li> <li> <p>Hotfix one service without affecting others</p> </li> <li> <p>Independent Scaling</p> </li> <li>Scale API horizontally based on request load</li> <li>Scale UI based on CDN cache misses</li> <li> <p>Right-size containers per service</p> </li> <li> <p>Optimized CI/CD</p> </li> <li>Run only affected tests</li> <li>Build only changed containers</li> <li> <p>Faster merge-to-production time</p> </li> <li> <p>Better Developer Experience</p> </li> <li>Frontend devs don't need Python environment</li> <li>Backend devs don't need Node.js</li> <li> <p>Faster local iteration (only rebuild changed app)</p> </li> <li> <p>Future Extensibility</p> </li> <li>Easy to add new apps (agents, workers, schedulers)</li> <li>Each app can use different tech stack</li> <li>Shared tooling ensures consistency</li> </ol>"},{"location":"architecture/decisions/adr-010-monorepo-restructuring/#negative","title":"Negative \u26a0\ufe0f","text":"<ol> <li>Migration Complexity</li> <li>One-time cost to restructure existing code</li> <li>Update all import paths</li> <li> <p>Migrate tests to new structure</p> </li> <li> <p>Coordination Overhead</p> </li> <li>Breaking API changes require UI updates</li> <li>Need versioning strategy for API contracts</li> <li> <p>Shared types need careful management</p> </li> <li> <p>Local Development Setup</p> </li> <li>Developers run multiple services locally</li> <li>Need docker-compose or scripts</li> <li> <p>More complex initial setup</p> </li> <li> <p>Testing Complexity</p> </li> <li>Integration tests span multiple apps</li> <li>Need proper test data management</li> <li>E2E tests require all services running</li> </ol>"},{"location":"architecture/decisions/adr-010-monorepo-restructuring/#mitigations","title":"Mitigations","text":"<ol> <li>Migration: Created comprehensive MIGRATION.md with step-by-step guide</li> <li>Coordination: Implement API versioning and OpenAPI contracts</li> <li>Local Dev: Created <code>scripts/dev-all.sh</code> to start all services</li> <li>Testing: Shared <code>tests/</code> directory for integration tests</li> </ol>"},{"location":"architecture/decisions/adr-010-monorepo-restructuring/#implementation","title":"Implementation","text":""},{"location":"architecture/decisions/adr-010-monorepo-restructuring/#phase-1-restructure-complete","title":"Phase 1: Restructure (\u2705 Complete)","text":"<ul> <li> Create <code>apps/api</code> and move Python code</li> <li> Create <code>apps/ui</code> and move React code</li> <li> Convert root to UV workspace</li> <li> Update import paths</li> <li> Move .env to root</li> <li> Update documentation</li> </ul>"},{"location":"architecture/decisions/adr-010-monorepo-restructuring/#phase-2-cicd-complete","title":"Phase 2: CI/CD (\u2705 Complete)","text":"<ul> <li> Create <code>test-apps.yml</code> workflow</li> <li> Add workspace validation</li> <li> Configure Codecov for each app</li> </ul>"},{"location":"architecture/decisions/adr-010-monorepo-restructuring/#phase-3-deployment-pending","title":"Phase 3: Deployment (Pending)","text":"<ul> <li> Create Azure Container Apps for each service</li> <li> Set up Azure Container Registry</li> <li> Configure deployment pipelines</li> <li> Set up monitoring and observability</li> </ul>"},{"location":"architecture/decisions/adr-010-monorepo-restructuring/#alternatives-considered","title":"Alternatives Considered","text":""},{"location":"architecture/decisions/adr-010-monorepo-restructuring/#alternative-1-keep-single-package","title":"Alternative 1: Keep Single Package","text":"<p>Rejected: Cannot deploy components independently, violates cloud-native principles</p>"},{"location":"architecture/decisions/adr-010-monorepo-restructuring/#alternative-2-separate-repositories","title":"Alternative 2: Separate Repositories","text":"<p>Rejected: Loses benefits of shared tooling, harder to maintain consistency, complicates versioning</p>"},{"location":"architecture/decisions/adr-010-monorepo-restructuring/#alternative-3-nxturborepo","title":"Alternative 3: Nx/Turborepo","text":"<p>Rejected: Adds complexity, UV workspace sufficient for current needs, can migrate later if needed</p>"},{"location":"architecture/decisions/adr-010-monorepo-restructuring/#references","title":"References","text":"<ul> <li>UV Workspace Documentation</li> <li>Azure Container Apps Multi-Container</li> <li>Monorepo Best Practices</li> <li>Original Discussion: PR #78</li> <li>Migration Guide: <code>MIGRATION.md</code></li> </ul>"},{"location":"architecture/decisions/adr-010-monorepo-restructuring/#related-decisions","title":"Related Decisions","text":"<ul> <li>ADR-003: Instruction File Synchronization (workspace affects all IDEs)</li> <li>ADR-005: Orchestration Refactoring (affects agent deployment)</li> <li>Future: ADR-011: API Versioning Strategy</li> </ul> <p>Decision Makers: niksacdev, Claude Code Consultation: system-architecture-reviewer agent (Architecture Grade: 7.9/10) Implementation: PR #78 - Complete Monorepo Restructuring</p>"},{"location":"architecture/decisions/adr-011-two-endpoint-api-architecture/","title":"ADR-011: Two-Endpoint API Architecture for Collection and Processing","text":"<p>Status: Recommended Date: 2025-09-29 Decision Makers: System Architect, Development Team Supersedes: Unified workflow approach (rejected in ADR-010)</p>"},{"location":"architecture/decisions/adr-011-two-endpoint-api-architecture/#context","title":"Context","text":"<p>Following the comprehensive assessment in ADR-010, we identified that the <code>unified_workflow.py</code> approach fundamentally violated established architectural principles (ADR-004, ADR-006, ADR-007) by conflating conversational data collection with formal loan processing.</p>"},{"location":"architecture/decisions/adr-011-two-endpoint-api-architecture/#the-problem","title":"The Problem","text":"<p>The system requires two distinct capabilities:</p> <ol> <li>Conversational Data Collection: Cap-ital America gathers loan application information through natural language conversation (iterative, conversational, partial data)</li> <li>Formal Loan Processing: WorkflowOrchestrator executes business logic through sequential agent workflow (one-shot, analytical, complete validated data)</li> </ol> <p>Attempting to unify these into a single workflow violated separation of concerns and misused the Microsoft Agent Framework's SequentialBuilder.</p>"},{"location":"architecture/decisions/adr-011-two-endpoint-api-architecture/#requirements","title":"Requirements","text":"<ul> <li>Phase Separation: Clear distinction between collection and processing</li> <li>Type Safety: Validated data models at transition points</li> <li>ADR Compliance: Follow dual-layer architecture (ADR-004)</li> <li>Framework Alignment: Proper use of Microsoft Agent Framework patterns</li> <li>User Experience: Clear UI transitions between phases</li> <li>State Management: Single source of truth, no duplication</li> </ul>"},{"location":"architecture/decisions/adr-011-two-endpoint-api-architecture/#decision","title":"Decision","text":"<p>Implement a two-endpoint API architecture with complete separation of concerns:</p>"},{"location":"architecture/decisions/adr-011-two-endpoint-api-architecture/#endpoint-1-post-apichat","title":"Endpoint 1: POST /api/chat","text":"<ul> <li>Purpose: Conversational data collection with Cap-ital America</li> <li>Input: User message (string) + optional session ID</li> <li>Output: Cap-ital America response with collected data and completion percentage</li> <li>Pattern: Iterative (multiple requests until complete)</li> <li>Agent: RileyCoordinator only</li> <li>State: Accumulates in <code>session.collected_data</code></li> </ul>"},{"location":"architecture/decisions/adr-011-two-endpoint-api-architecture/#endpoint-2-post-apiprocess","title":"Endpoint 2: POST /api/process","text":"<ul> <li>Purpose: Formal loan processing through WorkflowOrchestrator</li> <li>Input: Session ID containing complete application data</li> <li>Output: Server-Sent Events (SSE) stream of workflow progress</li> <li>Pattern: One-shot (single request, streams to completion)</li> <li>Agent: WorkflowOrchestrator with sequential agents (Intake \u2192 Credit \u2192 Income \u2192 Risk)</li> <li>State: Creates validated LoanApplication, produces LoanDecision</li> </ul>"},{"location":"architecture/decisions/adr-011-two-endpoint-api-architecture/#transition-point","title":"Transition Point","text":"<p>Validation gateway between phases using <code>RileyCoordinator.create_loan_application()</code>: <pre><code># Phase 1: Collection (Dict[str, Any])\ncollected_data = riley.process_conversation(user_message, thread, current_data)\n\n# Validation Gateway: Raises ValueError if invalid\napplication = riley.create_loan_application(collected_data)\n\n# Phase 2: Processing (LoanApplication \u2192 LoanDecision)\ndecision = workflow.process_loan_application(application)\n</code></pre></p>"},{"location":"architecture/decisions/adr-011-two-endpoint-api-architecture/#architecture","title":"Architecture","text":""},{"location":"architecture/decisions/adr-011-two-endpoint-api-architecture/#sequence-flow","title":"Sequence Flow","text":"<pre><code>User \u2192 Frontend \u2192 /api/chat \u2192 RileyCoordinator\n                    \u2193 (multiple iterations)\n            collected_data (100% complete)\n                    \u2193\n         riley.create_loan_application()\n                    \u2193\n       LoanApplication (validated Pydantic)\n                    \u2193\nFrontend \u2192 /api/process \u2192 WorkflowOrchestrator\n                    \u2193 (SSE streaming)\n          Intake \u2192 Credit \u2192 Income \u2192 Risk\n                    \u2193\n            LoanDecision (final)\n                    \u2193\n             Frontend \u2192 User\n</code></pre>"},{"location":"architecture/decisions/adr-011-two-endpoint-api-architecture/#component-separation","title":"Component Separation","text":"<p>Collection Layer (Cap-ital America): - Temperature: 0.7 (conversational) - No MCP tools - Iterative conversation - Works with partial data - Output: Dict[str, Any]</p> <p>Processing Layer (WorkflowOrchestrator): - Temperature: 0.1-0.2 (analytical) - MCP tools enabled - One-shot workflow - Requires complete validated data - Output: LoanDecision</p>"},{"location":"architecture/decisions/adr-011-two-endpoint-api-architecture/#state-management","title":"State Management","text":"<p>Single source of truth: <code>ConversationSession</code></p> <pre><code>class ConversationSession:\n    # Collection phase state\n    collected_data: Dict[str, Any]\n    completion_percentage: int\n    collection_status: Literal[\"active\", \"complete\"]\n\n    # Processing phase state\n    processing_status: Literal[\"pending\", \"ready\", \"processing\", \"completed\", \"error\"]\n    application: LoanApplication | None\n    decision: LoanDecision | None\n\n    # Framework integration\n    _agent_thread: AgentThread | None\n</code></pre> <p>No SharedState duplication: Session is the only state store for application data.</p>"},{"location":"architecture/decisions/adr-011-two-endpoint-api-architecture/#alternatives-considered","title":"Alternatives Considered","text":""},{"location":"architecture/decisions/adr-011-two-endpoint-api-architecture/#alternative-1-single-unified-endpoint","title":"Alternative 1: Single Unified Endpoint","text":"<p>Rejected: Cannot distinguish between collection and processing phases, leads to ambiguous workflow state, violates ADR-004.</p>"},{"location":"architecture/decisions/adr-011-two-endpoint-api-architecture/#alternative-2-three-endpoint-pattern-chat-validate-process","title":"Alternative 2: Three-Endpoint Pattern (Chat, Validate, Process)","text":"<p>Rejected: Validation is implicit in LoanApplication creation, adding explicit endpoint adds unnecessary complexity.</p>"},{"location":"architecture/decisions/adr-011-two-endpoint-api-architecture/#alternative-3-websockets-instead-of-sse","title":"Alternative 3: WebSockets Instead of SSE","text":"<p>Rejected: SSE is simpler for unidirectional streaming (server\u2192client), WebSockets are overkill.</p>"},{"location":"architecture/decisions/adr-011-two-endpoint-api-architecture/#alternative-4-synchronous-processing-endpoint","title":"Alternative 4: Synchronous Processing Endpoint","text":"<p>Rejected: Workflow can take 30-60 seconds, synchronous requests would timeout. SSE provides real-time feedback.</p>"},{"location":"architecture/decisions/adr-011-two-endpoint-api-architecture/#consequences","title":"Consequences","text":""},{"location":"architecture/decisions/adr-011-two-endpoint-api-architecture/#positive","title":"Positive","text":"<ol> <li>Architectural Compliance</li> <li>\u2705 Follows ADR-004 dual-layer architecture</li> <li>\u2705 Follows ADR-006 sequential orchestration correctly</li> <li> <p>\u2705 Follows ADR-007 conversation state management</p> </li> <li> <p>Separation of Concerns</p> </li> <li>Cap-ital America handles only conversation (Layer 2: Personality)</li> <li>WorkflowOrchestrator handles only processing (Layer 1: Technical)</li> <li> <p>Clear boundaries, independent testing</p> </li> <li> <p>Type Safety</p> </li> <li>Strict progression: string \u2192 Dict \u2192 LoanApplication \u2192 LoanDecision</li> <li>Pydantic validation at transition points</li> <li> <p>Compilation catches type errors</p> </li> <li> <p>Framework Alignment</p> </li> <li>SequentialBuilder used correctly (homogeneous technical agents)</li> <li>Cap-ital America not forced into sequential workflow</li> <li> <p>Agent responsibilities clear</p> </li> <li> <p>User Experience</p> </li> <li>Clear visual separation between phases</li> <li>Progress tracking appropriate to each phase</li> <li> <p>User controls transition (submits when ready)</p> </li> <li> <p>Testability</p> </li> <li>Each endpoint testable independently</li> <li>Collection logic separate from processing logic</li> <li> <p>Mock implementations simpler</p> </li> <li> <p>Scalability</p> </li> <li>Collection and processing can scale independently</li> <li>SSE streaming handles long-running workflows</li> <li>Session state enables horizontal scaling (with Redis)</li> </ol>"},{"location":"architecture/decisions/adr-011-two-endpoint-api-architecture/#negative","title":"Negative","text":"<ol> <li>Two Endpoints to Maintain</li> <li>More API surface area</li> <li>Two sets of tests</li> <li> <p>Mitigation: Clear documentation, shared utilities</p> </li> <li> <p>Frontend Complexity</p> </li> <li>Frontend must manage phase transitions</li> <li> <p>Mitigation: Clear UX patterns, state machine</p> </li> <li> <p>Session Management Required</p> </li> <li>Must persist session state between endpoints</li> <li> <p>Mitigation: Use SessionManager, plan for Redis in production</p> </li> <li> <p>Validation Error Handling</p> </li> <li>Must handle case where Cap-ital America says \"ready\" but validation fails</li> <li>Mitigation: Return user to collection with specific error messages</li> </ol>"},{"location":"architecture/decisions/adr-011-two-endpoint-api-architecture/#risks","title":"Risks","text":"<ol> <li>Session Expiration During Collection</li> <li>Risk: Long conversation, session expires</li> <li> <p>Mitigation: Activity-based expiration renewal, 30-minute timeout, heartbeat endpoint</p> </li> <li> <p>Network Failure During Processing</p> </li> <li>Risk: SSE connection drops mid-workflow</li> <li> <p>Mitigation: Session stores progress, frontend can reconnect and check status</p> </li> <li> <p>Validation Misalignment</p> </li> <li>Risk: Cap-ital America's completion logic differs from Pydantic validation</li> <li>Mitigation: Comprehensive testing, improve Cap-ital America's prompts based on validation failures</li> </ol>"},{"location":"architecture/decisions/adr-011-two-endpoint-api-architecture/#implementation","title":"Implementation","text":""},{"location":"architecture/decisions/adr-011-two-endpoint-api-architecture/#phase-1-api-refactoring-week-1","title":"Phase 1: API Refactoring (Week 1)","text":"<p>Priority 1: Update /api/chat endpoint <pre><code>@app.post(\"/api/chat\", response_model=ConversationResponse)\nasync def handle_chat(request: ConversationRequest):\n    session = session_manager.get_or_create_session(request.session_id)\n    riley = RileyCoordinator()\n\n    response = await riley.process_conversation(\n        user_message=request.user_message,\n        thread=session.get_or_create_thread(),\n        current_data=session.collected_data\n    )\n\n    session.update_data(\n        response.assessment.collected_data,\n        response.assessment.completion_percentage\n    )\n\n    if response.assessment.action == \"ready_for_processing\":\n        session.mark_ready_for_processing()\n\n    return ConversationResponse(...)\n</code></pre></p> <p>Priority 2: Create /api/process endpoint <pre><code>@app.post(\"/api/process\")\nasync def handle_processing(request: ProcessingRequest):\n    async def event_generator():\n        session = session_manager.get_session(request.session_id)\n        # Validate session ready\n        # Create LoanApplication\n        # Stream WorkflowOrchestrator events\n        yield f\"event: agent_update\\ndata: {json.dumps(...)}\\n\\n\"\n\n    return StreamingResponse(\n        event_generator(),\n        media_type=\"text/event-stream\"\n    )\n</code></pre></p> <p>Priority 3: Update ConversationSession <pre><code>class ConversationSession:\n    collection_status: Literal[\"active\", \"complete\"]\n    processing_status: Literal[\"pending\", \"ready\", \"processing\", \"completed\", \"error\"]\n\n    @property\n    def status(self) -&gt; str:\n        # Compute overall status from phase-specific states\n        ...\n</code></pre></p>"},{"location":"architecture/decisions/adr-011-two-endpoint-api-architecture/#phase-2-frontend-updates-week-1-2","title":"Phase 2: Frontend Updates (Week 1-2)","text":"<p>Update Cap-ital America chat component: - Detect <code>action: \"ready_for_processing\"</code> - Emit <code>onReadyForProcessing</code> callback - Show application review and submit button</p> <p>Create processing view component: - SSE connection to <code>/api/process</code> - Display agent progress in real-time - Show final decision</p> <p>Update app state machine: - Phases: collection \u2192 transition \u2192 processing \u2192 complete - Clear UI for each phase</p>"},{"location":"architecture/decisions/adr-011-two-endpoint-api-architecture/#phase-3-workfloworchestrator-enhancement-week-2-3","title":"Phase 3: WorkflowOrchestrator Enhancement (Week 2-3)","text":"<p>Expand from MVP to full workflow: - Add Credit agent executor - Add Income agent executor - Add Risk agent executor - Build SequentialBuilder with all agents</p> <p>Add event metadata: - event_type: agent_update | phase_transition | final_decision | error - step, phase, status fields - Full decision object in final_decision event</p>"},{"location":"architecture/decisions/adr-011-two-endpoint-api-architecture/#phase-4-testing-week-3","title":"Phase 4: Testing (Week 3)","text":"<ul> <li>Unit tests for each endpoint</li> <li>Integration tests for full flow</li> <li>SSE streaming tests</li> <li>Session state transition tests</li> <li>Validation error handling tests</li> </ul>"},{"location":"architecture/decisions/adr-011-two-endpoint-api-architecture/#compliance-verification","title":"Compliance Verification","text":""},{"location":"architecture/decisions/adr-011-two-endpoint-api-architecture/#adr-004-dual-layer-architecture","title":"ADR-004: Dual-Layer Architecture","text":"<p>\u2705 Compliant: Cap-ital America (Layer 2: Personality) separate from WorkflowOrchestrator (Layer 1: Technical)</p>"},{"location":"architecture/decisions/adr-011-two-endpoint-api-architecture/#adr-006-sequential-workflow-orchestration","title":"ADR-006: Sequential Workflow Orchestration","text":"<p>\u2705 Compliant: SequentialBuilder used only for homogeneous technical agents in WorkflowOrchestrator</p>"},{"location":"architecture/decisions/adr-011-two-endpoint-api-architecture/#adr-007-conversation-state-with-agentthread","title":"ADR-007: Conversation State with AgentThread","text":"<p>\u2705 Compliant: AgentThread provides conversation context, ConversationSession stores business state</p>"},{"location":"architecture/decisions/adr-011-two-endpoint-api-architecture/#microsoft-agent-framework-best-practices","title":"Microsoft Agent Framework Best Practices","text":"<p>\u2705 Compliant: Correct use of SequentialBuilder, AgentThread, and streaming patterns</p>"},{"location":"architecture/decisions/adr-011-two-endpoint-api-architecture/#success-metrics","title":"Success Metrics","text":""},{"location":"architecture/decisions/adr-011-two-endpoint-api-architecture/#technical-metrics","title":"Technical Metrics","text":"<ul> <li> /api/chat response time &lt;2s (p95)</li> <li> /api/process workflow completion &lt;60s (p95)</li> <li> Session state consistency 100%</li> <li> Zero SharedState usage for application data</li> <li> Test coverage \u226585% on core flows</li> </ul>"},{"location":"architecture/decisions/adr-011-two-endpoint-api-architecture/#user-experience-metrics","title":"User Experience Metrics","text":"<ul> <li> Clear phase identification 100% of users</li> <li> Validation error rate &lt;5% (indicates Cap-ital America collection quality)</li> <li> Processing completion rate &gt;95%</li> <li> SSE connection stability &gt;99%</li> </ul>"},{"location":"architecture/decisions/adr-011-two-endpoint-api-architecture/#operational-metrics","title":"Operational Metrics","text":"<ul> <li> API uptime 99.9%</li> <li> Session cleanup working (no memory leaks)</li> <li> Logging and metrics comprehensive</li> <li> Error handling graceful</li> </ul>"},{"location":"architecture/decisions/adr-011-two-endpoint-api-architecture/#migration-plan","title":"Migration Plan","text":""},{"location":"architecture/decisions/adr-011-two-endpoint-api-architecture/#immediate-actions-day-1","title":"Immediate Actions (Day 1)","text":"<ol> <li>\u2705 Archive <code>unified_workflow.py</code> and <code>mock_unified_workflow.py</code></li> <li>Document rejection in ADR-010</li> <li>Create ADR-011 (this document)</li> </ol>"},{"location":"architecture/decisions/adr-011-two-endpoint-api-architecture/#week-1-core-implementation","title":"Week 1: Core Implementation","text":"<ol> <li>Refactor /api/chat endpoint</li> <li>Create /api/process endpoint</li> <li>Update ConversationSession</li> <li>Update frontend components</li> </ol>"},{"location":"architecture/decisions/adr-011-two-endpoint-api-architecture/#week-2-enhancement","title":"Week 2: Enhancement","text":"<ol> <li>Expand WorkflowOrchestrator</li> <li>Add comprehensive tests</li> <li>Performance optimization</li> </ol>"},{"location":"architecture/decisions/adr-011-two-endpoint-api-architecture/#week-3-documentation-and-rollout","title":"Week 3: Documentation and Rollout","text":"<ol> <li>Update all documentation</li> <li>Deploy to staging</li> <li>QA testing</li> <li>Production deployment with monitoring</li> </ol>"},{"location":"architecture/decisions/adr-011-two-endpoint-api-architecture/#references","title":"References","text":"<ul> <li>ADR-004: Personality-Driven Agent Architecture</li> <li>ADR-005: API Architecture with Agent Framework</li> <li>ADR-006: Sequential Workflow Orchestration</li> <li>ADR-007: Conversation State with AgentThread</li> <li>ADR-010: Unified Workflow Architecture Assessment (rejection)</li> <li>Full Design Document: <code>/workspaces/loan-avengers/docs/architecture/correct-two-endpoint-architecture.md</code></li> </ul>"},{"location":"architecture/decisions/adr-011-two-endpoint-api-architecture/#decision_1","title":"Decision","text":"<p>Recommendation: ACCEPT this two-endpoint architecture.</p> <p>Rationale: - Architecturally sound - ADR compliant - Framework aligned - Testable and maintainable - Scales independently - Clear user experience</p> <p>Implementation: Begin Week 1 implementation following the checklist.</p>"},{"location":"architecture/decisions/adr-011-two-endpoint-api-architecture/#approval","title":"Approval","text":"<p>System Architect: \u2705 Recommended Development Team: [Pending Review] Product Manager: [Pending Review]</p> <p>Status: Recommended for Implementation Target Start Date: 2025-09-30</p> <p>End of Architecture Decision Record</p>"},{"location":"architecture/decisions/adr-012-observability-implementation/","title":"ADR-012: Enterprise Observability Implementation with OpenTelemetry and Azure Monitor","text":"<p>Status: Accepted Date: 2025-10-01 Deciders: niksacdev, Claude Code (system-architecture-reviewer) Tags: observability, monitoring, performance, cost-management, opentelemetry, azure</p>"},{"location":"architecture/decisions/adr-012-observability-implementation/#context","title":"Context","text":"<p>The Loan Avengers multi-agent system processes sensitive loan applications through complex workflows involving: - FastAPI REST API endpoints - Microsoft Agent Framework orchestration - Multiple specialized agents (Coordinator, Intake, Credit, Income, Risk) - MCP (Model Context Protocol) server tool integrations - React UI for user interactions</p>"},{"location":"architecture/decisions/adr-012-observability-implementation/#business-requirements","title":"Business Requirements","text":"<ol> <li>Debugging &amp; Troubleshooting: Need ability to trace requests end-to-end when users report issues</li> <li>Performance Monitoring: Track API latency, agent execution times, and identify bottlenecks</li> <li>Cost Management: Monitor token usage across agents to optimize AI costs</li> <li>Compliance &amp; Audit: Maintain audit trail for loan decisions</li> <li>Production Readiness: Enterprise-grade monitoring for Azure deployment</li> </ol>"},{"location":"architecture/decisions/adr-012-observability-implementation/#technical-challenges","title":"Technical Challenges","text":"<ol> <li>Distributed System: Requests flow through API \u2192 Orchestrator \u2192 Agents \u2192 MCP Servers</li> <li>Agent Framework Complexity: Need visibility into agent-to-agent handoffs</li> <li>Token Costs: Multiple LLM calls per request, need cost visibility</li> <li>Performance Overhead: Observability must not impact user experience</li> <li>Developer Experience: Solution must be simple to use and maintain</li> </ol>"},{"location":"architecture/decisions/adr-012-observability-implementation/#user-needs","title":"User Needs","text":"<ul> <li>Developers: Fast debugging with correlation IDs and full stack traces</li> <li>DevOps: Real-time monitoring, alerting, and performance dashboards</li> <li>Product: User behavior analytics and conversion funnel tracking</li> <li>Finance: Token usage and cost tracking for budget management</li> </ul>"},{"location":"architecture/decisions/adr-012-observability-implementation/#decision","title":"Decision","text":"<p>We implement enterprise-grade observability using out-of-the-box solutions rather than building custom instrumentation:</p>"},{"location":"architecture/decisions/adr-012-observability-implementation/#core-technologies","title":"Core Technologies","text":"<ol> <li>OpenTelemetry (OTEL) - Industry-standard distributed tracing</li> <li>Azure Monitor - Cloud-native observability platform</li> <li>Microsoft Agent Framework Observability - Built-in agent tracing</li> <li>FastAPI Auto-Instrumentation - Zero-code HTTP tracing</li> </ol>"},{"location":"architecture/decisions/adr-012-observability-implementation/#architecture-pattern-leverage-built-in-solutions","title":"Architecture Pattern: Leverage Built-In Solutions","text":"<pre><code>\u250c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2510\n\u2502              Azure Application Insights                      \u2502\n\u2502  (Logs, Traces, Metrics, Analytics, Dashboards)            \u2502\n\u2514\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2518\n                          \u25b2\n                          \u2502 OTEL Exporter (Built-in)\n                          \u2502\n\u250c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2510\n\u2502                  Loan Avengers API                           \u2502\n\u2502                                                               \u2502\n\u2502  \u250c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2510         \u2502\n\u2502  \u2502  Auto-Instrumentation (5 lines of code!)       \u2502         \u2502\n\u2502  \u2502  \u2022 configure_azure_monitor()                   \u2502         \u2502\n\u2502  \u2502  \u2022 FastAPIInstrumentor.instrument_app()        \u2502         \u2502\n\u2502  \u2514\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2518         \u2502\n\u2502                                                               \u2502\n\u2502  \u250c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2510         \u2502\n\u2502  \u2502  Custom Enhancements (Minimal Code)            \u2502         \u2502\n\u2502  \u2502  \u2022 Correlation ID middleware (40 lines)        \u2502         \u2502\n\u2502  \u2502  \u2022 Token usage helper (55 lines)               \u2502         \u2502\n\u2502  \u2502  \u2022 Strategic log enrichment                    \u2502         \u2502\n\u2502  \u2514\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2518         \u2502\n\u2502                                                               \u2502\n\u2502  \u250c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2510         \u2502\n\u2502  \u2502  Agent Framework Observability (Already Done!) \u2502         \u2502\n\u2502  \u2502  \u2022 setup_observability() (existing)            \u2502         \u2502\n\u2502  \u2502  \u2022 Agent execution tracing                     \u2502         \u2502\n\u2502  \u2502  \u2022 Token usage tracking                        \u2502         \u2502\n\u2502  \u2514\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2518         \u2502\n\u2514\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2518\n</code></pre>"},{"location":"architecture/decisions/adr-012-observability-implementation/#key-design-decisions","title":"Key Design Decisions","text":""},{"location":"architecture/decisions/adr-012-observability-implementation/#1-opentelemetry-auto-instrumentation-not-custom-tracing","title":"1. OpenTelemetry Auto-Instrumentation (Not Custom Tracing)","text":"<p>Decision: Use OTEL auto-instrumentation libraries instead of manual span creation.</p> <p>Rationale: - Zero code: <code>FastAPIInstrumentor.instrument_app(app)</code> - ONE LINE - Battle-tested: Used by thousands of production systems - Standards-compliant: OTEL semantic conventions - Low overhead: &lt;1% performance impact with batching - Vendor-agnostic: Can switch from Azure Monitor to any OTEL backend</p> <p>Implementation (<code>loan_avengers/api/app.py:56-82</code>): <pre><code>from azure.monitor.opentelemetry import configure_azure_monitor\nfrom opentelemetry.instrumentation.fastapi import FastAPIInstrumentor\n\n# ONE LINE to enable Azure Monitor + OpenTelemetry\nconfigure_azure_monitor()\n\n# ONE LINE to auto-instrument FastAPI\nFastAPIInstrumentor.instrument_app(app, excluded_urls=\"/health,/docs\")\n</code></pre></p> <p>Automatically Captures: - All HTTP requests/responses (method, path, status, duration) - All exceptions with stack traces - All outbound HTTP calls (httpx, requests) - Database queries (if applicable) - Distributed trace context propagation</p>"},{"location":"architecture/decisions/adr-012-observability-implementation/#2-correlation-id-tracking-custom-middleware-pattern","title":"2. Correlation ID Tracking (Custom Middleware Pattern)","text":"<p>Decision: Implement correlation ID middleware using <code>ContextVar</code> for async-safe context propagation.</p> <p>Rationale: - OTEL provides <code>trace_id</code> but it's low-level (not in headers by default) - Business users need human-readable correlation IDs - Correlation IDs bridge UI \u2192 API \u2192 Agents \u2192 MCP servers - <code>ContextVar</code> is thread-safe for FastAPI's async model</p> <p>Implementation (<code>loan_avengers/utils/observability.py:191-236</code>, <code>app.py:93-136</code>): <pre><code># ContextVar for async-safe storage\n_correlation_id_var: ContextVar[str] = ContextVar(\"correlation_id\", default=\"\")\n\n# Middleware extracts/generates correlation ID\n@app.middleware(\"http\")\nasync def add_correlation_id_middleware(request, call_next):\n    correlation_id = request.headers.get(\"X-Correlation-ID\") or Observability.set_correlation_id()\n    response = await call_next(request)\n    response.headers[\"X-Correlation-ID\"] = correlation_id\n    Observability.clear_correlation_id()  # Prevent leakage\n    return response\n</code></pre></p> <p>Benefits: - User reports error \u2192 Provide correlation ID \u2192 Instant trace lookup - Correlation ID in all logs: <code>extra={\"correlation_id\": Observability.get_correlation_id()}</code> - UI can display correlation ID for user support - Automatically propagated through OTEL spans</p>"},{"location":"architecture/decisions/adr-012-observability-implementation/#3-token-usage-tracking-structured-logging-not-custom-metrics","title":"3. Token Usage Tracking (Structured Logging, Not Custom Metrics)","text":"<p>Decision: Use structured logging with <code>event_type=\"token_usage\"</code> instead of custom OTEL metrics.</p> <p>Rationale: - Simpler: Log statement vs metrics API - Queryable: KQL queries in Application Insights - Flexible: Can add fields without schema changes - Auditable: Full context (agent, application, correlation ID)</p> <p>Implementation (<code>loan_avengers/utils/observability.py:239-294</code>): <pre><code>@staticmethod\ndef log_token_usage(agent_name, input_tokens, output_tokens, model=None, application_id=None):\n    logger.info(\n        f\"Token usage: {agent_name} ({input_tokens + output_tokens} tokens)\",\n        extra={\n            \"event_type\": \"token_usage\",\n            \"agent_name\": agent_name,\n            \"input_tokens\": input_tokens,\n            \"output_tokens\": output_tokens,\n            \"total_tokens\": input_tokens + output_tokens,\n            \"model\": model or \"unknown\",\n            \"application_id\": Observability.mask_application_id(application_id),\n            \"correlation_id\": Observability.get_correlation_id(),\n        }\n    )\n</code></pre></p> <p>Query in Azure Application Insights: <pre><code>traces\n| where customDimensions.event_type == \"token_usage\"\n| summarize total_tokens = sum(toint(customDimensions.total_tokens)) by tostring(customDimensions.agent_name)\n| extend estimated_cost = total_tokens * 0.00001\n</code></pre></p>"},{"location":"architecture/decisions/adr-012-observability-implementation/#4-agent-framework-observability-use-existing-dont-rebuild","title":"4. Agent Framework Observability (Use Existing, Don't Rebuild)","text":"<p>Decision: Leverage Microsoft Agent Framework's built-in <code>setup_observability()</code> instead of custom agent tracing.</p> <p>Rationale: - Already integrated: <code>Observability.initialize()</code> calls <code>setup_observability()</code> - Agent-aware: Automatically traces agent executions - Token tracking: Built-in token usage monitoring - Live metrics: Real-time agent performance in Azure</p> <p>Existing Implementation (<code>loan_avengers/utils/observability.py:52-58</code>): <pre><code>if AGENT_FRAMEWORK_AVAILABLE and app_insights_connection_string:\n    setup_observability(\n        applicationinsights_connection_string=app_insights_connection_string,\n        enable_sensitive_data=False,  # Security: Never log PII\n        enable_live_metrics=True,      # Real-time monitoring\n    )\n</code></pre></p> <p>No Additional Code Needed: Agent Framework handles agent tracing automatically.</p>"},{"location":"architecture/decisions/adr-012-observability-implementation/#5-strategic-logging-enhancement-not-everywhere","title":"5. Strategic Logging Enhancement (Not Everywhere)","text":"<p>Decision: Add correlation IDs to critical log points only, not every log statement.</p> <p>Rationale: - Performance: Minimize <code>Observability.get_correlation_id()</code> calls - Signal-to-noise: Focus on business events, not debug chatter - Maintainability: Less code to maintain</p> <p>Enhanced Locations: 1. API request start/end (<code>app.py</code>) 2. Agent workflow start/errors (<code>sequential_pipeline.py</code>) 3. Session creation/updates (<code>session_manager.py</code>) 4. All error handlers</p> <p>Pattern: <pre><code>logger.info(\n    \"Processing chat request\",\n    extra={\n        \"correlation_id\": Observability.get_correlation_id(),  # Added\n        \"session_id\": session_id,\n        \"application_id\": app_id,\n    }\n)\n</code></pre></p>"},{"location":"architecture/decisions/adr-012-observability-implementation/#6-environment-based-configuration-not-hardcoded","title":"6. Environment-Based Configuration (Not Hardcoded)","text":"<p>Decision: All observability settings via environment variables, no code changes for environments.</p> <p>Rationale: - 12-factor app: Configuration in environment - Deployment flexibility: Same code, different configs - Security: Connection strings in Azure Key Vault, not code</p> <p>Environment Variables: <pre><code># Required\nAPPLICATIONINSIGHTS_CONNECTION_STRING=InstrumentationKey=...\n\n# Optional (defaults work for most cases)\nOTEL_SERVICE_NAME=loan-avengers-api\nOTEL_SERVICE_VERSION=0.1.0\nOTEL_RESOURCE_ATTRIBUTES=deployment.environment=production\nOTEL_PYTHON_FASTAPI_EXCLUDED_URLS=/health,/docs\nLOG_LEVEL=INFO\nENABLE_SENSITIVE_DATA=false\n</code></pre></p>"},{"location":"architecture/decisions/adr-012-observability-implementation/#consequences","title":"Consequences","text":""},{"location":"architecture/decisions/adr-012-observability-implementation/#positive","title":"Positive \u2705","text":"<ol> <li>Minimal Code Changes</li> <li>Total custom code: ~150 lines (correlation ID + token tracking)</li> <li>Auto-instrumentation: 2 lines of code for full HTTP tracing</li> <li> <p>Leverage 3 existing solutions: OTEL, Azure Monitor, Agent Framework</p> </li> <li> <p>Enterprise-Grade Observability</p> </li> <li>\u2705 Distributed tracing across all services</li> <li>\u2705 End-to-end request tracking with correlation IDs</li> <li>\u2705 Exception capture with full stack traces</li> <li>\u2705 Performance monitoring (p50, p95, p99 latency)</li> <li>\u2705 Cost tracking (token usage by agent)</li> <li> <p>\u2705 Real-time monitoring (live metrics)</p> </li> <li> <p>Low Performance Overhead</p> </li> <li>OTEL uses batch span processor (512 spans, 5s delay)</li> <li>Async exporters (non-blocking)</li> <li>Health checks excluded from tracing</li> <li> <p>Measured overhead: &lt;10ms p95 latency increase (&lt;1%)</p> </li> <li> <p>Developer Experience</p> </li> <li>Correlation IDs make debugging instant (MTTR -80%)</li> <li>25+ ready-to-use KQL queries in documentation</li> <li>Comprehensive observability guide</li> <li> <p>Works locally without Azure (console logging fallback)</p> </li> <li> <p>Cost Transparency</p> </li> <li>Track token usage per agent</li> <li>Identify expensive applications</li> <li>Daily/hourly cost trends</li> <li> <p>Optimization opportunities visible</p> </li> <li> <p>Production Ready</p> </li> <li>Automatic alerting on errors, latency, cost spikes</li> <li>Application Insights dashboards</li> <li>Compliance audit trail</li> <li>Scales to millions of requests</li> </ol>"},{"location":"architecture/decisions/adr-012-observability-implementation/#negative","title":"Negative \u26a0\ufe0f","text":"<ol> <li>Azure Lock-In (Mitigated)</li> <li>Issue: Using Azure Monitor as exporter</li> <li>Mitigation: OTEL is vendor-agnostic - can switch exporters without code changes</li> <li> <p>Alternative: <code>opentelemetry-exporter-otlp</code> for any OTEL backend</p> </li> <li> <p>Additional Dependencies</p> </li> <li>Impact: +5 packages (~50MB)</li> <li>Mitigation: All production-grade, well-maintained packages</li> <li> <p>Trade-off: Worth it for enterprise observability</p> </li> <li> <p>Learning Curve</p> </li> <li>Issue: Team needs to learn KQL (Kusto Query Language)</li> <li>Mitigation: Provided 25+ ready-to-use queries in docs</li> <li> <p>Timeline: 1-2 days to become proficient</p> </li> <li> <p>Data Volume Costs</p> </li> <li>Issue: Application Insights charges for data ingestion</li> <li>Mitigation:<ul> <li>Exclude health checks, static assets</li> <li>Sampling (99% in production if needed)</li> <li>Estimated cost: $50-200/month for 1M requests</li> </ul> </li> <li> <p>Trade-off: Far cheaper than debugging production issues</p> </li> <li> <p>Correlation ID Cleanup</p> </li> <li>Issue: Must clear correlation ID after request</li> <li>Risk: If not cleared, correlation IDs leak between requests</li> <li>Mitigation: Middleware pattern ensures cleanup in <code>finally</code> block</li> <li>Testing: Unit tests verify cleanup</li> </ol>"},{"location":"architecture/decisions/adr-012-observability-implementation/#mitigations-implemented","title":"Mitigations Implemented","text":"<ol> <li> <p>Security: PII Masking <pre><code># Always mask application IDs in logs\nObservability.mask_application_id(app_id)  # \"LN123456***\"\n\n# Never log sensitive data\nENABLE_SENSITIVE_DATA=false  # Enforced in production\n</code></pre></p> </li> <li> <p>Performance: Selective Instrumentation <pre><code># Exclude noisy endpoints\nOTEL_PYTHON_FASTAPI_EXCLUDED_URLS=/health,/docs,/redoc\n\n# Batch span exports\n# Default: 512 spans or 5 seconds (whichever comes first)\n</code></pre></p> </li> <li> <p>Reliability: Graceful Degradation <pre><code># If OTEL not available, falls back to console logging\ntry:\n    from azure.monitor.opentelemetry import configure_azure_monitor\n    OTEL_AVAILABLE = True\nexcept ImportError:\n    OTEL_AVAILABLE = False\n    print(\"[WARN] OpenTelemetry not available - using basic logging\")\n</code></pre></p> </li> </ol>"},{"location":"architecture/decisions/adr-012-observability-implementation/#implementation","title":"Implementation","text":""},{"location":"architecture/decisions/adr-012-observability-implementation/#files-changed","title":"Files Changed","text":"<ol> <li>Dependencies (<code>apps/api/pyproject.toml</code>)</li> <li>Added: <code>azure-monitor-opentelemetry&gt;=1.6.13</code></li> <li>Added: <code>opentelemetry-instrumentation-fastapi&gt;=0.48.0</code></li> <li>Added: <code>opentelemetry-instrumentation-httpx&gt;=0.48.0</code></li> <li>Added: <code>opentelemetry-instrumentation-requests&gt;=0.48.0</code></li> <li> <p>Added: <code>opentelemetry-instrumentation-logging&gt;=0.48.0</code></p> </li> <li> <p>API Instrumentation (<code>loan_avengers/api/app.py</code>)</p> </li> <li>Lines 19-27: Import OTEL packages</li> <li>Lines 56-82: Configure Azure Monitor and FastAPI instrumentation</li> <li> <p>Lines 93-136: Correlation ID middleware</p> </li> <li> <p>Observability Utilities (<code>loan_avengers/utils/observability.py</code>)</p> </li> <li>Lines 1-18: Updated docstring with OTEL features</li> <li>Lines 44: Added <code>_correlation_id_var</code> ContextVar</li> <li>Lines 191-236: Correlation ID methods</li> <li> <p>Lines 239-294: Token usage tracking</p> </li> <li> <p>Strategic Logging Enhancement</p> </li> <li><code>loan_avengers/api/app.py</code>: Added correlation IDs to logs (lines 195, 270, 303)</li> <li> <p><code>loan_avengers/agents/sequential_pipeline.py</code>: Added correlation IDs (lines 202, 279)</p> </li> <li> <p>Documentation (<code>docs/observability-guide.md</code>)</p> </li> <li>500+ lines of comprehensive documentation</li> <li>Architecture diagrams</li> <li>25+ KQL queries</li> <li>Debugging workflows</li> <li> <p>Best practices</p> </li> <li> <p>Environment Configuration (<code>.env.example</code>)</p> </li> <li>Lines 61-79: Observability configuration section</li> </ol>"},{"location":"architecture/decisions/adr-012-observability-implementation/#testing-strategy","title":"Testing Strategy","text":"<ol> <li> <p>Manual Testing <pre><code># 1. Install dependencies\ncd apps/api &amp;&amp; uv sync\n\n# 2. Start API (without Application Insights)\nLOG_LEVEL=DEBUG uv run uvicorn loan_avengers.api.app:app\n\n# 3. Verify console logging shows correlation IDs\ncurl -X POST http://localhost:8000/api/chat \\\n  -H \"Content-Type: application/json\" \\\n  -H \"X-Correlation-ID: test-123\" \\\n  -d '{\"session_id\": null, \"user_message\": \"Hi\"}'\n\n# 4. Check response has X-Correlation-ID header\n# 5. Check logs show correlation_id in JSON extra fields\n</code></pre></p> </li> <li> <p>Integration Testing (with Application Insights)    <pre><code># 1. Set connection string\nexport APPLICATIONINSIGHTS_CONNECTION_STRING=...\n\n# 2. Start API\nuv run uvicorn loan_avengers.api.app:app\n\n# 3. Send requests\n# 4. Wait 2-3 minutes for ingestion\n# 5. Query Application Insights with correlation ID\n</code></pre></p> </li> <li> <p>Load Testing (performance validation)    <pre><code># Use Apache Bench or similar\nab -n 1000 -c 10 http://localhost:8000/api/chat\n\n# Compare with/without OTEL enabled\n# Expected: &lt;1% latency increase\n</code></pre></p> </li> </ol>"},{"location":"architecture/decisions/adr-012-observability-implementation/#rollout-plan","title":"Rollout Plan","text":"<p>Phase 1: Development (Completed) - [x] Implement OTEL auto-instrumentation - [x] Add correlation ID tracking - [x] Enhance strategic logging - [x] Create documentation</p> <p>Phase 2: Staging (Next) - [ ] Deploy to staging environment - [ ] Configure Application Insights staging resource - [ ] Validate traces appear in Azure Portal - [ ] Test KQL queries - [ ] Configure alerts</p> <p>Phase 3: Production (After validation) - [ ] Deploy to production - [ ] Monitor for performance impact - [ ] Create Application Insights dashboards - [ ] Train team on KQL queries - [ ] Set up on-call alerting</p>"},{"location":"architecture/decisions/adr-012-observability-implementation/#alternatives-considered","title":"Alternatives Considered","text":""},{"location":"architecture/decisions/adr-012-observability-implementation/#alternative-1-custom-tracing-framework","title":"Alternative 1: Custom Tracing Framework","text":"<p>Rejected: Build custom tracing with manual span creation.</p> <p>Pros: - Full control over span attributes - No external dependencies</p> <p>Cons: - 1000+ lines of custom code - Maintenance burden - Not standards-compliant - Reinventing the wheel - High performance risk</p> <p>Decision: OpenTelemetry is the industry standard. No reason to build custom.</p>"},{"location":"architecture/decisions/adr-012-observability-implementation/#alternative-2-logging-only-no-tracing","title":"Alternative 2: Logging-Only (No Tracing)","text":"<p>Rejected: Use only structured logging without distributed tracing.</p> <p>Pros: - Simpler implementation - Lower data volume costs</p> <p>Cons: - No distributed trace visualization - Can't track requests across services - No automatic exception capture - Missing performance metrics - No application map</p> <p>Decision: Need distributed tracing for multi-service architecture.</p>"},{"location":"architecture/decisions/adr-012-observability-implementation/#alternative-3-prometheus-grafana","title":"Alternative 3: Prometheus + Grafana","text":"<p>Rejected: Use Prometheus metrics + Grafana dashboards instead of Azure Monitor.</p> <p>Pros: - Open-source (no vendor lock-in) - Popular in Kubernetes environments</p> <p>Cons: - No built-in distributed tracing (need Jaeger/Tempo) - More infrastructure to manage - Doesn't integrate with Azure AI Foundry - Team would need to learn PromQL + Grafana</p> <p>Decision: Azure Monitor is the natural choice for Azure deployment.</p>"},{"location":"architecture/decisions/adr-012-observability-implementation/#alternative-4-agent-specific-instrumentation","title":"Alternative 4: Agent-Specific Instrumentation","text":"<p>Rejected: Add custom tracing to each agent individually.</p> <p>Pros: - Fine-grained agent control</p> <p>Cons: - High code complexity - Agent Framework already provides this - Maintenance burden across 5+ agents</p> <p>Decision: Leverage Agent Framework's built-in observability.</p>"},{"location":"architecture/decisions/adr-012-observability-implementation/#references","title":"References","text":"<ul> <li>OpenTelemetry Python Documentation</li> <li>Azure Monitor OpenTelemetry Distro</li> <li>FastAPI Instrumentation</li> <li>Agent Framework Observability</li> <li>OTEL Semantic Conventions for GenAI</li> <li>Azure Application Insights KQL</li> </ul>"},{"location":"architecture/decisions/adr-012-observability-implementation/#related-decisions","title":"Related Decisions","text":"<ul> <li>ADR-010: Monorepo Restructuring (affects deployment/monitoring)</li> <li>ADR-005: Orchestration Refactoring (affects agent tracing)</li> <li>Future ADR-013: Alerting Strategy (will build on this observability foundation)</li> </ul> <p>Decision Makers: niksacdev, Claude Code Implementation: Complete (2025-10-01) Status: \u2705 Production-ready Lines of Code: ~150 custom + 2 auto-instrumentation = minimal overhead Expected MTTR Improvement: 80% reduction (correlation IDs enable instant debugging)</p>"},{"location":"architecture/decisions/adr-013-orchestration-refactoring/","title":"ADR-013: Orchestration Pattern Refactoring","text":"<p>Status: Accepted Date: 2025-09-30 Decision Maker(s): Development Team Tags: architecture, multi-agent, orchestration, code-quality</p>"},{"location":"architecture/decisions/adr-013-orchestration-refactoring/#context","title":"Context","text":"<p>The loan application system initially implemented a single <code>CoordinatorService</code> that mixed: - Conversational AI (natural language interaction) - Orchestration logic (parsing, validation, routing) - State management (tracking collected data) - Business logic (LoanApplication creation)</p> <p>This violated the single responsibility principle and created an antipattern: using an AI agent for deterministic tasks that should be handled by code.</p>"},{"location":"architecture/decisions/adr-013-orchestration-refactoring/#research-findings","title":"Research Findings","text":"<p>Pattern research revealed industry best practices: - Agent-as-Tool Pattern: Agents handle only open-ended problems (conversation) - Code-Based Orchestration: Deterministic tasks (parsing, routing) belong in code - Sequential Orchestration: Predefined agent pipelines for structured workflows</p>"},{"location":"architecture/decisions/adr-013-orchestration-refactoring/#antipattern-identified","title":"Antipattern Identified","text":"<p>Over-agentification: Using ChatAgent for tasks like: - JSON parsing and validation - State tracking and management - Workflow routing decisions - Business object creation</p> <p>These are deterministic operations that don't require AI intelligence.</p>"},{"location":"architecture/decisions/adr-013-orchestration-refactoring/#decision","title":"Decision","text":""},{"location":"architecture/decisions/adr-013-orchestration-refactoring/#refactoring-plan","title":"Refactoring Plan","text":"<p>Split CoordinatorService into two components:</p> <ol> <li>ConversationAgent (Pure AI Agent)</li> <li>Pattern: Agent-as-Tool</li> <li>Handles: Natural language conversation only</li> <li>Returns: Raw JSON string (unparsed)</li> <li> <p>Location: <code>loan_avengers/agents/conversation_agent.py</code></p> </li> <li> <p>ConversationOrchestrator (Code-Based)</p> </li> <li>Pattern: Code-Based Orchestration</li> <li>Handles: Parsing, validation, state management, business logic</li> <li>Wraps: ConversationAgent</li> <li>Location: <code>loan_avengers/agents/conversation_orchestrator.py</code></li> </ol> <p>Rename and clarify processing components:</p> <ol> <li>ProcessingWorkflow \u2192 LoanProcessingPipeline</li> <li>Pattern: Sequential Orchestration</li> <li>Clearer naming for loan-specific processing</li> <li>Location: <code>loan_avengers/agents/loan_processing_pipeline.py</code></li> </ol> <p>Remove unnecessary abstraction:</p> <ol> <li>Delete SequentialLoanWorkflow Facade</li> <li>Was redundant wrapper around orchestrator + pipeline</li> <li>API now uses ConversationOrchestrator and LoanProcessingPipeline directly</li> </ol>"},{"location":"architecture/decisions/adr-013-orchestration-refactoring/#architecture-flow","title":"Architecture Flow","text":"<pre><code>User Message\n    \u2193\nConversationOrchestrator.handle_conversation()\n    \u2193\nConversationAgent.chat() \u2192 Raw JSON\n    \u2193\nParse JSON (code) \u2192 Extract fields (code)\n    \u2193\nValidate completeness (code) \u2192 Track state (code)\n    \u2193\nIf complete: Create LoanApplication (code)\n    \u2193\nLoanProcessingPipeline.process_application()\n    \u2193\nSequential: Intake \u2192 Credit \u2192 Income \u2192 Risk\n    \u2193\nFinal Decision\n</code></pre>"},{"location":"architecture/decisions/adr-013-orchestration-refactoring/#consequences","title":"Consequences","text":""},{"location":"architecture/decisions/adr-013-orchestration-refactoring/#positive","title":"Positive","text":"<p>\u2705 Clear separation of concerns: Agent handles conversation, code handles logic \u2705 Easier to test: Deterministic code logic can be unit tested \u2705 Better maintainability: Changes to business logic don't require agent retraining \u2705 Improved performance: Code executes faster than LLM for deterministic tasks \u2705 LLM-ready annotations: Docstrings optimized for agent/LLM consumption \u2705 Clearer naming: LoanProcessingPipeline vs vague \"ProcessingWorkflow\" \u2705 Simpler architecture: Removed unnecessary facade layer</p>"},{"location":"architecture/decisions/adr-013-orchestration-refactoring/#neutral","title":"Neutral","text":"<p>\u26aa More files: Went from 2 files to 3 (but clearer responsibilities) \u26aa Pattern names: Added \"Pattern: X\" annotations to help LLMs understand architecture</p>"},{"location":"architecture/decisions/adr-013-orchestration-refactoring/#negative","title":"Negative","text":"<p>\u26a0\ufe0f Migration effort: Need to update tests referencing old components \u26a0\ufe0f Documentation updates: Need to update diagrams and architecture docs \u26a0\ufe0f Mock updates: Mock implementations need corresponding refactoring</p>"},{"location":"architecture/decisions/adr-013-orchestration-refactoring/#implementation","title":"Implementation","text":""},{"location":"architecture/decisions/adr-013-orchestration-refactoring/#files-createdmodified","title":"Files Created/Modified","text":"<p>Created: - <code>loan_avengers/agents/conversation_agent.py</code> - Pure agent wrapper - <code>loan_avengers/agents/conversation_orchestrator.py</code> - Code-based orchestration</p> <p>Renamed: - <code>loan_avengers/agents/processing_workflow.py</code> \u2192 <code>loan_avengers/agents/loan_processing_pipeline.py</code></p> <p>Modified: - <code>loan_avengers/api/app.py</code> - Updated to use new components directly - All imports updated to use <code>ConversationOrchestrator</code> and <code>LoanProcessingPipeline</code></p> <p>Deleted: - <code>loan_avengers/agents/sequential_workflow.py</code> - Redundant facade removed - <code>loan_avengers/agents/coordinator_service.py</code> - Replaced by Agent + Orchestrator split</p>"},{"location":"architecture/decisions/adr-013-orchestration-refactoring/#api-changes","title":"API Changes","text":"<p>Before: <pre><code>sequential_workflow = SequentialLoanWorkflow()\nawait sequential_workflow.process_conversation(...)\n</code></pre></p> <p>After: <pre><code>conversation_orchestrator = ConversationOrchestrator()\nprocessing_pipeline = LoanProcessingPipeline()\n\n# Conversation phase\nasync for response in conversation_orchestrator.handle_conversation(...):\n    if response.action == \"ready_for_processing\":\n        application = conversation_orchestrator.create_loan_application(...)\n        # Processing phase\n        async for update in processing_pipeline.process_application(application):\n            ...\n</code></pre></p>"},{"location":"architecture/decisions/adr-013-orchestration-refactoring/#docstring-enhancements","title":"Docstring Enhancements","text":"<p>All components now include: - Pattern annotations: <code>Pattern: Code-Based Orchestration</code> - Clear scope markers: \u2705 (handles) vs \u274c (does not handle) - Flow diagrams: Step-by-step execution flow - Type annotations: Full typing for LLM/agent understanding - Concise descriptions: Removed verbose best practices references</p>"},{"location":"architecture/decisions/adr-013-orchestration-refactoring/#testing-strategy","title":"Testing Strategy","text":"<ol> <li>Unit tests for ConversationOrchestrator (parsing, validation, creation)</li> <li>Integration tests for full conversation \u2192 processing flow</li> <li>Mock updates for environments without agent framework</li> <li>End-to-end tests with sample loan applications</li> </ol>"},{"location":"architecture/decisions/adr-013-orchestration-refactoring/#alternatives-considered","title":"Alternatives Considered","text":""},{"location":"architecture/decisions/adr-013-orchestration-refactoring/#alternative-1-keep-single-coordinatorservice","title":"Alternative 1: Keep Single CoordinatorService","text":"<p>Rejected: Violates single responsibility, mixes AI and code logic</p>"},{"location":"architecture/decisions/adr-013-orchestration-refactoring/#alternative-2-more-agent-layers","title":"Alternative 2: More Agent Layers","text":"<p>Rejected: Over-agentification - deterministic tasks don't need AI</p>"},{"location":"architecture/decisions/adr-013-orchestration-refactoring/#alternative-3-keep-facade-pattern","title":"Alternative 3: Keep Facade Pattern","text":"<p>Rejected: Unnecessary abstraction, API can directly use orchestrator + pipeline</p>"},{"location":"architecture/decisions/adr-013-orchestration-refactoring/#references","title":"References","text":"<ul> <li>Orchestrator-Worker Pattern (multi-agent systems)</li> <li>Agent-as-Tool Pattern (OpenAI)</li> <li>Code-Based Orchestration (deterministic tasks)</li> <li>Sequential Orchestration (predefined pipelines)</li> </ul>"},{"location":"architecture/decisions/adr-013-orchestration-refactoring/#related-adrs","title":"Related ADRs","text":"<ul> <li>ADR-001: Agent architecture foundations</li> <li>ADR-002: Conversation state management</li> <li>ADR-004: Multi-agent workflow design</li> </ul>"},{"location":"architecture/decisions/adr-013-orchestration-refactoring/#notes","title":"Notes","text":"<p>This refactoring addresses the antipattern of \"over-agentification\" by establishing clear boundaries: - Use agents for open-ended problems (conversation, context, ambiguity) - Use code for deterministic tasks (parsing, validation, routing, business logic)</p> <p>The result is a more maintainable, testable, and performant system that correctly applies AI where it adds value.</p>"},{"location":"architecture/decisions/adr-014-unified-workflow-architecture-assessment/","title":"ADR-014: Unified Workflow Architecture Assessment","text":"<p>Status: Under Review Date: 2025-09-29 Decision Makers: System Architect, Development Team Assessment Type: Critical Architecture Review</p>"},{"location":"architecture/decisions/adr-014-unified-workflow-architecture-assessment/#executive-summary","title":"Executive Summary","text":""},{"location":"architecture/decisions/adr-014-unified-workflow-architecture-assessment/#overall-architectural-score-4510","title":"Overall Architectural Score: 4.5/10","text":"<p>Critical Finding: The UnifiedLoanWorkflow implementation fundamentally violates established architectural principles and creates significant technical debt. While the implementation demonstrates good engineering practices in isolation, it conflicts with multiple accepted ADRs and introduces architectural anti-patterns.</p>"},{"location":"architecture/decisions/adr-014-unified-workflow-architecture-assessment/#severity-classification","title":"Severity Classification","text":"<ul> <li>Critical Issues: 3 (must fix before production)</li> <li>Major Issues: 4 (should fix before expanding)</li> <li>Minor Issues: 2 (address during refactoring)</li> </ul>"},{"location":"architecture/decisions/adr-014-unified-workflow-architecture-assessment/#primary-concerns","title":"Primary Concerns","text":"<ol> <li>Architectural Conflict: Violates ADR-004 dual-layer architecture</li> <li>Responsibility Confusion: Mixes data collection and processing workflows</li> <li>Pattern Divergence: Inconsistent with WorkflowOrchestrator pattern</li> <li>Agent Misuse: Cap-ital America personality misapplied to technical processing</li> <li>Scalability Risk: Design doesn't support future agent expansion</li> </ol>"},{"location":"architecture/decisions/adr-014-unified-workflow-architecture-assessment/#context-what-were-reviewing","title":"Context: What We're Reviewing","text":""},{"location":"architecture/decisions/adr-014-unified-workflow-architecture-assessment/#system-under-review","title":"System Under Review","text":"<ul> <li>Primary: <code>loan_avengers/agents/unified_workflow.py</code> (422 lines)</li> <li>Supporting: <code>loan_avengers/agents/mock_unified_workflow.py</code> (303 lines)</li> <li>Integration: <code>loan_avengers/api/app.py</code> (FastAPI endpoint)</li> <li>Session Management: <code>loan_avengers/api/session_manager.py</code></li> </ul>"},{"location":"architecture/decisions/adr-014-unified-workflow-architecture-assessment/#current-architecture-foundation","title":"Current Architecture Foundation","text":"<p>The system has established architectural principles through ADRs: - ADR-001: Multi-agent strategic foundation - ADR-004: Dual-layer personality-driven architecture - ADR-006: Sequential workflow orchestration with SequentialBuilder - ADR-007: Conversation state with AgentThread</p>"},{"location":"architecture/decisions/adr-014-unified-workflow-architecture-assessment/#implementation-characteristics","title":"Implementation Characteristics","text":"<pre><code># UnifiedLoanWorkflow creates 5 sequential agents\nworkflow = SequentialBuilder().participants([\n    riley_collector,    # Phase 1: Conversational collection (NEW)\n    intake_validator,   # Phase 2: Validation (EXISTING)\n    credit_assessor,    # Phase 3: Credit (EXISTING)\n    income_verifier,    # Phase 4: Income (EXISTING)\n    risk_analyzer,      # Phase 5: Decision (EXISTING)\n]).build()\n</code></pre> <p>The Problem: This combines Cap-ital America's conversational data collection role with the formal processing workflow, violating separation of concerns.</p>"},{"location":"architecture/decisions/adr-014-unified-workflow-architecture-assessment/#critical-issues-must-fix","title":"Critical Issues (Must Fix)","text":""},{"location":"architecture/decisions/adr-014-unified-workflow-architecture-assessment/#issue-1-violation-of-adr-004-dual-layer-architecture","title":"Issue 1: Violation of ADR-004 Dual-Layer Architecture \ud83d\udea8","text":"<p>Severity: CRITICAL Impact: Fundamental architectural violation</p>"},{"location":"architecture/decisions/adr-014-unified-workflow-architecture-assessment/#the-problem","title":"The Problem","text":"<p>ADR-004 explicitly defines a dual-layer architecture with complete separation:</p> <p>Layer 1: Technical Processing - Intake \u2192 Credit \u2192 Income \u2192 Risk \u2192 Orchestrator - Structured business logic with Pydantic responses - MCP server integrations - Regulatory compliance and audit trails</p> <p>Layer 2: Personality Presentation - Cap-ital America, Scarlet Witch-Credit, Hawk-Income, Doctor Strange-Risk personality agents - Conversational responses and celebrations - UI triggers and animations - Emotional intelligence layer</p>"},{"location":"architecture/decisions/adr-014-unified-workflow-architecture-assessment/#current-implementation-violates-this","title":"Current Implementation Violates This","text":"<pre><code># UnifiedLoanWorkflow mixes layers inappropriately\nself.riley_collector = self._create_riley_collector()    # Layer 2: Personality\nself.intake_validator = self._create_intake_validator()  # Layer 1: Technical\nself.credit_assessor = self._create_credit_assessor()    # Layer 1: Technical\nself.income_verifier = self._create_income_verifier()    # Layer 1: Technical\nself.risk_analyzer = self._create_risk_analyzer()        # Layer 1: Technical\n</code></pre> <p>Cap-ital America (personality/conversation) is chained directly with technical agents (business logic).</p>"},{"location":"architecture/decisions/adr-014-unified-workflow-architecture-assessment/#why-this-is-critical","title":"Why This Is Critical","text":"<ol> <li>Regulatory Compliance Risk: Personality layer contaminating technical decisions</li> <li>Testing Complexity: Cannot test business logic independently</li> <li>Fallback Impossible: Cannot disable personality layer as specified in ADR-004</li> <li>Audit Trail Contamination: Mixing conversational and technical assessments</li> <li>Performance Impact: Personality processing blocking technical workflow</li> </ol>"},{"location":"architecture/decisions/adr-014-unified-workflow-architecture-assessment/#what-adr-004-says","title":"What ADR-004 Says","text":"<p>\"Layer 1: Technical Processing (Unchanged) - Preserve all existing technical agent personas exactly as-is - Maintain current MCP server integrations</p> <p>Layer 2: Personality Enhancement (New) - Add personality agents for conversational responses - Generate UI trigger data for animations\"</p> <p>The layers must remain separate. Cap-ital America's conversational role is Layer 2, not Layer 1.</p>"},{"location":"architecture/decisions/adr-014-unified-workflow-architecture-assessment/#issue-2-confusion-between-collection-phase-and-processing-phase","title":"Issue 2: Confusion Between Collection Phase and Processing Phase \ud83d\udea8","text":"<p>Severity: CRITICAL Impact: Workflow logic becomes ambiguous</p>"},{"location":"architecture/decisions/adr-014-unified-workflow-architecture-assessment/#two-distinct-phases-that-should-not-be-mixed","title":"Two Distinct Phases That Should Not Be Mixed","text":"<p>Phase 1: Data Collection (Conversational) - Owner: Cap-ital America Coordinator - Purpose: Natural language data gathering through conversation - Output: Collected application data (dictionary/JSON) - Pattern: Iterative conversation until data complete - Architecture: Separate from technical processing - Endpoint: <code>/api/chat</code> (conversational)</p> <p>Phase 2: Formal Processing (Technical) - Owner: WorkflowOrchestrator - Purpose: Structured loan decision workflow - Input: Validated LoanApplication (Pydantic model) - Pattern: Sequential agent processing (Intake \u2192 Credit \u2192 Income \u2192 Risk) - Architecture: SequentialBuilder with technical agents - Endpoint: <code>/api/process</code> (batch processing)</p>"},{"location":"architecture/decisions/adr-014-unified-workflow-architecture-assessment/#current-implementation-conflates-these","title":"Current Implementation Conflates These","text":"<pre><code># unified_workflow.py combines both phases incorrectly\nasync def process_conversation(\n    self,\n    user_message: str,  # Conversational input (Phase 1)\n    thread: AgentThread,\n    shared_state: SharedState | None = None\n) -&gt; AsyncGenerator[WorkflowResponse, None]:\n    # Processes through ALL 5 agents including technical processing\n    # This mixes conversation (Cap-ital America) with business logic (Intake/Credit/Income/Risk)\n</code></pre>"},{"location":"architecture/decisions/adr-014-unified-workflow-architecture-assessment/#why-this-is-wrong","title":"Why This Is Wrong","text":"<p>Conceptual Confusion: - Cap-ital America's job: Collect data through conversation - Intake/Credit/Income/Risk job: Process validated applications - These are distinct responsibilities that should not be unified</p> <p>Timing Issues: - Collection phase: Iterative, can take multiple turns - Processing phase: One-shot, runs to completion - Mixing creates ambiguous workflow state</p> <p>Data Model Mismatch: - Cap-ital America works with: <code>Dict[str, Any]</code> (partial/incomplete data) - Technical agents expect: <code>LoanApplication</code> (validated/complete data) - Type safety and validation are compromised</p>"},{"location":"architecture/decisions/adr-014-unified-workflow-architecture-assessment/#correct-architecture-pattern","title":"Correct Architecture Pattern","text":"<pre><code># Phase 1: Cap-ital America collects data (SEPARATE)\nriley = RileyCoordinator()\ncollected_data = await riley.process_conversation(user_message, thread)\n\n# Transition: Convert to validated model\nif collected_data.action == \"ready_for_processing\":\n    application = riley.create_loan_application(collected_data.collected_data)\n\n    # Phase 2: WorkflowOrchestrator processes (SEPARATE)\n    orchestrator = WorkflowOrchestrator()\n    decision = await orchestrator.process_loan_application(application)\n</code></pre> <p>This separation is architectural, not just organizational.</p>"},{"location":"architecture/decisions/adr-014-unified-workflow-architecture-assessment/#issue-3-sequentialbuilder-misuse","title":"Issue 3: SequentialBuilder Misuse \ud83d\udea8","text":"<p>Severity: CRITICAL Impact: Violates Microsoft Agent Framework best practices</p>"},{"location":"architecture/decisions/adr-014-unified-workflow-architecture-assessment/#microsoft-agent-framework-design-intent","title":"Microsoft Agent Framework Design Intent","text":"<p>SequentialBuilder Purpose (per documentation): - Chain agents with homogeneous responsibilities - Sequential processing of similar data types - Automatic conversation threading for agent-to-agent communication</p> <p>Typical Use Case: <pre><code># Example: Document review workflow\nworkflow = SequentialBuilder().participants([\n    legal_reviewer,      # Reviews legal compliance\n    financial_reviewer,  # Reviews financial aspects\n    risk_reviewer,       # Reviews risk factors\n    final_approver       # Makes final decision\n]).build()\n\n# All agents process SAME document, add assessments\n</code></pre></p>"},{"location":"architecture/decisions/adr-014-unified-workflow-architecture-assessment/#current-implementation-misuses-this","title":"Current Implementation Misuses This","text":"<pre><code># UnifiedLoanWorkflow mixes DIFFERENT agent types inappropriately\nworkflow = SequentialBuilder().participants([\n    riley_collector,    # Conversational data collector (chat-like)\n    intake_validator,   # Technical validator (structured)\n    credit_assessor,    # Financial analyst (MCP tools)\n    income_verifier,    # Document processor (verification)\n    risk_analyzer,      # Decision maker (synthesis)\n]).build()\n</code></pre> <p>Problems: 1. Cap-ital America is fundamentally different: Conversational vs. structured processing 2. Input/output mismatch: Cap-ital America expects user messages, technical agents expect LoanApplication 3. Conversation context confusion: Cap-ital America needs back-and-forth, technical agents are one-shot 4. Agent purpose conflict: Collection vs. processing are different workflows</p>"},{"location":"architecture/decisions/adr-014-unified-workflow-architecture-assessment/#why-this-fails-framework-design","title":"Why This Fails Framework Design","text":"<p>SequentialBuilder Assumptions: - All agents process same data type - Each agent adds assessment to shared context - Linear progression through similar operations</p> <p>Reality of UnifiedLoanWorkflow: - Cap-ital America processes user messages (strings) - Technical agents process LoanApplication (Pydantic) - Cap-ital America needs iteration, technical agents don't - Different agent categories mixed together</p>"},{"location":"architecture/decisions/adr-014-unified-workflow-architecture-assessment/#correct-framework-usage","title":"Correct Framework Usage","text":"<p>Option 1: Separate Workflows <pre><code># Collection workflow (if multi-step collection needed)\ncollection_workflow = SequentialBuilder().participants([\n    data_collector,\n    data_validator,\n    completeness_checker\n]).build()\n\n# Processing workflow (existing pattern)\nprocessing_workflow = SequentialBuilder().participants([\n    intake_agent,\n    credit_agent,\n    income_agent,\n    risk_agent\n]).build()\n</code></pre></p> <p>Option 2: No Framework for Collection (RECOMMENDED) <pre><code># Cap-ital America doesn't need SequentialBuilder - it's a single conversational agent\nriley = RileyCoordinator()\nresponse = await riley.process_conversation(user_message, thread)\n\n# WorkflowOrchestrator uses SequentialBuilder correctly\norchestrator = WorkflowOrchestrator()\ndecision = await orchestrator.process_loan_application(application)\n</code></pre></p>"},{"location":"architecture/decisions/adr-014-unified-workflow-architecture-assessment/#major-issues-should-fix","title":"Major Issues (Should Fix)","text":""},{"location":"architecture/decisions/adr-014-unified-workflow-architecture-assessment/#issue-4-agent-persona-misapplication","title":"Issue 4: Agent Persona Misapplication","text":"<p>Severity: MAJOR Impact: Technical debt and maintainability</p>"},{"location":"architecture/decisions/adr-014-unified-workflow-architecture-assessment/#cap-ital-americas-designed-role-vs-current-usage","title":"Cap-ital America's Designed Role vs. Current Usage","text":"<p>Cap-ital America's Actual Role (per <code>riley-coordinator-persona.md</code>): - Enthusiastic conversational coordinator - Natural language data collection - User experience orchestration - Handoff coordination to technical team - NOT a technical processor</p> <p>Current Misuse in UnifiedLoanWorkflow: <pre><code>def _create_riley_collector(self) -&gt; ChatAgent:\n    \"\"\"Create Cap-ital America agent for conversational data collection.\"\"\"\n    persona = PersonaLoader.load_persona(\"riley-coordinator\")\n\n    return ChatAgent(\n        instructions=persona,  # Cap-ital America's personality persona\n        name=\"Riley_Collector\",\n        temperature=0.7,  # Conversational\n        max_tokens=800    # Long explanations\n    )\n</code></pre></p> <p>Then Cap-ital America is chained with: <pre><code># Technical agents with completely different responsibilities\nself.intake_validator   # Intake Agent: Sharp-eyed validator, temperature=0.1\nself.credit_assessor    # Scarlet Witch-Credit: Credit analyst, temperature=0.2\nself.income_verifier    # Hawk-Income: Income specialist, temperature=0.1\nself.risk_analyzer      # Doctor Strange-Risk: Risk decision maker, temperature=0.1\n</code></pre></p>"},{"location":"architecture/decisions/adr-014-unified-workflow-architecture-assessment/#the-problem_1","title":"The Problem","text":"<p>Personality vs. Technical Mismatch: - Cap-ital America: Enthusiastic, encouraging, conversational (high temperature) - Technical agents: Precise, analytical, structured (low temperature) - These shouldn't be in the same sequential workflow</p> <p>Responsibility Confusion: - Cap-ital America persona says: \"I coordinate and hand off to specialists\" - UnifiedLoanWorkflow says: \"Cap-ital America IS part of the specialist processing\" - This contradicts Cap-ital America's defined role</p> <p>Token Optimization Violated: - CLAUDE.md warns: \"Keep personas concise: Target 300-500 lines\" - Cap-ital America's persona is optimized for conversation, not technical processing - Forcing Cap-ital America into technical workflow wastes tokens on personality during processing</p>"},{"location":"architecture/decisions/adr-014-unified-workflow-architecture-assessment/#impact-on-agent-autonomy","title":"Impact on Agent Autonomy","text":"<p>Per ADR-001 Multi-Agent Strategic Foundation:</p> <p>\"Agents are autonomous: Each agent decides which MCP tools to use based on their assessment needs\"</p> <p>Cap-ital America has NO MCP tools - Cap-ital America is a coordinator, not a processor.</p> <p>Chaining Cap-ital America with agents that DO use MCP tools creates confusion about: - Which agents should access which tools? - How does Cap-ital America's conversational context help technical processing? - When does Cap-ital America stop and technical processing begin?</p>"},{"location":"architecture/decisions/adr-014-unified-workflow-architecture-assessment/#issue-5-session-state-complexity","title":"Issue 5: Session State Complexity","text":"<p>Severity: MAJOR Impact: Maintainability and debugging difficulty</p>"},{"location":"architecture/decisions/adr-014-unified-workflow-architecture-assessment/#current-state-management-is-overly-complex","title":"Current State Management is Overly Complex","text":"<p>Three Overlapping State Management Systems:</p> <ol> <li>AgentThread (Microsoft Agent Framework)</li> <li>Conversation history across agents</li> <li> <p>Thread-specific context</p> </li> <li> <p>SharedState (Microsoft Agent Framework)</p> </li> <li>Cross-agent data sharing</li> <li> <p>Application data accumulation</p> </li> <li> <p>ConversationSession (Custom)</p> </li> <li>Session lifecycle management</li> <li>Completion percentage tracking</li> <li>Workflow phase tracking</li> <li>Collected data storage</li> </ol>"},{"location":"architecture/decisions/adr-014-unified-workflow-architecture-assessment/#duplication-and-confusion","title":"Duplication and Confusion","text":"<pre><code># In unified_workflow.py\nawait shared_state.set(\"application_data\", {})  # Framework state\nawait shared_state.set(\"workflow_phase\", \"collecting\")  # Custom tracking\n\n# In session_manager.py\nsession.collected_data: Dict[str, Any] = {}  # Duplicate of SharedState?\nsession.workflow_phase = \"collecting\"  # Duplicate of SharedState?\nsession.completion_percentage = 0  # Where does this come from?\n</code></pre> <p>Questions This Raises: - Is <code>session.collected_data</code> the same as <code>shared_state[\"application_data\"]</code>? - Do they stay synchronized? How? - What happens if they diverge? - Which is the source of truth?</p>"},{"location":"architecture/decisions/adr-014-unified-workflow-architecture-assessment/#state-synchronization-risks","title":"State Synchronization Risks","text":"<pre><code># API endpoint (app.py) updates session from workflow response\nsession.update_data(\n    latest_response.collected_data,  # From workflow\n    latest_response.completion_percentage  # From workflow\n)\nsession.workflow_phase = latest_response.phase  # From workflow\n</code></pre> <p>But SharedState might have different data: <pre><code># Inside workflow\napp_data = await shared_state.get(\"application_data\")  # Different from session?\n</code></pre></p> <p>Potential Race Conditions: - Session updated after workflow completes - If workflow fails mid-stream, session and SharedState diverge - No transaction boundaries or consistency guarantees</p>"},{"location":"architecture/decisions/adr-014-unified-workflow-architecture-assessment/#correct-pattern","title":"Correct Pattern","text":"<p>Option 1: Use Framework Only <pre><code># Let AgentThread and SharedState handle ALL state\n# Remove custom ConversationSession redundancy\nasync def process_conversation(user_message, thread, shared_state):\n    # Framework manages state automatically\n    # No need for parallel session tracking\n</code></pre></p> <p>Option 2: Use Custom Session, Not Framework State <pre><code># If custom session is needed, don't duplicate in SharedState\n# Use session as single source of truth\nasync def process_conversation(user_message, session):\n    # Session contains collected_data, phase, completion\n    # Pass to agents as context, not via SharedState\n</code></pre></p> <p>Recommendation: Option 1 for simplicity and framework alignment.</p>"},{"location":"architecture/decisions/adr-014-unified-workflow-architecture-assessment/#issue-6-mock-implementation-architectural-divergence","title":"Issue 6: Mock Implementation Architectural Divergence","text":"<p>Severity: MAJOR Impact: Testing reliability and production parity</p>"},{"location":"architecture/decisions/adr-014-unified-workflow-architecture-assessment/#mock-should-mirror-real-implementation","title":"Mock Should Mirror Real Implementation","text":"<p>Purpose of Mock Implementation: - Enable testing when <code>agent_framework</code> unavailable - Provide identical interface to real implementation - Validate API integration without full framework - Should behave architecturally the same</p>"},{"location":"architecture/decisions/adr-014-unified-workflow-architecture-assessment/#current-divergence","title":"Current Divergence","text":"<p>Real Implementation (<code>unified_workflow.py</code>): <pre><code>class UnifiedLoanWorkflow:\n    def __init__(self, chat_client: FoundryChatClient | None = None):\n        # Creates 5 ChatAgent instances\n        self.riley_collector = self._create_riley_collector()\n        self.intake_validator = self._create_intake_validator()\n        # ... etc\n\n        # Uses SequentialBuilder\n        self.workflow = self._build_sequential_workflow()\n</code></pre></p> <p>Mock Implementation (<code>mock_unified_workflow.py</code>): <pre><code>class MockUnifiedLoanWorkflow:\n    def __init__(self, chat_client=None):\n        # No agent creation\n        # No workflow building\n        logger.info(\"MockUnifiedLoanWorkflow initialized\")\n</code></pre></p> <p>Different Architectures: - Real: Pre-creates agents and workflow in <code>__init__</code> - Mock: Creates nothing, simulates on-the-fly</p> <p>Different Processing Logic: - Real: Framework events from SequentialBuilder - Mock: Manual phase simulation with regex parsing</p>"},{"location":"architecture/decisions/adr-014-unified-workflow-architecture-assessment/#why-this-matters","title":"Why This Matters","text":"<p>Testing Validity: - Tests pass with mock but fail with real implementation - Mock hides architectural issues in real code - False confidence in system behavior</p> <p>Integration Issues: <pre><code># Works with mock\ncollected_data = await self._extract_application_data(user_message, shared_state)\n\n# Real implementation has no such method\n# Real implementation relies on Cap-ital America agent to extract data\n</code></pre></p> <p>Mock's regex-based parsing is fundamentally different from agent-based extraction.</p>"},{"location":"architecture/decisions/adr-014-unified-workflow-architecture-assessment/#example-of-divergence","title":"Example of Divergence","text":"<p>Mock (Lines 196-296): <pre><code>async def _extract_application_data(self, user_message: str, shared_state):\n    \"\"\"Extract application data from user message.\"\"\"\n    # 100 lines of regex pattern matching\n    # Manual parsing of loan amounts, names, income\n    # Deterministic extraction logic\n</code></pre></p> <p>Real Implementation: <pre><code># No such method\n# Cap-ital America agent's AI model extracts data non-deterministically\n# Relies on persona instructions, not regex\n</code></pre></p> <p>This means: - Mock tests pass even if Cap-ital America persona is broken - Mock doesn't validate agent conversation flow - Mock doesn't test SequentialBuilder behavior - Mock gives false sense of security</p>"},{"location":"architecture/decisions/adr-014-unified-workflow-architecture-assessment/#correct-mock-pattern","title":"Correct Mock Pattern","text":"<p>Option 1: Minimal Mock (RECOMMENDED) <pre><code>class MockUnifiedLoanWorkflow:\n    \"\"\"Minimal mock that mirrors real architecture.\"\"\"\n\n    def __init__(self):\n        # Still create mock agents (for interface parity)\n        self.riley_collector = MockChatAgent(\"Cap-ital America\")\n        self.intake_validator = MockChatAgent(\"Intake\")\n        # ... etc\n\n    async def process_conversation(self, user_message, thread, shared_state):\n        # Simulate agent workflow sequentially\n        riley_response = await self.riley_collector.run(user_message)\n        intake_response = await self.intake_validator.run(riley_response)\n        # ... etc\n</code></pre></p> <p>Option 2: Framework-Compatible Mock <pre><code># Use agent_framework's test utilities if available\nfrom agent_framework.testing import MockChatClient, MockAgentThread\n</code></pre></p> <p>Option 3: Remove Mock Entirely - If <code>agent_framework</code> is always available in test environments - Use real framework with test credentials - More realistic integration testing</p>"},{"location":"architecture/decisions/adr-014-unified-workflow-architecture-assessment/#issue-7-workflow-event-transformation-complexity","title":"Issue 7: Workflow Event Transformation Complexity","text":"<p>Severity: MAJOR Impact: Error-prone event processing</p>"},{"location":"architecture/decisions/adr-014-unified-workflow-architecture-assessment/#event-transformation-is-fragile","title":"Event Transformation Is Fragile","text":"<pre><code>async def _transform_workflow_event(\n    self,\n    event: WorkflowEvent,\n    shared_state: SharedState,\n    current_phase: str\n) -&gt; WorkflowResponse | None:\n    \"\"\"Transform workflow event to our response format.\"\"\"\n    try:\n        # Lines 304-364: Complex event parsing logic\n\n        # Extract agent information from event\n        agent_name = \"Assistant\"\n        message_content = \"\"\n\n        # Handle different event types\n        if hasattr(event, 'executor_id'):\n            agent_name = str(event.executor_id).replace('_', ' ')\n\n        if hasattr(event, 'data') and event.data:\n            if isinstance(event.data, str):\n                message_content = event.data\n            elif hasattr(event.data, 'text'):\n                message_content = event.data.text\n            elif hasattr(event.data, 'content'):\n                message_content = str(event.data.content)\n            else:\n                message_content = str(event.data)\n</code></pre>"},{"location":"architecture/decisions/adr-014-unified-workflow-architecture-assessment/#problems-with-this-approach","title":"Problems with This Approach","text":"<p>1. Framework Event Structure Assumptions: - <code>hasattr(event, 'executor_id')</code> - what if framework changes? - <code>hasattr(event.data, 'text')</code> - fragile attribute checking - Multiple fallback paths suggest uncertainty about event structure</p> <p>2. Phase Tracking is Error-Prone: <pre><code># Lines 262-272: Manual phase tracking by string matching\nif \"Cap-ital America\" in str(workflow_event.executor_id):\n    current_phase = 0\nelif \"Intake Agent\" in str(workflow_event.executor_id):\n    current_phase = 1\nelif \"Credit\" in str(workflow_event.executor_id):\n    current_phase = 2\n# ... etc\n</code></pre></p> <p>What if: - Agent names change? - Agents are renamed in personas? - New agents added to workflow? - Fragile string matching for critical workflow state</p> <p>3. Custom Response Format (<code>WorkflowResponse</code>): <pre><code>class WorkflowResponse(BaseModel):\n    agent_name: str\n    message: str\n    phase: str  # \"collecting\", \"validating\", \"assessing\", \"deciding\"\n    completion_percentage: int\n    collected_data: Dict[str, Any] = {}\n    action: str = \"processing\"\n    metadata: Dict[str, Any] = {}\n</code></pre></p> <p>Why create custom format instead of using framework's WorkflowEvent directly?</p> <p>This adds transformation overhead and introduces bugs during mapping.</p>"},{"location":"architecture/decisions/adr-014-unified-workflow-architecture-assessment/#correct-approach","title":"Correct Approach","text":"<p>Option 1: Use Framework Events Directly (RECOMMENDED) <pre><code># Don't transform - pass framework events to API/UI\nasync for event in workflow.run_stream(application):\n    yield event  # Let API layer handle serialization\n</code></pre></p> <p>Option 2: Typed Event Handling <pre><code># Use framework's event types, not hasattr checks\nfrom agent_framework import AgentRunUpdateEvent, WorkflowOutputEvent\n\nasync for event in workflow.run_stream(application):\n    if isinstance(event, AgentRunUpdateEvent):\n        # Type-safe access to event.data, event.executor_id\n    elif isinstance(event, WorkflowOutputEvent):\n        # Type-safe access to event.output\n</code></pre></p> <p>Option 3: Agent-Specific Event Handlers <pre><code># Register handlers for specific agents\nevent_handlers = {\n    \"Riley_Collector\": handle_riley_event,\n    \"Intake_Agent\": handle_intake_event,\n    # ... etc\n}\n\nagent_id = event.executor_id\nhandler = event_handlers.get(agent_id, default_handler)\nresponse = await handler(event)\n</code></pre></p>"},{"location":"architecture/decisions/adr-014-unified-workflow-architecture-assessment/#minor-issues-address-during-refactoring","title":"Minor Issues (Address During Refactoring)","text":""},{"location":"architecture/decisions/adr-014-unified-workflow-architecture-assessment/#issue-8-incomplete-agent-personas-in-workflow","title":"Issue 8: Incomplete Agent Personas in Workflow","text":"<p>Severity: MINOR Impact: Inconsistent implementation</p>"},{"location":"architecture/decisions/adr-014-unified-workflow-architecture-assessment/#todo-comments-indicate-incomplete-design","title":"TODO Comments Indicate Incomplete Design","text":"<pre><code>def _create_credit_assessor(self) -&gt; ChatAgent:\n    \"\"\"Create credit assessment agent.\"\"\"\n    # TODO: Load credit persona when created\n    credit_instructions = \"\"\"\n    You are a Credit Assessment Specialist. Analyze the applicant's creditworthiness\n    based on the loan application data in the conversation history.\n    ...\n    \"\"\"\n</code></pre> <p>Similar TODOs for: - <code>_create_income_verifier()</code> (Line 149) - <code>_create_risk_analyzer()</code> (Line 171)</p>"},{"location":"architecture/decisions/adr-014-unified-workflow-architecture-assessment/#why-this-is-problematic","title":"Why This Is Problematic","text":"<p>Inconsistent Agent Creation: - Cap-ital America: Uses <code>PersonaLoader.load_persona(\"riley-coordinator\")</code> \u2705 - Intake: Uses <code>PersonaLoader.load_persona(\"intake\")</code> \u2705 - Credit/Income/Risk: Hardcoded instructions \u274c</p> <p>Missing Persona Files: - Where is <code>credit-agent-persona.md</code>? - Where is <code>income-agent-persona.md</code>? - Where is <code>risk-agent-persona.md</code>?</p> <p>These exist in the system (checking project structure): <pre><code>loan_avengers/agents/agent-persona/\n\u251c\u2500\u2500 intake-agent-persona.md\n\u251c\u2500\u2500 credit-agent-persona.md  (probably exists)\n\u251c\u2500\u2500 income-agent-persona.md  (probably exists)\n\u251c\u2500\u2500 risk-agent-persona.md    (probably exists)\n\u2514\u2500\u2500 orchestrator-agent-persona.md\n</code></pre></p> <p>If they exist, use them. If they don't, this workflow is premature.</p>"},{"location":"architecture/decisions/adr-014-unified-workflow-architecture-assessment/#fix","title":"Fix","text":"<pre><code>def _create_credit_assessor(self) -&gt; ChatAgent:\n    \"\"\"Create credit assessment agent.\"\"\"\n    persona = PersonaLoader.load_persona(\"credit\")  # Not \"credit-agent\", just \"credit\"\n\n    return ChatAgent(\n        chat_client=self.chat_client,\n        instructions=persona,\n        name=\"Credit_Assessor\",\n        description=\"Credit risk analysis specialist\",\n        temperature=0.2,\n        max_tokens=600,\n    )\n</code></pre> <p>Same for income and risk agents.</p>"},{"location":"architecture/decisions/adr-014-unified-workflow-architecture-assessment/#issue-9-phase-completion-percentage-logic","title":"Issue 9: Phase Completion Percentage Logic","text":"<p>Severity: MINOR Impact: User experience inconsistency</p>"},{"location":"architecture/decisions/adr-014-unified-workflow-architecture-assessment/#hardcoded-phase-completion-percentages","title":"Hardcoded Phase Completion Percentages","text":"<pre><code># Line 329-335\nphase_completion = {\n    \"collecting\": 20,\n    \"validating\": 40,\n    \"assessing_credit\": 60,\n    \"verifying_income\": 80,\n    \"deciding\": 100\n}\n</code></pre>"},{"location":"architecture/decisions/adr-014-unified-workflow-architecture-assessment/#problems","title":"Problems","text":"<p>1. Assumes Equal Phase Duration: - What if credit assessment takes longer than validation? - What if income verification requires document upload (minutes)? - Completion percentage doesn't reflect actual progress</p> <p>2. Misleading User Experience: - User at 80% \u2192 Might wait 2 more minutes - User at 20% \u2192 Might be almost done (if other phases fast) - Percentage doesn't correlate with time remaining</p> <p>3. Inconsistent with Session Completion: <pre><code># session_manager.py - Cap-ital America calculates completion differently\ndef _calculate_completion(self, data: Dict[str, Any]) -&gt; int:\n    \"\"\"Calculate completion percentage based on collected data.\"\"\"\n    required_fields = [\n        \"applicant_name\", \"email\", \"phone\", \"date_of_birth\",\n        \"loan_amount\", \"loan_purpose\", \"annual_income\", \"employment_status\"\n    ]\n    filled_fields = sum(1 for field in required_fields if data.get(field) is not None)\n    return min(100, (filled_fields * 100) // len(required_fields))\n</code></pre></p> <p>Cap-ital America's completion is data-driven, workflow's completion is phase-driven. These can conflict.</p>"},{"location":"architecture/decisions/adr-014-unified-workflow-architecture-assessment/#better-approach","title":"Better Approach","text":"<p>Option 1: Time-Based Estimation <pre><code># Track actual phase durations, estimate remaining time\nphase_estimates = {\n    \"collecting\": 0,      # Variable\n    \"validating\": 5,      # ~5 seconds\n    \"assessing_credit\": 10,  # ~10 seconds\n    \"verifying_income\": 8,   # ~8 seconds\n    \"deciding\": 2,        # ~2 seconds\n}\ntotal_estimated = sum(phase_estimates.values())\nelapsed = time_spent_so_far\ncompletion = (elapsed / total_estimated) * 100\n</code></pre></p> <p>Option 2: Remove Completion Percentage Entirely <pre><code># Just show phase status, not percentage\n# Users understand \"Validating Application\" better than \"40%\"\nreturn WorkflowResponse(\n    phase=current_phase,\n    phase_display=\"Validating Your Application\",\n    # No completion_percentage\n)\n</code></pre></p> <p>Option 3: Actual Progress from Agents <pre><code># Agents report their own progress (if they support it)\nasync for event in workflow.run_stream(application):\n    if hasattr(event, 'progress'):\n        actual_progress = event.progress  # From agent\n</code></pre></p>"},{"location":"architecture/decisions/adr-014-unified-workflow-architecture-assessment/#comparison-with-existing-workfloworchestrator-pattern","title":"Comparison with Existing WorkflowOrchestrator Pattern","text":""},{"location":"architecture/decisions/adr-014-unified-workflow-architecture-assessment/#workfloworchestrator-existing-correct","title":"WorkflowOrchestrator (Existing, Correct)","text":"<p>File: <code>loan_avengers/agents/workflow_orchestrator.py</code></p> <p>Architecture: <pre><code>class WorkflowOrchestrator:\n    \"\"\"Sequential workflow orchestrator for loan processing.\"\"\"\n\n    def __init__(self, chat_client: FoundryChatClient | None = None):\n        # Only technical processing agents\n        self.intake_executor = self._create_intake_executor()\n        # Future: credit_executor, income_executor, risk_executor\n\n    async def process_loan_application(\n        self,\n        application: LoanApplication,  # Validated Pydantic model\n        thread: AgentThread | None = None\n    ) -&gt; AsyncGenerator[WorkflowResponse, None]:\n        # Processes FORMAL loan application\n        # Input: Complete LoanApplication\n        # Output: LoanDecision\n\n        # Currently: MVP with just Intake \u2192 Mock Approval\n        # Future: Intake \u2192 Credit \u2192 Income \u2192 Risk \u2192 Decision\n</code></pre></p> <p>Key Characteristics: 1. \u2705 Accepts LoanApplication (validated Pydantic model) 2. \u2705 Technical agents only (no personality agents) 3. \u2705 Clear responsibility: Process formal loan applications 4. \u2705 Follows ADR-006: Sequential workflow with SequentialBuilder 5. \u2705 Follows ADR-004: Technical processing layer only</p>"},{"location":"architecture/decisions/adr-014-unified-workflow-architecture-assessment/#unifiedloanworkflow-new-problematic","title":"UnifiedLoanWorkflow (New, Problematic)","text":"<p>File: <code>loan_avengers/agents/unified_workflow.py</code></p> <p>Architecture: <pre><code>class UnifiedLoanWorkflow:\n    \"\"\"Unified loan processing workflow.\"\"\"\n\n    def __init__(self, chat_client: FoundryChatClient | None = None):\n        # Mixes personality and technical agents\n        self.riley_collector = self._create_riley_collector()    # Personality\n        self.intake_validator = self._create_intake_validator()  # Technical\n        self.credit_assessor = self._create_credit_assessor()    # Technical\n        self.income_verifier = self._create_income_verifier()    # Technical\n        self.risk_analyzer = self._create_risk_analyzer()        # Technical\n\n    async def process_conversation(\n        self,\n        user_message: str,  # Conversational string\n        thread: AgentThread,\n        shared_state: SharedState | None = None\n    ) -&gt; AsyncGenerator[WorkflowResponse, None]:\n        # Processes user CONVERSATION through all agents\n        # Mixes data collection with formal processing\n</code></pre></p> <p>Key Characteristics: 1. \u274c Accepts user_message (string, not validated model) 2. \u274c Mixes personality and technical (violates ADR-004) 3. \u274c Unclear responsibility: Collection AND processing? 4. \u274c Misuses SequentialBuilder: Different agent types 5. \u274c Phase confusion: When is collection done? When does processing start?</p>"},{"location":"architecture/decisions/adr-014-unified-workflow-architecture-assessment/#side-by-side-comparison","title":"Side-by-Side Comparison","text":"Aspect WorkflowOrchestrator \u2705 UnifiedLoanWorkflow \u274c Input Type <code>LoanApplication</code> (Pydantic) <code>str</code> (user message) Agent Types Technical only Mixed personality + technical ADR-004 Compliance Yes (Layer 1) No (mixes layers) SequentialBuilder Use Correct Misused Responsibility Process applications Unclear Phase Separation Clear Confused Cap-ital America Role Not included Incorrectly included State Management AgentThread AgentThread + SharedState + Session Output <code>LoanDecision</code> <code>WorkflowResponse</code>"},{"location":"architecture/decisions/adr-014-unified-workflow-architecture-assessment/#why-workfloworchestrator-is-correct","title":"Why WorkflowOrchestrator Is Correct","text":"<p>1. Separation of Concerns: - Cap-ital America handles conversation (separate) - WorkflowOrchestrator handles processing (separate) - Clear handoff point: <code>riley.create_loan_application(collected_data)</code></p> <p>2. Type Safety: - Requires validated <code>LoanApplication</code> - Pydantic ensures data integrity - Technical agents receive clean data</p> <p>3. Framework Alignment: - SequentialBuilder used for homogeneous technical agents - All agents process same data type (LoanApplication) - Natural conversation chaining for agent-to-agent assessments</p> <p>4. ADR Compliance: - Follows ADR-001 (multi-agent strategic foundation) - Follows ADR-004 (technical processing layer) - Follows ADR-006 (sequential workflow orchestration)</p>"},{"location":"architecture/decisions/adr-014-unified-workflow-architecture-assessment/#why-unifiedloanworkflow-is-incorrect","title":"Why UnifiedLoanWorkflow Is Incorrect","text":"<p>1. Mixed Concerns: - Combines collection and processing - Personality and technical in one workflow - No clear phase boundaries</p> <p>2. Type Confusion: - Starts with <code>str</code> (user message) - Technical agents expect <code>LoanApplication</code> - Framework has to guess data structure</p> <p>3. Framework Misalignment: - SequentialBuilder used for heterogeneous agents - Cap-ital America vs. technical agents are fundamentally different - Conversation chaining doesn't make sense across agent types</p> <p>4. ADR Violations: - Violates ADR-004 (mixes layers) - Misinterprets ADR-006 (wrong SequentialBuilder use) - Confuses agent responsibilities (ADR-001)</p>"},{"location":"architecture/decisions/adr-014-unified-workflow-architecture-assessment/#architectural-recommendations","title":"Architectural Recommendations","text":""},{"location":"architecture/decisions/adr-014-unified-workflow-architecture-assessment/#recommendation-1-abandon-unified-workflow-use-existing-pattern","title":"Recommendation 1: Abandon Unified Workflow, Use Existing Pattern \u2705","text":"<p>Action: Do not merge <code>unified_workflow.py</code>. Use established pattern.</p> <p>Correct Architecture:</p> <pre><code># Step 1: Cap-ital America collects data (conversational)\nriley = RileyCoordinator()\nresponse = await riley.process_conversation(user_message, thread, current_data)\n\n# Step 2: Check if data collection complete\nif response.assessment.action == \"ready_for_processing\":\n    # Step 3: Convert to validated model\n    application = riley.create_loan_application(response.assessment.collected_data)\n\n    # Step 4: Process through WorkflowOrchestrator\n    orchestrator = WorkflowOrchestrator()\n    async for workflow_response in orchestrator.process_loan_application(application):\n        yield workflow_response\n</code></pre> <p>Why This Works: - \u2705 Clear separation: Collection (Cap-ital America) \u2192 Processing (WorkflowOrchestrator) - \u2705 Type-safe: <code>str</code> \u2192 <code>Dict[str, Any]</code> \u2192 <code>LoanApplication</code> \u2192 <code>LoanDecision</code> - \u2705 ADR-compliant: Follows dual-layer architecture - \u2705 Framework-aligned: Correct SequentialBuilder usage in WorkflowOrchestrator - \u2705 Testable: Each phase can be tested independently</p>"},{"location":"architecture/decisions/adr-014-unified-workflow-architecture-assessment/#recommendation-2-clarify-api-endpoint-responsibilities","title":"Recommendation 2: Clarify API Endpoint Responsibilities","text":"<p>Current Problem: Single <code>/api/chat</code> endpoint tries to do everything.</p> <p>Proposed Solution: Two distinct endpoints with clear responsibilities.</p>"},{"location":"architecture/decisions/adr-014-unified-workflow-architecture-assessment/#endpoint-1-apichat-conversational-data-collection","title":"Endpoint 1: <code>/api/chat</code> (Conversational Data Collection)","text":"<pre><code>@app.post(\"/api/chat\")\nasync def handle_conversation(request: ConversationRequest):\n    \"\"\"\n    Handle conversational data collection with Cap-ital America.\n\n    Responsibilities:\n    - Natural language conversation\n    - Data extraction and accumulation\n    - Progress tracking\n    - Readiness determination\n\n    Does NOT perform formal loan processing.\n    \"\"\"\n    session = session_manager.get_or_create_session(request.session_id)\n    riley = RileyCoordinator()\n\n    response = await riley.process_conversation(\n        user_message=request.user_message,\n        thread=session.get_or_create_thread(),\n        current_data=session.collected_data\n    )\n\n    # Update session with Cap-ital America's response\n    session.update_data(\n        response.assessment.collected_data,\n        response.assessment.completion_percentage\n    )\n\n    # If Cap-ital America says ready, mark session\n    if response.assessment.action == \"ready_for_processing\":\n        session.mark_ready_for_processing()\n\n    return ConversationResponse(\n        agent_name=\"Cap-ital America\",\n        message=response.assessment.message,\n        action=response.assessment.action,\n        collected_data=response.assessment.collected_data,\n        completion_percentage=response.assessment.completion_percentage,\n        next_step=response.assessment.next_step,\n        session_id=session.session_id\n    )\n</code></pre>"},{"location":"architecture/decisions/adr-014-unified-workflow-architecture-assessment/#endpoint-2-apiprocess-formal-loan-processing","title":"Endpoint 2: <code>/api/process</code> (Formal Loan Processing)","text":"<pre><code>@app.post(\"/api/process\")\nasync def handle_processing(request: ProcessingRequest):\n    \"\"\"\n    Process formal loan application through WorkflowOrchestrator.\n\n    Responsibilities:\n    - Validate complete application data\n    - Run sequential agent workflow (Intake \u2192 Credit \u2192 Income \u2192 Risk)\n    - Generate final loan decision\n\n    Requires: Complete application data from Cap-ital America.\n    \"\"\"\n    session = session_manager.get_session(request.session_id)\n    if not session or session.status != \"ready_for_processing\":\n        raise HTTPException(400, \"Session not ready for processing\")\n\n    # Create validated LoanApplication from collected data\n    riley = RileyCoordinator()\n    try:\n        application = riley.create_loan_application(session.collected_data)\n    except ValueError as e:\n        raise HTTPException(400, f\"Invalid application data: {str(e)}\")\n\n    # Process through WorkflowOrchestrator\n    session.mark_processing()\n    orchestrator = WorkflowOrchestrator()\n\n    workflow_responses = []\n    async for response in orchestrator.process_loan_application(\n        application,\n        thread=session.get_or_create_thread()\n    ):\n        workflow_responses.append(response)\n\n        # Stream to client (optional)\n        yield response\n\n    # Mark session complete\n    session.mark_completed()\n\n    return ProcessingResponse(\n        application_id=application.application_id,\n        decision=workflow_responses[-1].metadata.get(\"decision\"),\n        workflow_events=workflow_responses,\n        session_id=session.session_id\n    )\n</code></pre>"},{"location":"architecture/decisions/adr-014-unified-workflow-architecture-assessment/#benefits-of-two-endpoint-design","title":"Benefits of Two-Endpoint Design","text":"<p>1. Clear Separation of Concerns: - <code>/api/chat</code> \u2192 Collection phase (iterative) - <code>/api/process</code> \u2192 Processing phase (one-shot)</p> <p>2. Better UX Control: - Frontend can show different UI for each phase - Chat interface for collection - Progress indicators for processing</p> <p>3. Type Safety: - <code>/api/chat</code> works with partial data - <code>/api/process</code> requires complete validated data</p> <p>4. Testability: - Test collection logic independently - Test processing logic independently - Integration tests can test full flow</p> <p>5. Scalability: - Collection phase can be async/cached - Processing phase can be queued/scheduled - Different scaling strategies for each</p>"},{"location":"architecture/decisions/adr-014-unified-workflow-architecture-assessment/#recommendation-3-simplify-state-management","title":"Recommendation 3: Simplify State Management","text":"<p>Current Problem: Three overlapping state systems (AgentThread, SharedState, ConversationSession).</p> <p>Proposed Solution: Single source of truth with clear ownership.</p>"},{"location":"architecture/decisions/adr-014-unified-workflow-architecture-assessment/#simplified-state-architecture","title":"Simplified State Architecture","text":"<pre><code>class ConversationSession:\n    \"\"\"Single source of truth for session state.\"\"\"\n\n    def __init__(self, session_id: str | None = None):\n        self.session_id = session_id or str(uuid.uuid4())\n        self.created_at = datetime.now(timezone.utc)\n        self.last_activity = datetime.now(timezone.utc)\n\n        # Collection phase state\n        self.collected_data: Dict[str, Any] = {}\n        self.completion_percentage: int = 0\n        self.collection_status: Literal[\"active\", \"complete\"] = \"active\"\n\n        # Processing phase state\n        self.processing_status: Literal[\"pending\", \"processing\", \"completed\", \"error\"] = \"pending\"\n        self.application: LoanApplication | None = None\n        self.decision: LoanDecision | None = None\n\n        # Framework integration\n        self._agent_thread: AgentThread | None = None\n\n    def get_or_create_thread(self) -&gt; AgentThread:\n        \"\"\"Get AgentThread for framework integration.\"\"\"\n        if not self._agent_thread:\n            self._agent_thread = AgentThread()\n        return self._agent_thread\n\n    def update_collected_data(self, data: Dict[str, Any], completion: int):\n        \"\"\"Update collection phase state.\"\"\"\n        self.collected_data.update(data)\n        self.completion_percentage = completion\n        self.last_activity = datetime.now(timezone.utc)\n\n        if completion &gt;= 100:\n            self.collection_status = \"complete\"\n\n    def start_processing(self, application: LoanApplication):\n        \"\"\"Transition to processing phase.\"\"\"\n        self.application = application\n        self.processing_status = \"processing\"\n        self.last_activity = datetime.now(timezone.utc)\n\n    def complete_processing(self, decision: LoanDecision):\n        \"\"\"Complete processing phase.\"\"\"\n        self.decision = decision\n        self.processing_status = \"completed\"\n        self.last_activity = datetime.now(timezone.utc)\n</code></pre>"},{"location":"architecture/decisions/adr-014-unified-workflow-architecture-assessment/#state-management-rules","title":"State Management Rules","text":"<p>1. Session is Primary State: - All state stored in <code>ConversationSession</code> - AgentThread used only for framework conversation context - No SharedState duplication</p> <p>2. Clear Phase Transitions: <pre><code># Collection phase\nsession.update_collected_data(data, completion)\n\n# Transition to processing\nif session.collection_status == \"complete\":\n    application = create_application(session.collected_data)\n    session.start_processing(application)\n\n# Processing phase\ndecision = await orchestrator.process(session.application)\nsession.complete_processing(decision)\n</code></pre></p> <p>3. Framework Integration: - AgentThread passed to Cap-ital America and WorkflowOrchestrator - Thread maintains conversation context - But session maintains business state</p>"},{"location":"architecture/decisions/adr-014-unified-workflow-architecture-assessment/#recommendation-4-fix-mock-implementation-alignment","title":"Recommendation 4: Fix Mock Implementation Alignment","text":"<p>Current Problem: Mock has completely different architecture than real implementation.</p> <p>Proposed Solution: Minimal mock that mirrors real behavior.</p> <pre><code># mock_unified_workflow.py (rewritten)\n\nclass MockChatAgent:\n    \"\"\"Mock agent that simulates ChatAgent interface.\"\"\"\n\n    def __init__(self, name: str, persona: str = \"\"):\n        self.name = name\n        self.persona = persona\n\n    async def run(self, message: str, thread=None) -&gt; MockAgentRunResponse:\n        \"\"\"Simulate agent processing.\"\"\"\n        # Simple simulation based on agent name\n        if \"Cap-ital America\" in self.name:\n            return MockAgentRunResponse(f\"{self.name}: Collecting data from: {message}\")\n        elif \"Intake\" in self.name:\n            return MockAgentRunResponse(f\"{self.name}: Validating application\")\n        elif \"Credit\" in self.name:\n            return MockAgentRunResponse(f\"{self.name}: Assessing creditworthiness\")\n        # ... etc\n\n\nclass MockRileyCoordinator:\n    \"\"\"Mock that mirrors real RileyCoordinator interface.\"\"\"\n\n    def __init__(self, chat_client=None):\n        # Mirror real implementation structure\n        self.chat_client = chat_client\n        self.instructions = \"Mock Cap-ital America Persona\"\n        self.temperature = 0.7\n        self.max_tokens = 800\n\n    async def process_conversation(\n        self,\n        user_message: str,\n        thread=None,\n        current_data: Dict[str, Any] | None = None\n    ) -&gt; AgentResponse[RileyResponse]:\n        \"\"\"Simulate conversational data collection.\"\"\"\n        current_data = current_data or {}\n\n        # Simple regex-based extraction (acceptable for mock)\n        extracted_data = self._extract_data(user_message)\n        current_data.update(extracted_data)\n\n        # Calculate completion\n        completion = self._calculate_completion(current_data)\n\n        # Determine action\n        action = \"ready_for_processing\" if completion &gt;= 100 else \"collect_info\"\n\n        # Build response\n        riley_response = RileyResponse(\n            agent_name=\"Cap-ital America\",\n            message=self._generate_message(current_data, action),\n            action=action,\n            collected_data=current_data,\n            next_step=self._determine_next_step(current_data),\n            completion_percentage=completion\n        )\n\n        return AgentResponse(\n            assessment=riley_response,\n            usage_stats=UsageStats(input_tokens=None, output_tokens=None, total_tokens=None),\n            response_id=None,\n            created_at=None,\n            agent_name=\"riley\",\n            application_id=None\n        )\n\n\nclass MockWorkflowOrchestrator:\n    \"\"\"Mock that mirrors real WorkflowOrchestrator interface.\"\"\"\n\n    def __init__(self, chat_client=None):\n        self.chat_client = chat_client\n        self.intake_executor = MockChatAgent(\"Intake_Agent\")\n\n    async def process_loan_application(\n        self,\n        application: LoanApplication,\n        thread=None\n    ) -&gt; AsyncGenerator[WorkflowResponse, None]:\n        \"\"\"Simulate workflow processing.\"\"\"\n        # Intake phase\n        yield WorkflowResponse(\n            agent_name=\"Intake_Agent\",\n            content=\"Validating application...\",\n            metadata={\"step\": \"intake_validation\"}\n        )\n\n        await asyncio.sleep(0.1)  # Simulate processing time\n\n        # Mock decision\n        if application.loan_amount &lt;= application.annual_income * 5:\n            decision_status = \"approved\"\n            message = \"Application approved!\"\n        else:\n            decision_status = \"denied\"\n            message = \"Application denied - loan amount too high.\"\n\n        yield WorkflowResponse(\n            agent_name=\"Workflow_Orchestrator\",\n            content=message,\n            metadata={\"step\": \"final_decision\", \"status\": decision_status}\n        )\n</code></pre> <p>Benefits: - \u2705 Same interface as real implementation - \u2705 Tests validate interface contracts - \u2705 Simpler logic (acceptable for mock) - \u2705 Architecturally aligned with real code</p>"},{"location":"architecture/decisions/adr-014-unified-workflow-architecture-assessment/#implementation-roadmap","title":"Implementation Roadmap","text":""},{"location":"architecture/decisions/adr-014-unified-workflow-architecture-assessment/#phase-1-immediate-actions-do-not-merge-current-code","title":"Phase 1: Immediate Actions (Do Not Merge Current Code)","text":"<p>Priority: CRITICAL</p> <ol> <li>Do not merge <code>unified_workflow.py</code> into production</li> <li>Current implementation violates architectural principles</li> <li>Creates technical debt</li> <li> <p>Confuses system responsibilities</p> </li> <li> <p>Use existing pattern for UI integration</p> </li> <li>RileyCoordinator for data collection</li> <li>WorkflowOrchestrator for processing</li> <li> <p>Two-endpoint API design</p> </li> <li> <p>Document architectural boundaries</p> </li> <li>Update API documentation with clear phase separation</li> <li>Add architectural diagrams showing correct flow</li> </ol>"},{"location":"architecture/decisions/adr-014-unified-workflow-architecture-assessment/#phase-2-api-refactoring-week-1","title":"Phase 2: API Refactoring (Week 1)","text":"<p>Priority: HIGH</p> <ol> <li>Implement two-endpoint pattern</li> <li>Refactor <code>/api/chat</code> to use only RileyCoordinator</li> <li>Create <code>/api/process</code> for WorkflowOrchestrator</li> <li> <p>Update API models for each endpoint</p> </li> <li> <p>Simplify state management</p> </li> <li>Remove SharedState duplication</li> <li>Use ConversationSession as single source of truth</li> <li> <p>AgentThread only for framework conversation context</p> </li> <li> <p>Update frontend integration</p> </li> <li>Chat UI calls <code>/api/chat</code> during collection</li> <li>Progress UI calls <code>/api/process</code> when ready</li> <li>Clear UX distinction between phases</li> </ol>"},{"location":"architecture/decisions/adr-014-unified-workflow-architecture-assessment/#phase-3-mock-alignment-week-2","title":"Phase 3: Mock Alignment (Week 2)","text":"<p>Priority: MEDIUM</p> <ol> <li>Rewrite mock implementations</li> <li>MockRileyCoordinator mirrors real RileyCoordinator interface</li> <li>MockWorkflowOrchestrator mirrors real WorkflowOrchestrator interface</li> <li> <p>Remove MockUnifiedLoanWorkflow</p> </li> <li> <p>Update tests</p> </li> <li>Test RileyCoordinator independently</li> <li>Test WorkflowOrchestrator independently</li> <li> <p>Integration tests for full flow</p> </li> <li> <p>Improve test coverage</p> </li> <li>Test phase transitions</li> <li>Test state management</li> <li>Test error handling</li> </ol>"},{"location":"architecture/decisions/adr-014-unified-workflow-architecture-assessment/#phase-4-documentation-adr-updates-week-3","title":"Phase 4: Documentation &amp; ADR Updates (Week 3)","text":"<p>Priority: MEDIUM</p> <ol> <li>Create ADR-010 (this document)</li> <li>Document architectural assessment</li> <li>Explain why unified workflow was rejected</li> <li> <p>Provide correct pattern guidance</p> </li> <li> <p>Update existing ADRs</p> </li> <li>ADR-004: Clarify Cap-ital America's role in dual-layer architecture</li> <li>ADR-006: Add examples of correct SequentialBuilder usage</li> <li> <p>ADR-007: Document state management best practices</p> </li> <li> <p>Create architectural diagrams</p> </li> <li>Collection phase flow (Cap-ital America)</li> <li>Processing phase flow (WorkflowOrchestrator)</li> <li>State management architecture</li> <li>API endpoint responsibilities</li> </ol>"},{"location":"architecture/decisions/adr-014-unified-workflow-architecture-assessment/#phase-5-workfloworchestrator-enhancement-week-4","title":"Phase 5: WorkflowOrchestrator Enhancement (Week 4)","text":"<p>Priority: LOW (after foundation solid)</p> <ol> <li>Expand WorkflowOrchestrator to full workflow</li> <li>Currently: MVP (Intake only)</li> <li>Add: Credit agent executor</li> <li>Add: Income agent executor</li> <li> <p>Add: Risk agent executor</p> </li> <li> <p>Complete SequentialBuilder workflow <pre><code>workflow = (SequentialBuilder()\n    .participants([\n        intake_executor,\n        credit_executor,\n        income_executor,\n        risk_executor\n    ])\n    .build())\n</code></pre></p> </li> <li> <p>Integrate MCP servers</p> </li> <li>Credit agent: Credit bureau MCP</li> <li>Income agent: Document processing MCP</li> <li>Risk agent: Financial calculations MCP</li> </ol>"},{"location":"architecture/decisions/adr-014-unified-workflow-architecture-assessment/#success-criteria","title":"Success Criteria","text":""},{"location":"architecture/decisions/adr-014-unified-workflow-architecture-assessment/#technical-success-criteria","title":"Technical Success Criteria","text":"<ol> <li>Architectural Compliance:</li> <li> Dual-layer architecture maintained (ADR-004)</li> <li> Cap-ital America separate from technical processing</li> <li> SequentialBuilder used correctly (homogeneous agents)</li> <li> <p> Clear phase separation (collection vs. processing)</p> </li> <li> <p>Type Safety:</p> </li> <li> Cap-ital America works with <code>Dict[str, Any]</code> (partial data)</li> <li> WorkflowOrchestrator requires <code>LoanApplication</code> (validated)</li> <li> <p> No type confusion in workflows</p> </li> <li> <p>State Management:</p> </li> <li> Single source of truth (ConversationSession)</li> <li> No SharedState duplication</li> <li> <p> AgentThread for framework context only</p> </li> <li> <p>Testing:</p> </li> <li> Cap-ital America tests independent</li> <li> WorkflowOrchestrator tests independent</li> <li> Integration tests for full flow</li> <li> Mock implementations aligned with real implementations</li> </ol>"},{"location":"architecture/decisions/adr-014-unified-workflow-architecture-assessment/#user-experience-success-criteria","title":"User Experience Success Criteria","text":"<ol> <li>Clear Phase UX:</li> <li> Conversational chat interface during collection</li> <li> Processing progress interface during workflow</li> <li> <p> Users understand current phase</p> </li> <li> <p>Progress Tracking:</p> </li> <li> Collection completion percentage (data-based)</li> <li> Processing status (phase-based)</li> <li> <p> Estimated time remaining (if possible)</p> </li> <li> <p>Error Handling:</p> </li> <li> Clear error messages for incomplete data</li> <li> Graceful handling of processing failures</li> <li> Ability to resume from errors</li> </ol>"},{"location":"architecture/decisions/adr-014-unified-workflow-architecture-assessment/#operational-success-criteria","title":"Operational Success Criteria","text":"<ol> <li>Performance:</li> <li> Cap-ital America responses &lt;2s (conversational)</li> <li> Intake validation &lt;10s (existing benchmark)</li> <li> <p> Full workflow &lt;60s (future target)</p> </li> <li> <p>Reliability:</p> </li> <li> 99.9% uptime for collection phase</li> <li> Graceful degradation for processing phase</li> <li> <p> Session recovery after failures</p> </li> <li> <p>Observability:</p> </li> <li> Clear logging for each phase</li> <li> Metrics for phase transitions</li> <li> Tracing for full workflows</li> </ol>"},{"location":"architecture/decisions/adr-014-unified-workflow-architecture-assessment/#alternatives-considered-and-why-rejected","title":"Alternatives Considered (and Why Rejected)","text":""},{"location":"architecture/decisions/adr-014-unified-workflow-architecture-assessment/#alternative-1-merge-unified-workflow-as-is","title":"Alternative 1: Merge Unified Workflow As-Is","text":"<p>Description: Accept current implementation and iterate.</p> <p>Rejected Because: - Violates multiple accepted ADRs - Creates technical debt from day 1 - Confuses architectural boundaries - Difficult to refactor later (frontend already integrated) - Mock doesn't match real implementation - No clear migration path to correct architecture</p>"},{"location":"architecture/decisions/adr-014-unified-workflow-architecture-assessment/#alternative-2-refactor-unified-workflow-to-be-compliant","title":"Alternative 2: Refactor Unified Workflow to Be Compliant","text":"<p>Description: Keep unified workflow concept, fix architectural issues.</p> <p>Rejected Because: - Fundamental concept is flawed (mixing collection and processing) - Cap-ital America doesn't belong in SequentialBuilder with technical agents - Existing pattern (RileyCoordinator + WorkflowOrchestrator) already works - Refactoring effort would be equivalent to using existing pattern - No clear benefit over existing architecture</p>"},{"location":"architecture/decisions/adr-014-unified-workflow-architecture-assessment/#alternative-3-abandon-multi-agent-architecture","title":"Alternative 3: Abandon Multi-Agent Architecture","text":"<p>Description: Use single agent for entire process.</p> <p>Rejected Because: - Violates ADR-001 (strategic multi-agent foundation) - Loses domain expertise separation - Contradicts project goals and vision - Doesn't scale as MCP servers expand - Regulatory compliance concerns - Loss of progressive autonomy benefits</p>"},{"location":"architecture/decisions/adr-014-unified-workflow-architecture-assessment/#alternative-4-use-sequentialbuilder-for-collection","title":"Alternative 4: Use SequentialBuilder for Collection","text":"<p>Description: Use SequentialBuilder to chain multiple collection agents.</p> <p>Rejected Because: - Collection is iterative, not sequential - User conversation needs back-and-forth - SequentialBuilder is one-directional - Cap-ital America already handles collection well as single agent - No clear benefit to multi-agent collection</p>"},{"location":"architecture/decisions/adr-014-unified-workflow-architecture-assessment/#conclusion","title":"Conclusion","text":""},{"location":"architecture/decisions/adr-014-unified-workflow-architecture-assessment/#final-recommendation-do-not-merge-unified-workflow","title":"Final Recommendation: Do Not Merge Unified Workflow","text":"<p>Instead: Use the established architectural pattern:</p> <ol> <li>RileyCoordinator handles conversational data collection</li> <li>WorkflowOrchestrator handles formal loan processing</li> <li>Two-endpoint API provides clear separation</li> <li>ConversationSession manages state transitions</li> </ol>"},{"location":"architecture/decisions/adr-014-unified-workflow-architecture-assessment/#why-this-is-critical_1","title":"Why This Is Critical","text":"<p>Technical Integrity: - Preserves multi-agent strategic foundation - Maintains dual-layer architecture - Keeps responsibilities clear</p> <p>Compliance &amp; Audit: - Separates personality from technical decisions - Maintains regulatory compliance patterns - Provides clear audit trails</p> <p>Maintainability: - Each component testable independently - Clear boundaries for future enhancements - Framework integration done correctly</p> <p>Scalability: - Collection phase can scale independently - Processing phase can scale independently - Agent expansion doesn't affect collection</p>"},{"location":"architecture/decisions/adr-014-unified-workflow-architecture-assessment/#next-steps","title":"Next Steps","text":"<ol> <li>Immediate: Document decision in ADR-010 (this document)</li> <li>Week 1: Implement two-endpoint API pattern</li> <li>Week 2: Align mock implementations</li> <li>Week 3: Update documentation and ADRs</li> <li>Week 4: Enhance WorkflowOrchestrator with full agent workflow</li> </ol>"},{"location":"architecture/decisions/adr-014-unified-workflow-architecture-assessment/#references","title":"References","text":"<ul> <li>ADR-001: Multi-Agent Strategic Foundation</li> <li>ADR-004: Personality-Driven Agent Architecture with Dual-Layer Design</li> <li>ADR-006: Sequential Workflow Orchestration with SequentialBuilder</li> <li>ADR-007: Conversation State Management with AgentThread</li> <li>CLAUDE.md: Project development guidelines and architectural principles</li> <li>Microsoft Agent Framework Documentation: SequentialBuilder best practices</li> </ul>"},{"location":"architecture/decisions/adr-014-unified-workflow-architecture-assessment/#approval-sign-off","title":"Approval &amp; Sign-off","text":"<p>System Architect: [Pending Review] Development Team: [Pending Review] Product Manager: [Pending Review]</p> <p>Status: Under Review Implementation Target: Not Approved - Use Existing Pattern Instead</p> <p>End of Architecture Decision Record</p>"},{"location":"architecture/decisions/adr-015-branch-protection-strategy/","title":"ADR-001: Branch Protection Strategy for Public Release","text":""},{"location":"architecture/decisions/adr-015-branch-protection-strategy/#status","title":"Status","text":"<p>Accepted</p>"},{"location":"architecture/decisions/adr-015-branch-protection-strategy/#context","title":"Context","text":"<p>Before making the Loan Avengers repository public, we need to establish branch protection rules to ensure code quality, security, and proper review processes. This prevents direct pushes to main, enforces CI/CD checks, and maintains professional development standards.</p>"},{"location":"architecture/decisions/adr-015-branch-protection-strategy/#decision","title":"Decision","text":""},{"location":"architecture/decisions/adr-015-branch-protection-strategy/#main-branch-protection-rules","title":"Main Branch Protection Rules","text":"<p>We will enforce the following protection rules on the <code>main</code> branch:</p> <ol> <li>Require Pull Request with Approval</li> <li>Minimum 1 approval required</li> <li>Dismiss stale reviews when new commits pushed</li> <li> <p>Require Code Owners approval (after CODEOWNERS created)</p> </li> <li> <p>Require Status Checks to Pass</p> </li> <li>Test API App (from <code>test-apps.yml</code>)</li> <li>Test UI App (from <code>test-apps.yml</code>)</li> <li>Validate Monorepo Structure (from <code>test-apps.yml</code>)</li> <li>Require Linked Issue (from <code>require-linked-issue.yml</code>)</li> <li> <p>Require branches up to date before merging</p> </li> <li> <p>Require Conversation Resolution</p> </li> <li> <p>All review comments must be resolved before merge</p> </li> <li> <p>Require Linear History</p> </li> <li>Enforce squash or rebase merging</li> <li> <p>Disable merge commits</p> </li> <li> <p>Restrict Direct Pushes</p> </li> <li>Only repository administrators can push</li> <li>All changes go through PR process</li> <li>No force pushes allowed</li> <li> <p>No branch deletions allowed</p> </li> <li> <p>No Bypassing Rules</p> </li> <li>Even admins must follow rules</li> <li>Exception: Emergency hotfixes (documented)</li> </ol>"},{"location":"architecture/decisions/adr-015-branch-protection-strategy/#github-repository-settings","title":"GitHub Repository Settings","text":"<p>Pull Requests: - Allow squash merging: \u2705 Enabled - Allow rebase merging: \u2705 Enabled - Allow merge commits: \u274c Disabled - Automatically delete head branches: \u2705 Enabled - Allow auto-merge: \u2705 Enabled (after approvals)</p> <p>Security &amp; Analysis: - Dependency graph: \u2705 Enabled - Dependabot alerts: \u2705 Enabled - Dependabot security updates: \u2705 Enabled - Code scanning (CodeQL): \u2705 Enabled - Secret scanning: \u2705 Enabled - Secret scanning push protection: \u2705 Enabled</p>"},{"location":"architecture/decisions/adr-015-branch-protection-strategy/#codeowners-configuration","title":"CODEOWNERS Configuration","text":"<p>Create <code>.github/CODEOWNERS</code>: <pre><code># Repository owner\n* @niksacdev\n\n# Workflow files require security review\n/.github/workflows/ @niksacdev\n\n# Security-sensitive files\n/SECURITY.md @niksacdev\n/.env.example @niksacdev\n</code></pre></p>"},{"location":"architecture/decisions/adr-015-branch-protection-strategy/#consequences","title":"Consequences","text":""},{"location":"architecture/decisions/adr-015-branch-protection-strategy/#positive","title":"Positive","text":"<ul> <li>Code Quality: All code reviewed before merging</li> <li>Security: Automated security checks prevent vulnerabilities</li> <li>Traceability: Every change linked to GitHub issue</li> <li>Professional: Industry-standard development practices</li> <li>Clean History: Linear history easier to understand and debug</li> </ul>"},{"location":"architecture/decisions/adr-015-branch-protection-strategy/#negative","title":"Negative","text":"<ul> <li>Slower Merges: PRs must wait for approvals and checks</li> <li>Setup Complexity: Initial configuration requires time</li> <li>Contributor Friction: New contributors face more requirements</li> </ul>"},{"location":"architecture/decisions/adr-015-branch-protection-strategy/#mitigation-strategies","title":"Mitigation Strategies","text":"<ul> <li>Clear documentation in CONTRIBUTING.md</li> <li>Pre-commit hooks help catch issues early</li> <li>Automated checks provide fast feedback</li> <li>Code Owners expedite review process</li> </ul>"},{"location":"architecture/decisions/adr-015-branch-protection-strategy/#implementation","title":"Implementation","text":""},{"location":"architecture/decisions/adr-015-branch-protection-strategy/#phase-1-immediate-pre-public","title":"Phase 1: Immediate (Pre-Public)","text":"<ol> <li>Create <code>.github/CODEOWNERS</code> file</li> <li>Configure main branch protection in GitHub Settings</li> <li>Enable all security features</li> <li>Test with sample PR</li> </ol>"},{"location":"architecture/decisions/adr-015-branch-protection-strategy/#phase-2-post-public","title":"Phase 2: Post-Public","text":"<ol> <li>Monitor for false positives in security scanning</li> <li>Adjust status check requirements if needed</li> <li>Add additional Code Owners as team grows</li> </ol>"},{"location":"architecture/decisions/adr-015-branch-protection-strategy/#emergency-procedures","title":"Emergency Procedures","text":"<p>When branch protection must be disabled: 1. Document reason in GitHub issue 2. Admin temporarily disables specific rule 3. Make emergency change with justification 4. Re-enable protection immediately 5. Create PR documenting what was done 6. Conduct retrospective</p>"},{"location":"architecture/decisions/adr-015-branch-protection-strategy/#references","title":"References","text":"<ul> <li>GitHub Branch Protection Documentation: https://docs.github.com/en/repositories/configuring-branches-and-merges-in-your-repository/managing-protected-branches</li> <li>CONTRIBUTING.md: Guidelines for contributors</li> <li>SECURITY.md: Security policy and reporting</li> </ul>"},{"location":"architecture/decisions/adr-015-branch-protection-strategy/#review-schedule","title":"Review Schedule","text":"<ul> <li>Weekly: Check for failed status checks</li> <li>Monthly: Review effectiveness of rules</li> <li>Quarterly: Audit admin access and bypass permissions</li> <li>After incidents: Update rules to prevent similar issues</li> </ul> <p>Date: 2025-10-01 Author: Claude Code Security Review Stakeholders: @niksacdev, future contributors</p>"},{"location":"architecture/decisions/adr-016-github-actions-security/","title":"ADR-002: GitHub Actions Security Standards","text":""},{"location":"architecture/decisions/adr-016-github-actions-security/#status","title":"Status","text":"<p>Accepted</p>"},{"location":"architecture/decisions/adr-016-github-actions-security/#context","title":"Context","text":"<p>Before making the repository public, we performed a comprehensive security review of all GitHub Actions workflows. We identified security issues ranging from critical (missing tokens) to best practice improvements. This ADR documents the security standards and required fixes.</p>"},{"location":"architecture/decisions/adr-016-github-actions-security/#decision","title":"Decision","text":""},{"location":"architecture/decisions/adr-016-github-actions-security/#security-standards-for-all-workflows","title":"Security Standards for All Workflows","text":"<ol> <li>Action Version Pinning</li> <li>Always use specific version tags (<code>@v4</code>, <code>@v5</code>)</li> <li>Never use <code>@main</code> or <code>@latest</code></li> <li> <p>Update versions via Dependabot</p> </li> <li> <p>Minimal Permissions</p> </li> <li>Use principle of least privilege</li> <li>Specify exact permissions needed</li> <li> <p>Default to read-only where possible</p> </li> <li> <p>Secret Handling</p> </li> <li>Reference secrets via <code>${{ secrets.NAME }}</code></li> <li>Never hardcode credentials</li> <li>Validate secrets exist before use</li> <li> <p>Add validation steps to workflows</p> </li> <li> <p>Secure Installation Methods</p> </li> <li>Use official GitHub Actions over <code>curl | sh</code></li> <li>Prefer <code>astral-sh/setup-uv@v5</code> over curl script</li> <li> <p>Validate checksums when downloading binaries</p> </li> <li> <p>No Sensitive Data in Logs</p> </li> <li>Mask secrets in workflow output</li> <li>Avoid printing environment variables</li> <li>Sanitize error messages</li> </ol>"},{"location":"architecture/decisions/adr-016-github-actions-security/#critical-fixes-required","title":"Critical Fixes Required","text":""},{"location":"architecture/decisions/adr-016-github-actions-security/#1-add-codecov-token-critical","title":"1. Add Codecov Token (CRITICAL)","text":"<p>Location: <code>.github/workflows/test-apps.yml:44-48</code></p> <pre><code>- name: Upload coverage to Codecov\n  uses: codecov/codecov-action@v4\n  with:\n    token: ${{ secrets.CODECOV_TOKEN }}\n    file: ./apps/api/coverage.xml\n    flags: api\n    name: api-coverage\n</code></pre> <p>Action: Add <code>CODECOV_TOKEN</code> to repository secrets</p>"},{"location":"architecture/decisions/adr-016-github-actions-security/#2-replace-curl-sh-pattern-high-priority","title":"2. Replace curl | sh Pattern (HIGH PRIORITY)","text":"<p>Location: <code>.github/workflows/test-apps.yml:24</code></p> <p>Replace: <pre><code>- name: Install uv\n  run: curl -LsSf https://astral.sh/uv/install.sh | sh\n</code></pre></p> <p>With: <pre><code>- name: Install uv\n  uses: astral-sh/setup-uv@v5\n  with:\n    version: \"latest\"\n    enable-cache: true\n</code></pre></p>"},{"location":"architecture/decisions/adr-016-github-actions-security/#3-remove-linting-continue-on-error-high-priority","title":"3. Remove Linting continue-on-error (HIGH PRIORITY)","text":"<p>Location: <code>.github/workflows/test-apps.yml:69-72</code></p> <p>After fixing all linting issues, change: <pre><code>- name: Run linting\n  working-directory: apps/ui\n  run: npm run lint || echo \"\u26a0\ufe0f  Linting has warnings\"\n  continue-on-error: true\n</code></pre></p> <p>To: <pre><code>- name: Run linting\n  working-directory: apps/ui\n  run: npm run lint\n</code></pre></p>"},{"location":"architecture/decisions/adr-016-github-actions-security/#4-add-secret-validation-high-priority","title":"4. Add Secret Validation (HIGH PRIORITY)","text":"<p>Location: <code>.github/workflows/claude-code-review.yml</code> and <code>.github/workflows/claude.yml</code></p> <p>Add validation step: <pre><code>- name: Validate secrets\n  run: |\n    if [ -z \"${{ secrets.CLAUDE_CODE_OAUTH_TOKEN }}\" ]; then\n      echo \"\u274c CLAUDE_CODE_OAUTH_TOKEN not configured\"\n      echo \"See: https://docs.claude.com/en/docs/claude-code\"\n      exit 1\n    fi\n    echo \"\u2705 Claude Code token configured\"\n</code></pre></p>"},{"location":"architecture/decisions/adr-016-github-actions-security/#workflow-specific-security-grades","title":"Workflow-Specific Security Grades","text":"<ol> <li>test-apps.yml: B+ (needs Codecov token, uv action, linting fix)</li> <li>docs.yml: A- (excellent, minimal issues)</li> <li>require-linked-issue.yml: A (well-designed)</li> <li>claude-code-review.yml: B+ (needs secret validation)</li> <li>claude.yml: A- (needs secret validation)</li> </ol>"},{"location":"architecture/decisions/adr-016-github-actions-security/#recommended-enhancements","title":"Recommended Enhancements","text":""},{"location":"architecture/decisions/adr-016-github-actions-security/#enable-dependabot","title":"Enable Dependabot","text":"<p>Create <code>.github/dependabot.yml</code>: <pre><code>version: 2\nupdates:\n  - package-ecosystem: \"pip\"\n    directory: \"/apps/api\"\n    schedule:\n      interval: \"weekly\"\n    open-pull-requests-limit: 10\n\n  - package-ecosystem: \"npm\"\n    directory: \"/apps/ui\"\n    schedule:\n      interval: \"weekly\"\n    open-pull-requests-limit: 10\n\n  - package-ecosystem: \"github-actions\"\n    directory: \"/\"\n    schedule:\n      interval: \"weekly\"\n</code></pre></p>"},{"location":"architecture/decisions/adr-016-github-actions-security/#add-workflow-concurrency-limits","title":"Add Workflow Concurrency Limits","text":"<p>For Claude workflows, add: <pre><code>concurrency:\n  group: claude-review-${{ github.event.pull_request.number }}\n  cancel-in-progress: true\n\ntimeout-minutes: 15\n</code></pre></p>"},{"location":"architecture/decisions/adr-016-github-actions-security/#add-security-scanning","title":"Add Security Scanning","text":"<p>Create <code>.github/workflows/security.yml</code> with: - CodeQL analysis for Python and JavaScript - Bandit security scanning for Python - Weekly scheduled runs - Upload results to GitHub Security tab</p>"},{"location":"architecture/decisions/adr-016-github-actions-security/#consequences","title":"Consequences","text":""},{"location":"architecture/decisions/adr-016-github-actions-security/#positive","title":"Positive","text":"<ul> <li>Secure CI/CD: Workflows follow security best practices</li> <li>Automated Updates: Dependabot keeps actions current</li> <li>Cost Control: Timeouts and concurrency prevent runaway costs</li> <li>Visibility: Security scanning provides early warning</li> </ul>"},{"location":"architecture/decisions/adr-016-github-actions-security/#negative","title":"Negative","text":"<ul> <li>Initial Setup Time: Configuring tokens and secrets takes effort</li> <li>False Positives: Security scans may flag benign code</li> <li>Maintenance: Regular review of Dependabot PRs needed</li> </ul>"},{"location":"architecture/decisions/adr-016-github-actions-security/#metrics","title":"Metrics","text":"<ul> <li>All workflows must pass security review before public release</li> <li>Zero critical security issues in production workflows</li> <li>Dependabot PRs reviewed within 7 days</li> <li>Security scanning results reviewed weekly</li> </ul>"},{"location":"architecture/decisions/adr-016-github-actions-security/#implementation","title":"Implementation","text":""},{"location":"architecture/decisions/adr-016-github-actions-security/#pre-public-release-checklist","title":"Pre-Public Release Checklist","text":"<ul> <li> Add CODECOV_TOKEN to repository secrets</li> <li> Update test-apps.yml with Codecov token</li> <li> Replace curl | sh with astral-sh/setup-uv@v5</li> <li> Fix all UI linting issues</li> <li> Remove continue-on-error from UI linting</li> <li> Add secret validation to Claude workflows</li> <li> Create .github/dependabot.yml</li> <li> Enable GitHub Security features</li> <li> Test all workflows with sample PR</li> </ul>"},{"location":"architecture/decisions/adr-016-github-actions-security/#post-public-enhancements","title":"Post-Public Enhancements","text":"<ul> <li> Create security.yml workflow with CodeQL</li> <li> Add Bandit scanning</li> <li> Add concurrency limits to Claude workflows</li> <li> Set up automated security scanning reports</li> <li> Configure workflow usage alerts</li> </ul>"},{"location":"architecture/decisions/adr-016-github-actions-security/#references","title":"References","text":"<ul> <li>GitHub Actions Security Best Practices: https://docs.github.com/en/actions/security-guides/security-hardening-for-github-actions</li> <li>Dependabot Configuration: https://docs.github.com/en/code-security/dependabot</li> <li>CodeQL Documentation: https://docs.github.com/en/code-security/code-scanning</li> <li>SECURITY.md: Repository security policy</li> </ul>"},{"location":"architecture/decisions/adr-016-github-actions-security/#alternatives-considered","title":"Alternatives Considered","text":"<ol> <li>Self-hosted Runners: Rejected due to maintenance overhead</li> <li>Third-party Security Tools: Using GitHub native features for simplicity</li> <li>Manual Reviews Only: Rejected; automated checks catch issues faster</li> </ol> <p>Date: 2025-10-01 Author: Claude Code Security Review Overall Security Grade: B+ (Good, with room for improvement) Target Grade: A (after critical fixes)</p>"},{"location":"architecture/decisions/adr-017-public-release-readiness/","title":"ADR-003: Public Release Readiness Standards","text":""},{"location":"architecture/decisions/adr-017-public-release-readiness/#status","title":"Status","text":"<p>Accepted</p>"},{"location":"architecture/decisions/adr-017-public-release-readiness/#context","title":"Context","text":"<p>The Loan Avengers repository is currently private and being prepared for public release. We need to establish clear standards for what constitutes \"ready for public\" to ensure security, quality, and professionalism. This ADR documents the comprehensive readiness assessment and required actions.</p>"},{"location":"architecture/decisions/adr-017-public-release-readiness/#decision","title":"Decision","text":""},{"location":"architecture/decisions/adr-017-public-release-readiness/#public-release-requirements","title":"Public Release Requirements","text":"<p>We establish the following requirements for public repository release:</p>"},{"location":"architecture/decisions/adr-017-public-release-readiness/#1-security-documentation-required","title":"1. Security Documentation (REQUIRED)","text":"<ul> <li>\u2705 SECURITY.md with vulnerability reporting process</li> <li>\u2705 Supported versions table</li> <li>\u2705 Security best practices for contributors</li> <li>\u2705 Pre-deployment security checklist</li> <li>\u2705 AI-specific security considerations</li> <li>\u2705 Responsible disclosure policy</li> </ul>"},{"location":"architecture/decisions/adr-017-public-release-readiness/#2-legal-licensing-required","title":"2. Legal &amp; Licensing (REQUIRED)","text":"<ul> <li>\u2705 LICENSE file (MIT License)</li> <li>\u2705 Copyright notice (\u00a9 2025 Nik Sachdeva)</li> <li>\u2705 License badge in README</li> </ul>"},{"location":"architecture/decisions/adr-017-public-release-readiness/#3-community-guidelines-required","title":"3. Community Guidelines (REQUIRED)","text":"<ul> <li>\u2705 CONTRIBUTING.md with:</li> <li>Development setup instructions</li> <li>Code style guidelines (Ruff)</li> <li>PR submission process</li> <li>Testing requirements (\u226585% coverage)</li> <li>Commit message conventions</li> <li>\u26a0\ufe0f CODE_OF_CONDUCT.md (optional but recommended)</li> </ul>"},{"location":"architecture/decisions/adr-017-public-release-readiness/#4-branch-protection-required","title":"4. Branch Protection (REQUIRED)","text":"<ul> <li>\u26a0\ufe0f Main branch protection configured (see ADR-001)</li> <li>\u26a0\ufe0f Status checks enforced</li> <li>\u26a0\ufe0f PR approval required</li> <li>\u26a0\ufe0f Conversation resolution required</li> <li>\u26a0\ufe0f CODEOWNERS file created</li> </ul>"},{"location":"architecture/decisions/adr-017-public-release-readiness/#5-github-actions-security-required","title":"5. GitHub Actions Security (REQUIRED)","text":"<ul> <li>\u26a0\ufe0f All critical security fixes applied (see ADR-002)</li> <li>\u26a0\ufe0f Codecov token configured</li> <li>\u26a0\ufe0f curl | sh patterns replaced</li> <li>\u26a0\ufe0f UI linting issues fixed</li> <li>\u26a0\ufe0f Secret validation added</li> </ul>"},{"location":"architecture/decisions/adr-017-public-release-readiness/#6-github-security-features-required","title":"6. GitHub Security Features (REQUIRED)","text":"<ul> <li>\u26a0\ufe0f Dependency graph enabled</li> <li>\u26a0\ufe0f Dependabot alerts enabled</li> <li>\u26a0\ufe0f Dependabot security updates enabled</li> <li>\u26a0\ufe0f Code scanning (CodeQL) enabled</li> <li>\u26a0\ufe0f Secret scanning enabled</li> <li>\u26a0\ufe0f Secret scanning push protection enabled</li> </ul>"},{"location":"architecture/decisions/adr-017-public-release-readiness/#7-documentation-quality-required","title":"7. Documentation Quality (REQUIRED)","text":"<ul> <li>\u2705 README.md with clear description</li> <li>\u2705 GitHub Pages deployed (https://niksacdev.github.io/loan-avengers/)</li> <li>\u2705 API documentation</li> <li>\u2705 Architecture diagrams</li> <li>\u26a0\ufe0f README badges (ready to add)</li> </ul>"},{"location":"architecture/decisions/adr-017-public-release-readiness/#8-code-quality-standards-required","title":"8. Code Quality Standards (REQUIRED)","text":"<ul> <li>\u2705 Ruff linting configured</li> <li>\u2705 Test coverage \u226585% threshold</li> <li>\u2705 Pre-commit validation script</li> <li>\u26a0\ufe0f All linting issues resolved</li> </ul>"},{"location":"architecture/decisions/adr-017-public-release-readiness/#readiness-assessment","title":"Readiness Assessment","text":"<p>Overall Readiness: 85%</p> Category Score Status Blocker Security Documentation 95% \u2705 Excellent No License &amp; Legal 100% \u2705 Complete No GitHub Actions Security 70% \ud83d\udfe1 Needs fixes Yes Branch Protection 0% \ud83d\udd34 Not configured Yes Documentation 90% \u2705 Excellent No Community Guidelines 60% \ud83d\udfe1 Missing optional items No Security Features 50% \ud83d\udfe1 Need to enable Yes Code Quality 80% \ud83d\udfe1 UI linting issues Yes"},{"location":"architecture/decisions/adr-017-public-release-readiness/#critical-blockers-must-fix","title":"Critical Blockers (Must Fix)","text":"<ol> <li>Codecov Token - Blocks coverage reporting</li> <li>UI Linting Issues - Code quality standard</li> <li>Branch Protection - Security requirement</li> <li>GitHub Security Features - Free and essential</li> <li>GitHub Actions Fixes - Security requirement</li> </ol>"},{"location":"architecture/decisions/adr-017-public-release-readiness/#consequences","title":"Consequences","text":""},{"location":"architecture/decisions/adr-017-public-release-readiness/#positive","title":"Positive","text":"<ul> <li>Professional: Repository meets industry standards</li> <li>Secure: Multiple layers of security protection</li> <li>Welcoming: Clear contributor guidelines</li> <li>Maintainable: Quality standards enforced</li> <li>Discoverable: Good documentation attracts contributors</li> </ul>"},{"location":"architecture/decisions/adr-017-public-release-readiness/#negative","title":"Negative","text":"<ul> <li>Setup Time: 4-6 hours to complete all requirements</li> <li>Ongoing Maintenance: Security updates need review</li> <li>Contributor Friction: More hoops for new contributors</li> </ul>"},{"location":"architecture/decisions/adr-017-public-release-readiness/#success-metrics","title":"Success Metrics","text":"<ul> <li>Zero critical security vulnerabilities at launch</li> <li>All CI/CD checks passing</li> <li>Branch protection prevents direct pushes</li> <li>Documentation complete and professional</li> <li>First contributor able to submit PR without confusion</li> </ul>"},{"location":"architecture/decisions/adr-017-public-release-readiness/#implementation","title":"Implementation","text":""},{"location":"architecture/decisions/adr-017-public-release-readiness/#phase-1-critical-fixes-1-2-hours","title":"Phase 1: Critical Fixes (1-2 hours)","text":"<p>Must complete before going public:</p> <ol> <li>Add Codecov token to GitHub Secrets</li> <li>Update test-apps.yml with token</li> <li>Replace curl | sh with astral-sh/setup-uv@v5</li> <li>Fix all UI linting errors</li> <li>Remove continue-on-error from UI linting</li> <li>Add secret validation to Claude workflows</li> <li>Insert badges into README.md</li> </ol> <p>Verification: Create test PR and ensure all checks pass</p>"},{"location":"architecture/decisions/adr-017-public-release-readiness/#phase-2-high-priority-2-3-hours","title":"Phase 2: High Priority (2-3 hours)","text":"<p>Should complete before going public:</p> <ol> <li>Create <code>.github/dependabot.yml</code></li> <li>Create <code>.github/CODEOWNERS</code></li> <li>Configure branch protection for main</li> <li>Enable all GitHub Security features:</li> <li>Dependabot alerts</li> <li>Secret scanning</li> <li>Code scanning (CodeQL)</li> <li>Push protection</li> <li>Test branch protection with PR</li> <li>Verify CONTRIBUTING.md is clear</li> </ol> <p>Verification: Test complete PR workflow end-to-end</p>"},{"location":"architecture/decisions/adr-017-public-release-readiness/#phase-3-recommended-enhancements-1-2-days-post-public","title":"Phase 3: Recommended Enhancements (1-2 days, post-public)","text":"<p>Can be completed after going public:</p> <ol> <li>Add security scanning workflow (security.yml)</li> <li>Add Bandit security scanning</li> <li>Add concurrency limits to Claude workflows</li> <li>Add timeout limits to workflows</li> <li>Set up OpenSSF Scorecard</li> <li>Create CODE_OF_CONDUCT.md</li> <li>Enable GitHub Discussions</li> </ol>"},{"location":"architecture/decisions/adr-017-public-release-readiness/#pre-public-release-checklist","title":"Pre-Public Release Checklist","text":""},{"location":"architecture/decisions/adr-017-public-release-readiness/#critical-must-complete","title":"Critical (Must Complete)","text":"<ul> <li> Codecov token added to secrets</li> <li> test-apps.yml updated with Codecov token</li> <li> curl | sh replaced with astral-sh/setup-uv@v5</li> <li> All UI linting errors fixed</li> <li> continue-on-error removed from UI linting</li> <li> Secret validation added to Claude workflows</li> <li> Badges added to README.md</li> <li> Review commit history for secrets</li> <li> All .env.example values are placeholders</li> </ul>"},{"location":"architecture/decisions/adr-017-public-release-readiness/#high-priority-should-complete","title":"High Priority (Should Complete)","text":"<ul> <li> dependabot.yml created</li> <li> CODEOWNERS created</li> <li> Main branch protection configured</li> <li> Status checks verified in branch protection</li> <li> Dependabot alerts enabled</li> <li> Secret scanning enabled</li> <li> Secret push protection enabled</li> <li> CodeQL scanning enabled</li> <li> Test PR created and verified</li> <li> CONTRIBUTING.md is clear and accurate</li> </ul>"},{"location":"architecture/decisions/adr-017-public-release-readiness/#recommended-nice-to-have","title":"Recommended (Nice to Have)","text":"<ul> <li> Security scanning workflow added</li> <li> Bandit scanning configured</li> <li> OpenSSF Scorecard badge added</li> <li> CODE_OF_CONDUCT.md created</li> <li> GitHub Discussions enabled</li> <li> Signed commits considered</li> <li> Environment protection for GitHub Pages</li> </ul>"},{"location":"architecture/decisions/adr-017-public-release-readiness/#final-verification","title":"Final Verification","text":"<ul> <li> Create test issue</li> <li> Create test PR with issue link</li> <li> Verify all status checks run</li> <li> Verify branch protection blocks failing PRs</li> <li> Verify conversation resolution requirement</li> <li> Verify PR approval requirement</li> <li> Test auto-delete of branch after merge</li> <li> Review repository settings one final time</li> <li> Make repository public</li> </ul>"},{"location":"architecture/decisions/adr-017-public-release-readiness/#security-considerations","title":"Security Considerations","text":""},{"location":"architecture/decisions/adr-017-public-release-readiness/#secrets-audit","title":"Secrets Audit","text":"<p>Before going public:</p> <ol> <li>Repository Secrets - Review Settings \u2192 Secrets:</li> <li>CODECOV_TOKEN (coverage reporting)</li> <li>CLAUDE_CODE_OAUTH_TOKEN (Claude workflows)</li> <li> <p>Any Azure credentials (use Managed Identity in production)</p> </li> <li> <p>Commit History - Scan for accidentally committed secrets:    <pre><code>git log --all --full-history --source -- '*\\.env'\n</code></pre></p> </li> <li>Use git-secrets or gitleaks to scan</li> <li> <p>Consider BFG Repo-Cleaner if secrets found</p> </li> <li> <p>Public Visibility Impact:</p> </li> <li>All commit history becomes visible</li> <li>All issues and PRs become searchable</li> <li>GitHub Actions logs are public</li> <li>Dependencies scanned by GitHub Advisory Database</li> </ol>"},{"location":"architecture/decisions/adr-017-public-release-readiness/#quality-gates","title":"Quality Gates","text":"<p>All PRs must: 1. Pass all CI/CD checks 2. Have \u22651 approval 3. Resolve all conversations 4. Link to a GitHub issue 5. Maintain \u226585% test coverage 6. Pass Ruff linting 7. Be up to date with main branch</p>"},{"location":"architecture/decisions/adr-017-public-release-readiness/#references","title":"References","text":"<ul> <li>ADR-001: Branch Protection Strategy</li> <li>ADR-002: GitHub Actions Security Standards</li> <li>SECURITY.md: Security policy and reporting</li> <li>CONTRIBUTING.md: Contribution guidelines</li> </ul>"},{"location":"architecture/decisions/adr-017-public-release-readiness/#timeline","title":"Timeline","text":""},{"location":"architecture/decisions/adr-017-public-release-readiness/#optimistic-4-6-hours","title":"Optimistic (4-6 hours)","text":"<ul> <li>Phase 1 Critical: 1-2 hours</li> <li>Phase 2 High Priority: 2-3 hours</li> <li>Testing &amp; Verification: 1 hour</li> </ul>"},{"location":"architecture/decisions/adr-017-public-release-readiness/#conservative-1-2-days","title":"Conservative (1-2 days)","text":"<ul> <li>Phase 1 Critical: 0.5 day</li> <li>Phase 2 High Priority: 0.5 day</li> <li>Phase 3 Enhancements: 0.5 day</li> <li>Testing &amp; Documentation: 0.5 day</li> </ul> <p>Recommendation: Plan for 1 full day to complete Phases 1-2 and thoroughly test.</p>"},{"location":"architecture/decisions/adr-017-public-release-readiness/#alternatives-considered","title":"Alternatives Considered","text":"<ol> <li>Minimal Public Release: Rejected - would compromise security</li> <li>Delayed Public Release: Considered - but requirements are achievable quickly</li> <li>Private Release First: Rejected - want full community engagement</li> <li>No Branch Protection: Rejected - security requirement</li> </ol>"},{"location":"architecture/decisions/adr-017-public-release-readiness/#review-monitoring","title":"Review &amp; Monitoring","text":""},{"location":"architecture/decisions/adr-017-public-release-readiness/#post-public-launch","title":"Post-Public Launch","text":"<ul> <li>Week 1: Monitor for security alerts, review first community PRs</li> <li>Month 1: Review effectiveness of branch protection and quality gates</li> <li>Quarter 1: Assess contributor experience, update guidelines as needed</li> </ul>"},{"location":"architecture/decisions/adr-017-public-release-readiness/#maintenance-schedule","title":"Maintenance Schedule","text":"<ul> <li>Weekly: Review Dependabot PRs and security alerts</li> <li>Monthly: Audit repository settings and permissions</li> <li>Quarterly: Review ADRs and update if standards changed</li> </ul> <p>Date: 2025-10-01 Author: Claude Code Security &amp; Compliance Review Current Status: \ud83d\udfe1 READY WITH CRITICAL FIXES Recommendation: Address all \ud83d\udd34 Critical and \ud83d\udfe1 High Priority blockers before making public Target Launch: After completing Phase 1 &amp; 2 (estimated 4-6 hours)</p>"},{"location":"deployment/","title":"Index","text":"<p>Coming soon...</p>"},{"location":"deployment/azure-deployment-plan/","title":"\ud83c\udfaf Azure Secure Deployment - Step-by-Step Best Practices Plan","text":""},{"location":"deployment/azure-deployment-plan/#complete-implementation-roadmap","title":"\ud83d\udccb Complete Implementation Roadmap","text":"<p>This plan follows enterprise-grade DevOps best practices for secure cloud deployment with proper learning progression.</p>"},{"location":"deployment/azure-deployment-plan/#phase-1-foundation-prerequisites","title":"\ud83c\udfd7\ufe0f Phase 1: Foundation &amp; Prerequisites","text":"<p>Timeline: Day 1-2 (4-6 hours)</p>"},{"location":"deployment/azure-deployment-plan/#day-1-environment-setup-azure-fundamentals","title":"Day 1: Environment Setup &amp; Azure Fundamentals","text":""},{"location":"deployment/azure-deployment-plan/#step-11-development-environment-setup-30-min","title":"Step 1.1: Development Environment Setup (30 min)","text":"<p>Best Practice: Consistent tooling across team <pre><code># Use the dev container we just created!\n# Open in VS Code Dev Container or GitHub Codespaces\n# All tools are pre-installed: Azure CLI, Terraform, Docker, etc.\n\n# Verify installations in dev container\naz version\nterraform version\n</code></pre></p> <p>Learning Focus: Understanding the deployment toolchain</p>"},{"location":"deployment/azure-deployment-plan/#step-12-azure-subscription-rbac-setup-45-min","title":"Step 1.2: Azure Subscription &amp; RBAC Setup (45 min)","text":"<p>Best Practice: Least privilege access with proper role assignments</p> <ol> <li> <p>Subscription Analysis <pre><code>az login\naz account list --output table\naz account show --query '{subscriptionId:id, name:name, tenantId:tenantId}'\n</code></pre></p> </li> <li> <p>Resource Naming Convention Setup</p> </li> <li>Pattern: <code>{organization}-{project}-{component}-{environment}-{instance}</code></li> <li>Example: <code>contoso-loanavengers-openai-dev-001</code></li> <li> <p>Benefits: Consistent naming, easy resource identification, compliance</p> </li> <li> <p>RBAC Best Practices <pre><code># Check current permissions\naz role assignment list --assignee $(az account show --query user.name -o tsv) --output table\n\n# Verify required roles (Contributor minimum for deployment)\naz role definition list --name \"Contributor\" --output table\n</code></pre></p> </li> </ol> <p>Learning Focus: Azure identity and access management fundamentals</p>"},{"location":"deployment/azure-deployment-plan/#step-13-service-principal-creation-30-min","title":"Step 1.3: Service Principal Creation (30 min)","text":"<p>Best Practice: Dedicated service identities for automation</p> <pre><code># Create service principal with minimal required permissions\nSUBSCRIPTION_ID=$(az account show --query id -o tsv)\nSP_NAME=\"sp-loanavengers-terraform-dev\"\n\naz ad sp create-for-rbac \\\n  --name $SP_NAME \\\n  --role \"Contributor\" \\\n  --scopes \"/subscriptions/$SUBSCRIPTION_ID\" \\\n  --query '{clientId:appId, clientSecret:password, tenantId:tenant, subscriptionId:'\"$SUBSCRIPTION_ID\"'}' \\\n  --output json &gt; service-principal.json\n\n# Store securely (never commit to git)\necho \"service-principal.json\" &gt;&gt; .gitignore\n</code></pre> <p>Learning Focus: Service principal vs managed identity, security implications</p>"},{"location":"deployment/azure-deployment-plan/#phase-2-infrastructure-architecture","title":"\ud83c\udfdb\ufe0f Phase 2: Infrastructure Architecture","text":"<p>Timeline: Day 3-4 (6-8 hours)</p>"},{"location":"deployment/azure-deployment-plan/#day-3-terraform-state-management-core-infrastructure","title":"Day 3: Terraform State Management &amp; Core Infrastructure","text":""},{"location":"deployment/azure-deployment-plan/#step-21-terraform-remote-state-setup-60-min","title":"Step 2.1: Terraform Remote State Setup (60 min)","text":"<p>Best Practice: Centralized state management with locking</p> <ol> <li> <p>State Storage Architecture Design <pre><code>terraform-state-rg/\n\u2514\u2500\u2500 storage-account-{unique}/\n    \u2514\u2500\u2500 tfstate-container/\n        \u251c\u2500\u2500 dev/terraform.tfstate\n        \u251c\u2500\u2500 staging/terraform.tfstate\n        \u2514\u2500\u2500 prod/terraform.tfstate\n</code></pre></p> </li> <li> <p>Create State Infrastructure <pre><code># Generate unique storage account name\nRANDOM_SUFFIX=$(openssl rand -hex 4)\nSTORAGE_ACCOUNT=\"sttfloanavengers$RANDOM_SUFFIX\"\nRESOURCE_GROUP=\"rg-terraform-state-dev\"\n\n# Create resource group for state management\naz group create \\\n  --name $RESOURCE_GROUP \\\n  --location \"East US\" \\\n  --tags project=loan-avengers purpose=terraform-state\n\n# Create storage account with security features\naz storage account create \\\n  --resource-group $RESOURCE_GROUP \\\n  --name $STORAGE_ACCOUNT \\\n  --sku Standard_LRS \\\n  --encryption-services blob \\\n  --https-only true \\\n  --min-tls-version TLS1_2 \\\n  --allow-blob-public-access false\n\n# Create container with private access\naz storage container create \\\n  --name tfstate \\\n  --account-name $STORAGE_ACCOUNT \\\n  --auth-mode login \\\n  --public-access off\n</code></pre></p> </li> </ol> <p>Learning Focus: State management, security configurations, Azure storage</p>"},{"location":"deployment/azure-deployment-plan/#step-22-terraform-module-architecture-design-90-min","title":"Step 2.2: Terraform Module Architecture Design (90 min)","text":"<p>Best Practice: Modular, reusable infrastructure components</p> <ol> <li> <p>Module Structure Planning <pre><code>infrastructure/terraform/\n\u251c\u2500\u2500 environments/\n\u2502   \u251c\u2500\u2500 dev/\n\u2502   \u2502   \u251c\u2500\u2500 main.tf              # Environment-specific config\n\u2502   \u2502   \u251c\u2500\u2500 variables.tf         # Environment variables\n\u2502   \u2502   \u251c\u2500\u2500 terraform.tfvars     # Environment values\n\u2502   \u2502   \u2514\u2500\u2500 outputs.tf           # Environment outputs\n\u2502   \u251c\u2500\u2500 staging/\n\u2502   \u2514\u2500\u2500 prod/\n\u251c\u2500\u2500 modules/\n\u2502   \u251c\u2500\u2500 networking/              # VNet, subnets, NSGs\n\u2502   \u251c\u2500\u2500 security/                # Key Vault, Managed Identity\n\u2502   \u251c\u2500\u2500 ai-services/             # Azure OpenAI, Cognitive Services\n\u2502   \u251c\u2500\u2500 monitoring/              # Application Insights, Log Analytics\n\u2502   \u2514\u2500\u2500 container-platform/     # Container Apps Environment\n\u2514\u2500\u2500 shared/\n    \u251c\u2500\u2500 locals.tf                # Common configurations\n    \u2514\u2500\u2500 data-sources.tf          # Shared data sources\n</code></pre></p> </li> <li> <p>Module Design Principles</p> </li> <li>Single Responsibility: Each module has one clear purpose</li> <li>Loose Coupling: Modules communicate through well-defined interfaces</li> <li>High Cohesion: Related resources grouped together</li> <li>Reusability: Same module works across environments</li> </ol> <p>Learning Focus: Infrastructure as Code design patterns, module architecture</p>"},{"location":"deployment/azure-deployment-plan/#step-23-network-security-architecture-90-min","title":"Step 2.3: Network Security Architecture (90 min)","text":"<p>Best Practice: Defense in depth with zero-trust networking</p> <ol> <li> <p>Network Topology Design <pre><code>Virtual Network (10.0.0.0/16)\n\u251c\u2500\u2500 Management Subnet (10.0.1.0/24)     # Jump boxes, admin tools\n\u251c\u2500\u2500 Application Subnet (10.0.2.0/24)    # Container Apps\n\u251c\u2500\u2500 Data Subnet (10.0.3.0/24)           # Private endpoints\n\u2514\u2500\u2500 Gateway Subnet (10.0.255.0/27)      # VPN/ExpressRoute (future)\n</code></pre></p> </li> <li> <p>Security Controls Planning</p> </li> <li>Network Security Groups: Layer 4 firewall rules</li> <li>Private Endpoints: No internet access to PaaS services</li> <li>Private DNS Zones: Internal name resolution</li> <li>Service Endpoints: Direct Azure backbone connectivity</li> </ol> <p>Learning Focus: Azure networking, security architecture, private connectivity</p>"},{"location":"deployment/azure-deployment-plan/#day-4-ai-services-security-configuration","title":"Day 4: AI Services &amp; Security Configuration","text":""},{"location":"deployment/azure-deployment-plan/#step-24-azure-openai-architecture-120-min","title":"Step 2.4: Azure OpenAI Architecture (120 min)","text":"<p>Best Practice: Secure AI services with proper access controls</p> <ol> <li> <p>OpenAI Service Configuration Planning <pre><code>Azure OpenAI Service\n\u251c\u2500\u2500 Model Deployments\n\u2502   \u251c\u2500\u2500 gpt-4 (20 TPM)              # Complex reasoning\n\u2502   \u251c\u2500\u2500 gpt-35-turbo (50 TPM)       # Fast operations\n\u2502   \u2514\u2500\u2500 text-embedding-ada-002      # Document processing\n\u251c\u2500\u2500 Network Access\n\u2502   \u251c\u2500\u2500 Private Endpoint            # VNet connectivity\n\u2502   \u251c\u2500\u2500 Public Access: Disabled     # Internet blocked\n\u2502   \u2514\u2500\u2500 Firewall Rules              # IP restrictions (backup)\n\u2514\u2500\u2500 Authentication\n    \u251c\u2500\u2500 Managed Identity            # Primary auth method\n    \u2514\u2500\u2500 API Keys in Key Vault       # Backup access method\n</code></pre></p> </li> <li> <p>Capacity Planning</p> </li> <li>Development: Lower TPM limits for cost optimization</li> <li>Production: Higher TPM with auto-scaling considerations</li> <li>Monitoring: Usage tracking and alerting thresholds</li> </ol> <p>Learning Focus: AI service configuration, capacity planning, cost optimization</p>"},{"location":"deployment/azure-deployment-plan/#step-25-key-vault-security-design-60-min","title":"Step 2.5: Key Vault Security Design (60 min)","text":"<p>Best Practice: Centralized secrets management with proper access policies</p> <ol> <li>Key Vault Architecture <pre><code>Key Vault Configuration\n\u251c\u2500\u2500 Access Policies\n\u2502   \u251c\u2500\u2500 Terraform SP: Full management access\n\u2502   \u251c\u2500\u2500 Application MI: Secret read access\n\u2502   \u2514\u2500\u2500 Developers: Limited secret access\n\u251c\u2500\u2500 Network Access\n\u2502   \u251c\u2500\u2500 Private Endpoint: VNet connectivity\n\u2502   \u2514\u2500\u2500 Public Access: Disabled\n\u251c\u2500\u2500 Secrets Structure\n\u2502   \u251c\u2500\u2500 azure-openai-api-key\n\u2502   \u251c\u2500\u2500 azure-openai-endpoint\n\u2502   \u251c\u2500\u2500 application-insights-key\n\u2502   \u2514\u2500\u2500 database-connection-string\n\u2514\u2500\u2500 Security Features\n    \u251c\u2500\u2500 Soft Delete: Enabled\n    \u251c\u2500\u2500 Purge Protection: Enabled (prod)\n    \u2514\u2500\u2500 RBAC Integration: Planned\n</code></pre></li> </ol> <p>Learning Focus: Secret management, access control patterns, security hardening</p>"},{"location":"deployment/azure-deployment-plan/#phase-3-cicd-pipeline-implementation","title":"\ud83d\ude80 Phase 3: CI/CD Pipeline Implementation","text":"<p>Timeline: Day 5-6 (6-8 hours)</p>"},{"location":"deployment/azure-deployment-plan/#day-5-github-actions-pipeline-architecture","title":"Day 5: GitHub Actions Pipeline Architecture","text":""},{"location":"deployment/azure-deployment-plan/#step-31-repository-security-setup-45-min","title":"Step 3.1: Repository Security Setup (45 min)","text":"<p>Best Practice: Secure credential management in CI/CD</p> <ol> <li> <p>GitHub Secrets Configuration <pre><code>Repository Secrets:\n\u251c\u2500\u2500 AZURE_CLIENT_ID           # Service Principal ID\n\u251c\u2500\u2500 AZURE_CLIENT_SECRET       # Service Principal Secret\n\u251c\u2500\u2500 AZURE_TENANT_ID           # Azure AD Tenant\n\u251c\u2500\u2500 AZURE_SUBSCRIPTION_ID     # Target Subscription\n\u251c\u2500\u2500 TF_STATE_STORAGE_ACCOUNT  # Terraform State Storage\n\u2514\u2500\u2500 TF_STATE_ACCESS_KEY       # Storage Account Key\n</code></pre></p> </li> <li> <p>Branch Protection Setup <pre><code># Enable branch protection on main\n# - Require PR reviews\n# - Require status checks\n# - Restrict pushes to admins\n# - Enable deletion protection\n</code></pre></p> </li> </ol> <p>Learning Focus: CI/CD security, secret management, branch protection strategies</p>"},{"location":"deployment/azure-deployment-plan/#step-32-infrastructure-pipeline-design-120-min","title":"Step 3.2: Infrastructure Pipeline Design (120 min)","text":"<p>Best Practice: Separated infrastructure and application pipelines</p> <ol> <li> <p>Infrastructure Pipeline Workflow <pre><code>Infrastructure CI/CD Pipeline\n\u251c\u2500\u2500 Trigger Conditions\n\u2502   \u251c\u2500\u2500 Push to main (infrastructure/ changes)\n\u2502   \u251c\u2500\u2500 Pull Request (infrastructure/ changes)\n\u2502   \u2514\u2500\u2500 Manual Dispatch (any environment)\n\u251c\u2500\u2500 Jobs\n\u2502   \u251c\u2500\u2500 terraform-validate\n\u2502   \u251c\u2500\u2500 terraform-plan (on PR)\n\u2502   \u251c\u2500\u2500 security-scan (Checkov/TFSec)\n\u2502   \u2514\u2500\u2500 terraform-apply (on main)\n\u2514\u2500\u2500 Environments\n    \u251c\u2500\u2500 dev (auto-deploy)\n    \u251c\u2500\u2500 staging (manual approval)\n    \u2514\u2500\u2500 prod (manual approval + additional gates)\n</code></pre></p> </li> <li> <p>Pipeline Security Features</p> </li> <li>Plan Review: Always review Terraform plans before apply</li> <li>Security Scanning: Automated infrastructure security checks</li> <li>Environment Protection: Manual approvals for sensitive environments</li> <li>Audit Logging: Complete deployment history</li> </ol> <p>Learning Focus: Infrastructure CI/CD, pipeline security, approval workflows</p>"},{"location":"deployment/azure-deployment-plan/#step-33-application-pipeline-design-75-min","title":"Step 3.3: Application Pipeline Design (75 min)","text":"<p>Best Practice: Container-based deployment with security scanning</p> <ol> <li>Application Pipeline Workflow <pre><code>Application CI/CD Pipeline\n\u251c\u2500\u2500 Build Stage\n\u2502   \u251c\u2500\u2500 Code quality checks (ruff, pytest)\n\u2502   \u251c\u2500\u2500 Security scanning (Snyk, Bandit)\n\u2502   \u251c\u2500\u2500 Container build (Docker)\n\u2502   \u2514\u2500\u2500 Container security scan\n\u251c\u2500\u2500 Deploy Stage\n\u2502   \u251c\u2500\u2500 Deploy to dev environment\n\u2502   \u251c\u2500\u2500 Integration tests\n\u2502   \u251c\u2500\u2500 Deploy to staging (manual)\n\u2502   \u2514\u2500\u2500 Deploy to prod (manual + approvals)\n\u2514\u2500\u2500 Monitoring\n    \u251c\u2500\u2500 Deployment notifications\n    \u251c\u2500\u2500 Health check validation\n    \u2514\u2500\u2500 Rollback capabilities\n</code></pre></li> </ol> <p>Learning Focus: Application deployment, container security, testing in pipelines</p>"},{"location":"deployment/azure-deployment-plan/#day-6-monitoring-observability-setup","title":"Day 6: Monitoring &amp; Observability Setup","text":""},{"location":"deployment/azure-deployment-plan/#step-34-application-insights-integration-90-min","title":"Step 3.4: Application Insights Integration (90 min)","text":"<p>Best Practice: Comprehensive observability from day one</p> <ol> <li> <p>Monitoring Architecture <pre><code>Observability Stack\n\u251c\u2500\u2500 Application Insights\n\u2502   \u251c\u2500\u2500 Application Performance Monitoring\n\u2502   \u251c\u2500\u2500 Custom Events (Agent interactions)\n\u2502   \u251c\u2500\u2500 Dependencies (OpenAI API calls)\n\u2502   \u2514\u2500\u2500 Failures and Exceptions\n\u251c\u2500\u2500 Log Analytics\n\u2502   \u251c\u2500\u2500 Container logs\n\u2502   \u251c\u2500\u2500 Platform logs\n\u2502   \u2514\u2500\u2500 Security logs\n\u2514\u2500\u2500 Azure Monitor\n    \u251c\u2500\u2500 Metrics and Alerts\n    \u251c\u2500\u2500 Dashboards\n    \u2514\u2500\u2500 Action Groups\n</code></pre></p> </li> <li> <p>Custom Metrics for Loan Avengers</p> </li> <li>Agent response times</li> <li>Token consumption rates</li> <li>Loan processing success rates</li> <li>MCP server health metrics</li> </ol> <p>Learning Focus: Application monitoring, custom telemetry, alerting strategies</p>"},{"location":"deployment/azure-deployment-plan/#step-35-security-monitoring-setup-60-min","title":"Step 3.5: Security Monitoring Setup (60 min)","text":"<p>Best Practice: Security monitoring and incident response</p> <ol> <li>Security Monitoring Components <pre><code>Security Monitoring\n\u251c\u2500\u2500 Azure Security Center\n\u2502   \u251c\u2500\u2500 Security recommendations\n\u2502   \u251c\u2500\u2500 Compliance dashboards\n\u2502   \u2514\u2500\u2500 Threat protection alerts\n\u251c\u2500\u2500 Azure Sentinel (Optional)\n\u2502   \u251c\u2500\u2500 Advanced threat detection\n\u2502   \u251c\u2500\u2500 Security incident management\n\u2502   \u2514\u2500\u2500 Automated response playbooks\n\u2514\u2500\u2500 Custom Security Alerts\n    \u251c\u2500\u2500 Unusual API access patterns\n    \u251c\u2500\u2500 High token consumption\n    \u2514\u2500\u2500 Failed authentication attempts\n</code></pre></li> </ol> <p>Learning Focus: Security operations, threat detection, compliance monitoring</p>"},{"location":"deployment/azure-deployment-plan/#phase-4-testing-validation","title":"\ud83d\udd0d Phase 4: Testing &amp; Validation","text":"<p>Timeline: Day 7-8 (4-6 hours)</p>"},{"location":"deployment/azure-deployment-plan/#day-7-integration-testing","title":"Day 7: Integration Testing","text":""},{"location":"deployment/azure-deployment-plan/#step-41-infrastructure-validation-90-min","title":"Step 4.1: Infrastructure Validation (90 min)","text":"<p>Best Practice: Automated testing of infrastructure deployment</p> <ol> <li> <p>Infrastructure Tests <pre><code># Network connectivity tests\naz network vnet subnet show --resource-group $RG --vnet-name $VNET --name $SUBNET\n\n# Private endpoint validation\nnslookup your-openai-service.openai.azure.com\n\n# Key Vault access testing\naz keyvault secret show --vault-name $KV_NAME --name azure-openai-api-key\n\n# Container Apps environment health\naz containerapp env show --resource-group $RG --name $CAE_NAME\n</code></pre></p> </li> <li> <p>Security Validation</p> </li> <li>Network isolation verification</li> <li>Access control testing</li> <li>Certificate validation</li> <li>Compliance checks</li> </ol> <p>Learning Focus: Infrastructure testing, security validation, troubleshooting</p>"},{"location":"deployment/azure-deployment-plan/#step-42-application-integration-testing-120-min","title":"Step 4.2: Application Integration Testing (120 min)","text":"<p>Best Practice: End-to-end application testing in deployed environment</p> <ol> <li>Integration Test Suite</li> <li>Azure OpenAI connectivity with Managed Identity</li> <li>MCP server functionality in Container Apps</li> <li>Agent workflow end-to-end testing</li> <li> <p>Performance validation (&lt; 5 second requirement)</p> </li> <li> <p>Load Testing Planning <pre><code># Simple load test with Azure Load Testing\naz load test create --name loan-avengers-load-test\n\n# Test scenarios:\n# - Single user workflow\n# - Concurrent agent processing\n# - Peak load simulation\n</code></pre></p> </li> </ol> <p>Learning Focus: Integration testing, performance validation, load testing</p>"},{"location":"deployment/azure-deployment-plan/#day-8-production-readiness","title":"Day 8: Production Readiness","text":""},{"location":"deployment/azure-deployment-plan/#step-43-production-environment-setup-120-min","title":"Step 4.3: Production Environment Setup (120 min)","text":"<p>Best Practice: Production environment with enhanced security and monitoring</p> <ol> <li>Production Differences <pre><code>Production Enhancements\n\u251c\u2500\u2500 Security\n\u2502   \u251c\u2500\u2500 Enhanced network isolation\n\u2502   \u251c\u2500\u2500 Additional compliance controls\n\u2502   \u251c\u2500\u2500 Audit logging enabled\n\u2502   \u2514\u2500\u2500 Backup and disaster recovery\n\u251c\u2500\u2500 Performance\n\u2502   \u251c\u2500\u2500 Higher OpenAI TPM limits\n\u2502   \u251c\u2500\u2500 Auto-scaling configuration\n\u2502   \u251c\u2500\u2500 CDN integration (future)\n\u2502   \u2514\u2500\u2500 Load balancing setup\n\u2514\u2500\u2500 Operations\n    \u251c\u2500\u2500 Enhanced monitoring\n    \u251c\u2500\u2500 Alerting escalation\n    \u251c\u2500\u2500 Incident response procedures\n    \u2514\u2500\u2500 Change management process\n</code></pre></li> </ol> <p>Learning Focus: Production readiness, operational excellence, scalability planning</p>"},{"location":"deployment/azure-deployment-plan/#step-44-documentation-handover-90-min","title":"Step 4.4: Documentation &amp; Handover (90 min)","text":"<p>Best Practice: Comprehensive documentation for operations</p> <ol> <li>Operations Documentation</li> <li>Deployment runbooks</li> <li>Troubleshooting guides</li> <li>Security procedures</li> <li>Monitoring playbooks</li> <li> <p>Disaster recovery procedures</p> </li> <li> <p>Developer Documentation</p> </li> <li>Local development setup (dev container)</li> <li>Testing procedures</li> <li>Deployment workflows</li> <li>Architecture decisions</li> </ol> <p>Learning Focus: Documentation standards, knowledge transfer, operational procedures</p>"},{"location":"deployment/azure-deployment-plan/#success-metrics-validation","title":"\ud83d\udcca Success Metrics &amp; Validation","text":""},{"location":"deployment/azure-deployment-plan/#technical-metrics","title":"Technical Metrics","text":"<ul> <li>\u2705 Infrastructure deployment time &lt; 15 minutes</li> <li>\u2705 Application deployment time &lt; 5 minutes</li> <li>\u2705 Agent response time &lt; 5 seconds (95th percentile)</li> <li>\u2705 System availability &gt; 99.9%</li> <li>\u2705 Security scan passing rate = 100%</li> </ul>"},{"location":"deployment/azure-deployment-plan/#learning-metrics","title":"Learning Metrics","text":"<ul> <li>\u2705 Understanding of Azure networking concepts</li> <li>\u2705 Proficiency with Terraform and IaC patterns</li> <li>\u2705 CI/CD pipeline design and implementation skills</li> <li>\u2705 Security best practices implementation</li> <li>\u2705 Monitoring and observability setup</li> </ul>"},{"location":"deployment/azure-deployment-plan/#business-metrics","title":"Business Metrics","text":"<ul> <li>\u2705 Loan processing workflow functional end-to-end</li> <li>\u2705 Cost optimization (&lt; $200/month for dev environment)</li> <li>\u2705 Compliance requirements met</li> <li>\u2705 Scalability demonstrated (10x load capacity)</li> </ul>"},{"location":"deployment/azure-deployment-plan/#implementation-strategy","title":"\ud83c\udfaf Implementation Strategy","text":""},{"location":"deployment/azure-deployment-plan/#week-1-foundation-days-1-4","title":"Week 1: Foundation (Days 1-4)","text":"<p>Focus on learning fundamentals and setting up core infrastructure</p>"},{"location":"deployment/azure-deployment-plan/#week-2-automation-days-5-6","title":"Week 2: Automation (Days 5-6)","text":"<p>Implement CI/CD pipelines and automation</p>"},{"location":"deployment/azure-deployment-plan/#week-3-production-days-7-8","title":"Week 3: Production (Days 7-8)","text":"<p>Testing, validation, and production readiness</p>"},{"location":"deployment/azure-deployment-plan/#ongoing-operations","title":"Ongoing: Operations","text":"<p>Monitoring, maintenance, and continuous improvement</p>"},{"location":"deployment/azure-deployment-plan/#quick-start-commands","title":"\ud83d\ude80 Quick Start Commands","text":""},{"location":"deployment/azure-deployment-plan/#prerequisites-setup","title":"Prerequisites Setup","text":"<pre><code># Use the dev container for consistent environment\n# All tools pre-installed: Azure CLI, Terraform, etc.\n\n# Login to Azure\naz login\n\n# Set subscription\naz account set --subscription \"your-subscription-id\"\n\n# Create service principal\naz ad sp create-for-rbac --name \"loan-avengers-deploy-sp\" --role \"Contributor\"\n</code></pre>"},{"location":"deployment/azure-deployment-plan/#state-management-setup","title":"State Management Setup","text":"<pre><code># Run the prerequisites script (will create in Phase 1)\n./infrastructure/scripts/setup-prerequisites.sh\n\n# Initialize Terraform\ncd infrastructure/terraform/environments/dev\nterraform init\n</code></pre>"},{"location":"deployment/azure-deployment-plan/#infrastructure-deployment","title":"Infrastructure Deployment","text":"<pre><code># Plan deployment\nterraform plan -out=tfplan\n\n# Apply infrastructure\nterraform apply tfplan\n\n# Get outputs\nterraform output\n</code></pre>"},{"location":"deployment/azure-deployment-plan/#application-testing","title":"Application Testing","text":"<pre><code># Test with new Azure OpenAI endpoint\nexport AZURE_OPENAI_ENDPOINT=$(terraform output -raw azure_openai_endpoint)\nexport AZURE_OPENAI_KEY_VAULT=$(terraform output -raw key_vault_name)\n\n# Run integration tests\nloan-test integration\n</code></pre>"},{"location":"deployment/azure-deployment-plan/#additional-resources","title":"\ud83d\udcda Additional Resources","text":""},{"location":"deployment/azure-deployment-plan/#azure-documentation","title":"Azure Documentation","text":"<ul> <li>Azure OpenAI Service</li> <li>Azure Container Apps</li> <li>Azure Key Vault</li> <li>Azure Virtual Networks</li> </ul>"},{"location":"deployment/azure-deployment-plan/#terraform-resources","title":"Terraform Resources","text":"<ul> <li>Azure Provider Documentation</li> <li>Terraform Best Practices</li> </ul>"},{"location":"deployment/azure-deployment-plan/#devops-resources","title":"DevOps Resources","text":"<ul> <li>GitHub Actions Documentation</li> <li>Azure DevOps Best Practices</li> </ul>"},{"location":"deployment/azure-deployment-plan/#next-steps","title":"\ud83c\udfaf Next Steps","text":"<p>When ready to implement:</p> <ol> <li>Start with dev container - Ensure consistent environment</li> <li>Begin Phase 1 - Azure setup and prerequisites</li> <li>Follow step-by-step - Each phase builds on the previous</li> <li>Test thoroughly - Validate each component before moving on</li> <li>Document learnings - Keep notes for team knowledge sharing</li> </ol> <p>This plan provides enterprise-grade deployment practices while ensuring thorough learning of each component. The dev container gives you the perfect environment to implement this plan consistently and professionally! \ud83e\uddb8\u200d\u2642\ufe0f</p> <p>Status: Ready for Implementation Last Updated: 2024-01-XX Next Review: After Phase 1 completion</p>"},{"location":"deployment/azure-deployment/","title":"Azure Deployment Architecture - Loan Avengers","text":""},{"location":"deployment/azure-deployment/#complete-azure-infrastructure-deployment-diagram","title":"Complete Azure Infrastructure Deployment Diagram","text":"<pre><code>graph TB\n    %% User Layer\n    subgraph \"User Experience Layer\"\n        User[\ud83d\udc64 User]\n        Mobile[\ud83d\udcf1 Mobile App]\n        Web[\ud83c\udf10 Web App]\n    end\n\n    %% CDN and Front Door\n    subgraph \"Azure Front Door &amp; CDN\"\n        AFD[\ud83c\udf0d Azure Front Door&lt;br/&gt;Global Load Balancer]\n        CDN[\ud83d\ude80 Azure CDN&lt;br/&gt;Static Assets]\n    end\n\n    %% Authentication\n    subgraph \"Identity &amp; Security\"\n        EntraID[\ud83d\udd10 Entra ID&lt;br/&gt;Authentication]\n        KV[\ud83d\udd11 Azure Key Vault&lt;br/&gt;Secrets Management]\n    end\n\n    %% Container Apps Environment\n    subgraph \"Azure Container Apps Environment\"\n        direction TB\n        subgraph \"Container Apps\"\n            UI[\ud83c\udfa8 Loan Avengers UI&lt;br/&gt;React + Vite&lt;br/&gt;Container App]\n            API[\ud83d\ude80 FastAPI Backend&lt;br/&gt;Microsoft Agent Framework&lt;br/&gt;Container App]\n        end\n\n        subgraph \"MCP Servers\"\n            MCP1[\ud83d\udd0d Application Verification&lt;br/&gt;MCP Server&lt;br/&gt;Port 8010]\n            MCP2[\ud83d\udcc4 Document Processing&lt;br/&gt;MCP Server&lt;br/&gt;Port 8011]\n            MCP3[\ud83d\udcb0 Financial Calculations&lt;br/&gt;MCP Server&lt;br/&gt;Port 8012]\n        end\n    end\n\n    %% Data Layer\n    subgraph \"Data &amp; Storage Layer\"\n        Redis[\u26a1 Azure Cache for Redis&lt;br/&gt;AgentThread State&lt;br/&gt;30-min TTL]\n        Blob[\ud83d\udce6 Azure Blob Storage&lt;br/&gt;Document Uploads&lt;br/&gt;Secure Container]\n        Cosmos[\ud83c\udf0d Azure Cosmos DB&lt;br/&gt;Completed Applications&lt;br/&gt;Global Distribution]\n    end\n\n    %% Container Registry\n    subgraph \"DevOps &amp; Registry\"\n        ACR[\ud83d\udc33 Azure Container Registry&lt;br/&gt;Private Images&lt;br/&gt;Vulnerability Scanning]\n        GHAC[\ud83d\udd04 GitHub Actions&lt;br/&gt;CI/CD Pipeline]\n    end\n\n    %% External Services\n    subgraph \"External Integrations\"\n        AOAI[\ud83e\udde0 Azure OpenAI&lt;br/&gt;GPT-4 Models&lt;br/&gt;Agent Framework]\n        Credit[\ud83d\udcca Credit Bureau APIs&lt;br/&gt;External Verification]\n        Bank[\ud83c\udfe6 Banking APIs&lt;br/&gt;Income Verification]\n    end\n\n    %% Connections\n    User --&gt; Mobile\n    User --&gt; Web\n    Mobile --&gt; AFD\n    Web --&gt; AFD\n    AFD --&gt; CDN\n    AFD --&gt; UI\n\n    UI --&gt; EntraID\n    API --&gt; EntraID\n    UI --&gt; API\n\n    API --&gt; MCP1\n    API --&gt; MCP2\n    API --&gt; MCP3\n\n    API --&gt; Redis\n    API --&gt; Blob\n    API --&gt; Cosmos\n\n    API --&gt; AOAI\n    MCP1 --&gt; Credit\n    MCP2 --&gt; Bank\n\n    API --&gt; KV\n    MCP1 --&gt; KV\n    MCP2 --&gt; KV\n    MCP3 --&gt; KV\n\n    GHAC --&gt; ACR\n    ACR --&gt; UI\n    ACR --&gt; API\n    ACR --&gt; MCP1\n    ACR --&gt; MCP2\n    ACR --&gt; MCP3\n\n    %% Styling\n    classDef userLayer fill:#E1F5FE,stroke:#0277BD,stroke-width:2px\n    classDef azureService fill:#FFF3E0,stroke:#FF8F00,stroke-width:2px\n    classDef containerApp fill:#E8F5E8,stroke:#2E7D32,stroke-width:2px\n    classDef dataService fill:#F3E5F5,stroke:#7B1FA2,stroke-width:2px\n    classDef external fill:#FFEBEE,stroke:#C62828,stroke-width:2px\n\n    class User,Mobile,Web userLayer\n    class AFD,CDN,EntraID,KV,Redis,Blob,Cosmos,ACR azureService\n    class UI,API,MCP1,MCP2,MCP3 containerApp\n    class AOAI,Credit,Bank external</code></pre>"},{"location":"deployment/azure-deployment/#infrastructure-components","title":"Infrastructure Components","text":""},{"location":"deployment/azure-deployment/#global-layer","title":"\ud83c\udf0d Global Layer","text":"<ul> <li>Azure Front Door: Global load balancing and SSL termination</li> <li>Azure CDN: Static asset delivery for optimal performance</li> <li>Entra ID: Centralized authentication and authorization</li> </ul>"},{"location":"deployment/azure-deployment/#application-layer","title":"\ud83d\ude80 Application Layer","text":"<ul> <li>Container Apps Environment: Serverless containers with auto-scaling</li> <li>React UI: Modern responsive web application</li> <li>FastAPI Backend: High-performance API with Agent Framework</li> <li>MCP Servers: Microservices for external tool integration</li> </ul>"},{"location":"deployment/azure-deployment/#data-layer","title":"\ud83d\udcbe Data Layer","text":"<ul> <li>Redis Cache: Real-time state management for agent conversations</li> <li>Blob Storage: Secure document storage with encryption</li> <li>Cosmos DB: Globally distributed application data</li> </ul>"},{"location":"deployment/azure-deployment/#security-layer","title":"\ud83d\udd12 Security Layer","text":"<ul> <li>Key Vault: Centralized secrets and certificate management</li> <li>Managed Identity: Password-less authentication between services</li> <li>Private Networking: VNet integration for secure communication</li> </ul>"},{"location":"deployment/azure-deployment/#devops-layer","title":"\ud83d\udd04 DevOps Layer","text":"<ul> <li>Container Registry: Private image storage with security scanning</li> <li>GitHub Actions: Automated CI/CD pipeline</li> <li>Infrastructure as Code: Terraform for reproducible deployments</li> </ul>"},{"location":"deployment/azure-deployment/#deployment-characteristics","title":"Deployment Characteristics","text":""},{"location":"deployment/azure-deployment/#performance-targets","title":"\ud83d\udcca Performance Targets","text":"<ul> <li>UI Response: &lt;200ms initial load</li> <li>API Latency: &lt;500ms average response time</li> <li>Agent Processing: &lt;3 minutes total workflow</li> <li>Auto-scaling: 0-100 instances based on demand</li> </ul>"},{"location":"deployment/azure-deployment/#security-features","title":"\ud83d\udee1\ufe0f Security Features","text":"<ul> <li>Zero Trust Architecture: All communications encrypted</li> <li>Managed Identity: No stored credentials</li> <li>Network Isolation: Private VNet with service endpoints</li> <li>Compliance Ready: SOC 2, GDPR, CCPA compatible</li> </ul>"},{"location":"deployment/azure-deployment/#cost-optimization","title":"\ud83d\udcb0 Cost Optimization","text":"<ul> <li>Serverless Compute: Pay only for actual usage</li> <li>Auto-scaling: Scale to zero during idle periods</li> <li>Reserved Capacity: Cosmos DB and Redis for predictable workloads</li> <li>Monitoring: Application Insights for cost optimization</li> </ul>"},{"location":"deployment/azure-secure-deployment-guide/","title":"\ud83d\udd10 Azure Secure Deployment Guide - Loan Avengers","text":"<p>A comprehensive guide to securely deploy the Loan Avengers multi-agent system in Azure using Infrastructure-as-Code (Terraform) and CI/CD pipelines.</p>"},{"location":"deployment/azure-secure-deployment-guide/#overview","title":"\ud83d\udccb Overview","text":"<p>This guide will help you: 1. Set up secure Azure infrastructure with private networking 2. Deploy Azure OpenAI with proper access controls 3. Create CI/CD pipeline for automated deployments 4. Implement security best practices for financial applications 5. Monitor and maintain the production deployment</p>"},{"location":"deployment/azure-secure-deployment-guide/#architecture-overview","title":"\ud83c\udfd7\ufe0f Architecture Overview","text":"<pre><code>\u250c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2510\n\u2502                     Azure Subscription                      \u2502\n\u251c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2524\n\u2502  \u250c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2510    \u250c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2510   \u2502\n\u2502  \u2502   Resource      \u2502    \u2502         VNet (Private)       \u2502   \u2502\n\u2502  \u2502   Group         \u2502    \u2502  \u250c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2510 \u250c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2510 \u2502   \u2502\n\u2502  \u2502                 \u2502    \u2502  \u2502  Subnet \u2502 \u2502   Subnet    \u2502 \u2502   \u2502\n\u2502  \u2502                 \u2502    \u2502  \u2502 (Apps)  \u2502 \u2502   (Data)    \u2502 \u2502   \u2502\n\u2502  \u2502                 \u2502    \u2502  \u2514\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2518 \u2514\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2518 \u2502   \u2502\n\u2502  \u2514\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2518    \u2514\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2518   \u2502\n\u2502                                                             \u2502\n\u2502  \u250c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2524\n\u2502  \u2502              Azure Services                             \u2502\n\u2502  \u2502  \u250c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2510 \u250c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2510 \u250c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2510 \u2502\n\u2502  \u2502  \u2502 Azure OpenAI \u2502 \u2502 Key Vault    \u2502 \u2502 Container Apps  \u2502 \u2502\n\u2502  \u2502  \u2502 (Private)    \u2502 \u2502 (Secrets)    \u2502 \u2502 (Loan Avengers) \u2502 \u2502\n\u2502  \u2502  \u2514\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2518 \u2514\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2518 \u2514\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2518 \u2502\n\u2502  \u2502  \u250c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2510 \u250c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2510 \u250c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2510 \u2502\n\u2502  \u2502  \u2502 Cosmos DB    \u2502 \u2502 App Insights \u2502 \u2502 Log Analytics   \u2502 \u2502\n\u2502  \u2502  \u2502 (Data Store) \u2502 \u2502 (Monitoring) \u2502 \u2502 (Logs)          \u2502 \u2502\n\u2502  \u2502  \u2514\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2518 \u2514\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2518 \u2514\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2518 \u2502\n\u2502  \u2514\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2518\n\u2514\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2518\n</code></pre>"},{"location":"deployment/azure-secure-deployment-guide/#step-by-step-deployment-process","title":"\ud83d\ude80 Step-by-Step Deployment Process","text":""},{"location":"deployment/azure-secure-deployment-guide/#phase-1-prerequisites-and-setup-30-minutes","title":"Phase 1: Prerequisites and Setup (30 minutes)","text":""},{"location":"deployment/azure-secure-deployment-guide/#step-11-azure-prerequisites","title":"Step 1.1: Azure Prerequisites","text":"<pre><code># Install Azure CLI\ncurl -sL https://aka.ms/InstallAzureCLIDeb | sudo bash\n\n# Install Terraform\nwget https://releases.hashicorp.com/terraform/1.6.0/terraform_1.6.0_linux_amd64.zip\nunzip terraform_1.6.0_linux_amd64.zip\nsudo mv terraform /usr/local/bin/\n\n# Verify installations\naz --version\nterraform --version\n</code></pre>"},{"location":"deployment/azure-secure-deployment-guide/#step-12-azure-authentication-subscription-setup","title":"Step 1.2: Azure Authentication &amp; Subscription Setup","text":"<pre><code># Login to Azure\naz login\n\n# List subscriptions\naz account list --output table\n\n# Set active subscription\naz account set --subscription \"Your-Subscription-Name-or-ID\"\n\n# Verify current subscription\naz account show\n</code></pre>"},{"location":"deployment/azure-secure-deployment-guide/#step-13-service-principal-creation-for-cicd","title":"Step 1.3: Service Principal Creation (for CI/CD)","text":"<pre><code># Create service principal for deployment\naz ad sp create-for-rbac --name \"loan-avengers-deploy-sp\" \\\n    --role \"Contributor\" \\\n    --scopes \"/subscriptions/$(az account show --query id -o tsv)\"\n\n# Save the output - you'll need:\n# - appId (CLIENT_ID)\n# - password (CLIENT_SECRET)  \n# - tenant (TENANT_ID)\n# - subscriptionId (SUBSCRIPTION_ID)\n</code></pre>"},{"location":"deployment/azure-secure-deployment-guide/#phase-2-terraform-state-storage-15-minutes","title":"Phase 2: Terraform State Storage (15 minutes)","text":""},{"location":"deployment/azure-secure-deployment-guide/#step-21-create-terraform-state-storage","title":"Step 2.1: Create Terraform State Storage","text":"<pre><code># Create resource group for Terraform state\naz group create --name \"loan-avengers-tf-state-rg\" --location \"East US\"\n\n# Create storage account (name must be globally unique)\nSTORAGE_ACCOUNT_NAME=\"loanavengerstfstate$(openssl rand -hex 4)\"\naz storage account create \\\n    --resource-group \"loan-avengers-tf-state-rg\" \\\n    --name \"$STORAGE_ACCOUNT_NAME\" \\\n    --sku \"Standard_LRS\" \\\n    --encryption-services blob\n\n# Create blob container\naz storage container create \\\n    --name \"tfstate\" \\\n    --account-name \"$STORAGE_ACCOUNT_NAME\"\n\n# Get storage account key\nACCOUNT_KEY=$(az storage account keys list \\\n    --resource-group \"loan-avengers-tf-state-rg\" \\\n    --account-name \"$STORAGE_ACCOUNT_NAME\" \\\n    --query '[0].value' -o tsv)\n\necho \"Storage Account Name: $STORAGE_ACCOUNT_NAME\"\necho \"Account Key: $ACCOUNT_KEY\"\n# Save these values - you'll need them in terraform backend configuration\n</code></pre>"},{"location":"deployment/azure-secure-deployment-guide/#phase-3-infrastructure-deployment-30-minutes","title":"Phase 3: Infrastructure Deployment (30 minutes)","text":""},{"location":"deployment/azure-secure-deployment-guide/#step-31-configure-terraform-backend","title":"Step 3.1: Configure Terraform Backend","text":"<pre><code># Navigate to terraform directory\ncd infrastructure/terraform/environments/dev\n\n# Update main.tf backend configuration with your storage account details\n# Replace \"loanavengerstfstate\" with your actual storage account name\n</code></pre>"},{"location":"deployment/azure-secure-deployment-guide/#step-32-deploy-infrastructure","title":"Step 3.2: Deploy Infrastructure","text":"<pre><code># Initialize Terraform\nterraform init\n\n# Plan deployment\nterraform plan -out=tfplan\n\n# Review plan and apply\nterraform apply tfplan\n</code></pre>"},{"location":"deployment/azure-secure-deployment-guide/#phase-4-cicd-pipeline-setup-45-minutes","title":"Phase 4: CI/CD Pipeline Setup (45 minutes)","text":"<p>The GitHub Actions workflow will automatically deploy your infrastructure and application on code changes.</p>"},{"location":"deployment/azure-secure-deployment-guide/#phase-5-application-deployment-30-minutes","title":"Phase 5: Application Deployment (30 minutes)","text":"<p>Once infrastructure is deployed, configure your application with the Azure OpenAI endpoint:</p> <pre><code># Get outputs from Terraform\nterraform output azure_openai_endpoint\nterraform output key_vault_name\n\n# Configure application environment variables\n# These will be automatically set by the CI/CD pipeline\n</code></pre>"},{"location":"deployment/azure-secure-deployment-guide/#security-best-practices","title":"\ud83d\udd10 Security Best Practices","text":"<ol> <li>Private Networking: All Azure services use private endpoints</li> <li>Managed Identity: No hardcoded credentials in application</li> <li>Key Vault: All secrets stored securely</li> <li>Network Security Groups: Restrictive firewall rules</li> <li>RBAC: Principle of least privilege access</li> <li>Monitoring: Comprehensive logging and alerting</li> </ol>"},{"location":"deployment/azure-secure-deployment-guide/#next-steps","title":"\ud83c\udfaf Next Steps","text":"<ol> <li>Run through the deployment steps above</li> <li>Test the Azure OpenAI integration</li> <li>Set up monitoring and alerts</li> <li>Configure production environment</li> <li>Implement disaster recovery</li> </ol>"},{"location":"deployment/azure-secure-deployment-guide/#support","title":"\ud83d\udcde Support","text":"<p>If you encounter issues during deployment: 1. Check the Terraform logs 2. Verify Azure permissions 3. Review security group rules 4. Check Key Vault access policies</p> <p>For help, refer to the troubleshooting section below or create an issue in the repository.</p>"},{"location":"deployment/cicd/","title":"Cicd","text":"<p>Coming soon...</p>"},{"location":"deployment/deployment-checklist/","title":"\u2705 Azure Deployment Checklist - Loan Avengers","text":"<p>Quick reference checklist for implementing the Azure secure deployment plan.</p>"},{"location":"deployment/deployment-checklist/#pre-deployment-checklist","title":"\ud83d\ude80 Pre-Deployment Checklist","text":""},{"location":"deployment/deployment-checklist/#environment-setup","title":"Environment Setup","text":"<ul> <li> Dev container created and working</li> <li> Azure CLI installed and authenticated</li> <li> Terraform installed (v1.6.0+)</li> <li> GitHub repository access configured</li> <li> Azure subscription verified with sufficient permissions</li> </ul>"},{"location":"deployment/deployment-checklist/#azure-prerequisites","title":"Azure Prerequisites","text":"<ul> <li> Azure subscription selected</li> <li> Service principal created for CI/CD</li> <li> Resource naming convention defined</li> <li> Cost budgets and alerts configured</li> <li> Regional availability for Azure OpenAI confirmed</li> </ul>"},{"location":"deployment/deployment-checklist/#security-preparation","title":"Security Preparation","text":"<ul> <li> RBAC strategy planned</li> <li> Network security requirements documented</li> <li> Secret management strategy defined</li> <li> Compliance requirements reviewed</li> </ul>"},{"location":"deployment/deployment-checklist/#phase-1-foundation-setup","title":"\ud83c\udfd7\ufe0f Phase 1: Foundation Setup","text":""},{"location":"deployment/deployment-checklist/#day-1-2-azure-fundamentals","title":"Day 1-2: Azure Fundamentals","text":"<ul> <li> Step 1.1: Development environment verified</li> <li> Step 1.2: Azure subscription and RBAC configured</li> <li> Step 1.3: Service principal created and tested</li> </ul> <p>Deliverables: - [ ] Service principal credentials saved securely - [ ] Azure CLI authenticated and working - [ ] Resource naming convention documented</p>"},{"location":"deployment/deployment-checklist/#phase-2-infrastructure-architecture","title":"\ud83c\udfdb\ufe0f Phase 2: Infrastructure Architecture","text":""},{"location":"deployment/deployment-checklist/#day-3-state-management-core-infrastructure","title":"Day 3: State Management &amp; Core Infrastructure","text":"<ul> <li> Step 2.1: Terraform remote state setup completed</li> <li> Step 2.2: Terraform module architecture designed</li> <li> Step 2.3: Network security architecture planned</li> </ul> <p>Deliverables: - [ ] Terraform state storage account created - [ ] Module structure implemented - [ ] Network topology documented</p>"},{"location":"deployment/deployment-checklist/#day-4-ai-services-security","title":"Day 4: AI Services &amp; Security","text":"<ul> <li> Step 2.4: Azure OpenAI architecture designed</li> <li> Step 2.5: Key Vault security configuration planned</li> </ul> <p>Deliverables: - [ ] OpenAI capacity planning completed - [ ] Key Vault access policies defined - [ ] Private endpoint strategy documented</p>"},{"location":"deployment/deployment-checklist/#phase-3-cicd-pipeline-implementation","title":"\ud83d\ude80 Phase 3: CI/CD Pipeline Implementation","text":""},{"location":"deployment/deployment-checklist/#day-5-github-actions-setup","title":"Day 5: GitHub Actions Setup","text":"<ul> <li> Step 3.1: Repository security configured</li> <li> Step 3.2: Infrastructure pipeline designed</li> <li> Step 3.3: Application pipeline designed</li> </ul> <p>Deliverables: - [ ] GitHub secrets configured - [ ] Branch protection rules enabled - [ ] Infrastructure pipeline tested</p>"},{"location":"deployment/deployment-checklist/#day-6-monitoring-observability","title":"Day 6: Monitoring &amp; Observability","text":"<ul> <li> Step 3.4: Application Insights integration configured</li> <li> Step 3.5: Security monitoring setup completed</li> </ul> <p>Deliverables: - [ ] Monitoring dashboards created - [ ] Alert rules configured - [ ] Security monitoring enabled</p>"},{"location":"deployment/deployment-checklist/#phase-4-testing-validation","title":"\ud83d\udd0d Phase 4: Testing &amp; Validation","text":""},{"location":"deployment/deployment-checklist/#day-7-integration-testing","title":"Day 7: Integration Testing","text":"<ul> <li> Step 4.1: Infrastructure validation completed</li> <li> Step 4.2: Application integration testing completed</li> </ul> <p>Deliverables: - [ ] Infrastructure tests passing - [ ] End-to-end integration verified - [ ] Performance benchmarks met</p>"},{"location":"deployment/deployment-checklist/#day-8-production-readiness","title":"Day 8: Production Readiness","text":"<ul> <li> Step 4.3: Production environment configured</li> <li> Step 4.4: Documentation and handover completed</li> </ul> <p>Deliverables: - [ ] Production environment validated - [ ] Operations documentation complete - [ ] Team handover completed</p>"},{"location":"deployment/deployment-checklist/#success-criteria-validation","title":"\ud83d\udcca Success Criteria Validation","text":""},{"location":"deployment/deployment-checklist/#technical-metrics","title":"Technical Metrics","text":"<ul> <li> Infrastructure deployment &lt; 15 minutes</li> <li> Application deployment &lt; 5 minutes  </li> <li> Agent response time &lt; 5 seconds (95th percentile)</li> <li> System availability &gt; 99.9%</li> <li> Security scans passing (100%)</li> </ul>"},{"location":"deployment/deployment-checklist/#functional-validation","title":"Functional Validation","text":"<ul> <li> Loan Avengers agents working end-to-end</li> <li> MCP servers accessible and responding</li> <li> Azure OpenAI integration functional with Managed Identity</li> <li> All test suites passing</li> </ul>"},{"location":"deployment/deployment-checklist/#security-validation","title":"Security Validation","text":"<ul> <li> Private networking confirmed (no public endpoints)</li> <li> Managed Identity authentication working</li> <li> Key Vault access properly restricted</li> <li> Network security groups configured correctly</li> <li> Compliance requirements met</li> </ul>"},{"location":"deployment/deployment-checklist/#operational-readiness","title":"Operational Readiness","text":"<ul> <li> Monitoring and alerting functional</li> <li> Backup and disaster recovery tested</li> <li> Cost optimization implemented</li> <li> Documentation complete and accessible</li> </ul>"},{"location":"deployment/deployment-checklist/#common-issues-troubleshooting","title":"\ud83d\udea8 Common Issues &amp; Troubleshooting","text":""},{"location":"deployment/deployment-checklist/#azure-cli-issues","title":"Azure CLI Issues","text":"<ul> <li> Verify authentication: <code>az account show</code></li> <li> Check permissions: <code>az role assignment list --assignee $(az account show --query user.name -o tsv)</code></li> <li> Re-authenticate if needed: <code>az login</code></li> </ul>"},{"location":"deployment/deployment-checklist/#terraform-issues","title":"Terraform Issues","text":"<ul> <li> State lock conflicts: Check Azure storage account</li> <li> Provider version conflicts: <code>terraform init -upgrade</code></li> <li> Authentication issues: Verify service principal credentials</li> </ul>"},{"location":"deployment/deployment-checklist/#azure-openai-issues","title":"Azure OpenAI Issues","text":"<ul> <li> Regional availability: Confirm service available in target region</li> <li> Quota limits: Check TPM allocation and limits</li> <li> Private endpoint: Verify DNS resolution and connectivity</li> </ul>"},{"location":"deployment/deployment-checklist/#container-apps-issues","title":"Container Apps Issues","text":"<ul> <li> Image pull errors: Check container registry access</li> <li> Environment variables: Verify Key Vault integration</li> <li> Networking: Confirm subnet delegation and NSG rules</li> </ul>"},{"location":"deployment/deployment-checklist/#github-actions-issues","title":"GitHub Actions Issues","text":"<ul> <li> Secret access: Verify all required secrets configured</li> <li> Service principal: Check permissions and expiration</li> <li> Branch protection: Ensure proper workflow triggers</li> </ul>"},{"location":"deployment/deployment-checklist/#post-deployment-tasks","title":"\ud83c\udfaf Post-Deployment Tasks","text":""},{"location":"deployment/deployment-checklist/#immediate-first-week","title":"Immediate (First Week)","text":"<ul> <li> Monitor system health and performance</li> <li> Validate all security controls</li> <li> Test backup and recovery procedures</li> <li> Train team on new deployment process</li> </ul>"},{"location":"deployment/deployment-checklist/#short-term-first-month","title":"Short Term (First Month)","text":"<ul> <li> Optimize costs based on actual usage</li> <li> Refine monitoring and alerting</li> <li> Implement additional security controls</li> <li> Document lessons learned</li> </ul>"},{"location":"deployment/deployment-checklist/#long-term-ongoing","title":"Long Term (Ongoing)","text":"<ul> <li> Regular security reviews</li> <li> Performance optimization</li> <li> Disaster recovery testing</li> <li> Continuous improvement</li> </ul>"},{"location":"deployment/deployment-checklist/#emergency-contacts-procedures","title":"\ud83d\udcde Emergency Contacts &amp; Procedures","text":""},{"location":"deployment/deployment-checklist/#deployment-issues","title":"Deployment Issues","text":"<ol> <li>Check GitHub Actions logs</li> <li>Review Terraform state and logs</li> <li>Verify Azure service health</li> <li>Contact team lead if unresolvable</li> </ol>"},{"location":"deployment/deployment-checklist/#security-incidents","title":"Security Incidents","text":"<ol> <li>Immediately secure affected resources</li> <li>Document incident details</li> <li>Follow incident response procedures</li> <li>Conduct post-incident review</li> </ol>"},{"location":"deployment/deployment-checklist/#production-issues","title":"Production Issues","text":"<ol> <li>Check Application Insights for errors</li> <li>Review system logs in Log Analytics</li> <li>Validate service dependencies</li> <li>Implement rollback if necessary</li> </ol>"},{"location":"deployment/deployment-checklist/#reference-links","title":"\ud83d\udcda Reference Links","text":""},{"location":"deployment/deployment-checklist/#internal-documentation","title":"Internal Documentation","text":"<ul> <li>Azure Deployment Plan</li> <li>Dev Container Setup</li> <li>Testing Guide</li> <li>Architecture Documentation</li> </ul>"},{"location":"deployment/deployment-checklist/#external-resources","title":"External Resources","text":"<ul> <li>Azure OpenAI Documentation</li> <li>Terraform Azure Provider</li> <li>GitHub Actions Documentation</li> </ul> <p>Checklist Version: 1.0 Last Updated: 2024-01-XX Next Review: After each phase completion</p> <p>Use this checklist to track progress and ensure nothing is missed during the deployment process. Check off items as you complete them and note any issues or deviations for future reference.</p>"},{"location":"deployment/infrastructure/","title":"Infrastructure","text":"<p>Coming soon...</p>"},{"location":"deployment/monitoring/","title":"Observability Guide - Loan Avengers","text":""},{"location":"deployment/monitoring/#overview","title":"Overview","text":"<p>The Loan Avengers application implements enterprise-grade observability using out-of-the-box solutions from OpenTelemetry, Azure Monitor, and Microsoft Agent Framework. This guide covers how to use observability features for debugging, performance analysis, and cost management.</p>"},{"location":"deployment/monitoring/#architecture","title":"Architecture","text":"<pre><code>\u250c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2510\n\u2502                      Azure Application Insights                  \u2502\n\u2502  \u250c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2510  \u250c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2510  \u250c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2510         \u2502\n\u2502  \u2502   Traces     \u2502  \u2502    Logs      \u2502  \u2502   Metrics    \u2502         \u2502\n\u2502  \u2514\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2518  \u2514\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2518  \u2514\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2518         \u2502\n\u2514\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2518\n                              \u25b2\n                              \u2502 OpenTelemetry Exporter\n                              \u2502\n\u250c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2510\n\u2502                    Loan Avengers API (FastAPI)                   \u2502\n\u2502                                                                   \u2502\n\u2502  \u250c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2510      \u2502\n\u2502  \u2502  OpenTelemetry Auto-Instrumentation                   \u2502      \u2502\n\u2502  \u2502  \u2022 configure_azure_monitor()                          \u2502      \u2502\n\u2502  \u2502  \u2022 FastAPIInstrumentor.instrument_app()               \u2502      \u2502\n\u2502  \u2514\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2518      \u2502\n\u2502                                                                   \u2502\n\u2502  \u250c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2510      \u2502\n\u2502  \u2502  Observability Utilities                              \u2502      \u2502\n\u2502  \u2502  \u2022 Correlation ID tracking (ContextVar)               \u2502      \u2502\n\u2502  \u2502  \u2022 Token usage logging                                \u2502      \u2502\n\u2502  \u2502  \u2022 Agent Framework observability                      \u2502      \u2502\n\u2502  \u2514\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2518      \u2502\n\u2502                                                                   \u2502\n\u2502  \u250c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2510      \u2502\n\u2502  \u2502  Application Components                               \u2502      \u2502\n\u2502  \u2502  \u2022 API Endpoints (/api/chat, /api/sessions)           \u2502      \u2502\n\u2502  \u2502  \u2022 Conversation Orchestrator                          \u2502      \u2502\n\u2502  \u2502  \u2022 Sequential Pipeline (Agent Workflow)               \u2502      \u2502\n\u2502  \u2502  \u2022 MCP Servers (Tools)                                \u2502      \u2502\n\u2502  \u2514\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2518      \u2502\n\u2514\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2518\n</code></pre>"},{"location":"deployment/monitoring/#components","title":"Components","text":""},{"location":"deployment/monitoring/#1-opentelemetry-auto-instrumentation","title":"1. OpenTelemetry Auto-Instrumentation","text":"<p>Automatically captures: - HTTP request/response (FastAPI endpoints) - HTTP client calls (httpx, requests to external APIs) - Database calls (if applicable) - Exception stack traces</p> <p>Configuration (<code>loan_avengers/api/app.py:56-82</code>): <pre><code># Automatically configured from environment variables\nconfigure_azure_monitor()\nFastAPIInstrumentor.instrument_app(app, excluded_urls=\"/health,/docs,/redoc\")\n</code></pre></p>"},{"location":"deployment/monitoring/#2-microsoft-agent-framework-observability","title":"2. Microsoft Agent Framework Observability","text":"<p>Automatically captures (<code>loan_avengers/utils/observability.py:52-58</code>): - Agent execution traces - Token usage (input/output tokens) - Agent performance metrics - Cost estimation</p> <p>Configuration: <pre><code>setup_observability(\n    applicationinsights_connection_string=os.getenv(\"APPLICATIONINSIGHTS_CONNECTION_STRING\"),\n    enable_sensitive_data=False,  # Never log PII\n    enable_live_metrics=True,      # Real-time monitoring\n)\n</code></pre></p>"},{"location":"deployment/monitoring/#3-correlation-id-tracking","title":"3. Correlation ID Tracking","text":"<p>Purpose: Track requests end-to-end across API \u2192 Agents \u2192 MCP servers</p> <p>Implementation (<code>loan_avengers/api/app.py:93-136</code>): - Middleware extracts <code>X-Correlation-ID</code> header or generates UUID - Stored in ContextVar (thread-safe for async) - Automatically added to all logs via <code>Observability.get_correlation_id()</code> - Propagated through OpenTelemetry traces - Returned in response headers</p> <p>Usage in code: <pre><code>logger.info(\n    \"Processing request\",\n    extra={\n        \"correlation_id\": Observability.get_correlation_id(),\n        \"application_id\": app_id,\n        # ... other fields\n    }\n)\n</code></pre></p>"},{"location":"deployment/monitoring/#4-token-usage-tracking","title":"4. Token Usage Tracking","text":"<p>Purpose: Cost management and optimization</p> <p>Implementation (<code>loan_avengers/utils/observability.py:239-294</code>): <pre><code>Observability.log_token_usage(\n    agent_name=\"Credit_Assessor\",\n    input_tokens=150,\n    output_tokens=75,\n    model=\"gpt-4\",\n    application_id=\"LN1234567890\"\n)\n</code></pre></p> <p>Logged fields: - <code>event_type</code>: \"token_usage\" - <code>agent_name</code>: Which agent consumed tokens - <code>input_tokens</code>, <code>output_tokens</code>, <code>total_tokens</code> - <code>model</code>: Model deployment name - <code>application_id</code>: Masked for security - <code>correlation_id</code>: For request tracing</p>"},{"location":"deployment/monitoring/#environment-variables","title":"Environment Variables","text":"<p>Required for full observability:</p> <pre><code># Required: Application Insights connection string\nAPPLICATIONINSIGHTS_CONNECTION_STRING=InstrumentationKey=...;IngestionEndpoint=...\n\n# Recommended: Service identification\nOTEL_SERVICE_NAME=loan-avengers-api\nOTEL_SERVICE_VERSION=0.1.0\nOTEL_RESOURCE_ATTRIBUTES=deployment.environment=production,cloud.provider=azure\n\n# Optional: Logging configuration\nLOG_LEVEL=INFO  # DEBUG for development\nENABLE_SENSITIVE_DATA=false  # NEVER enable in production\n\n# Optional: Exclude health checks from tracing\nOTEL_PYTHON_FASTAPI_EXCLUDED_URLS=/health,/docs,/redoc,/openapi.json\n</code></pre>"},{"location":"deployment/monitoring/#azure-application-insights-queries-kql","title":"Azure Application Insights Queries (KQL)","text":""},{"location":"deployment/monitoring/#1-request-tracing","title":"1. Request Tracing","text":"<p>Find request by correlation ID: <pre><code>union requests, traces, exceptions\n| where customDimensions.correlation_id == \"your-correlation-id-here\"\n| project timestamp, itemType, operation_Name, message, customDimensions\n| order by timestamp asc\n</code></pre></p> <p>Track full loan application journey: <pre><code>let correlationId = \"your-correlation-id\";\nunion requests, traces\n| where customDimensions.correlation_id == correlationId\n| extend\n    phase = tostring(customDimensions.phase),\n    agent = tostring(customDimensions.agent_name),\n    app_id = tostring(customDimensions.application_id)\n| project timestamp, itemType, operation_Name, phase, agent, message\n| order by timestamp asc\n</code></pre></p>"},{"location":"deployment/monitoring/#2-performance-analysis","title":"2. Performance Analysis","text":"<p>API endpoint latency (p50, p95, p99): <pre><code>requests\n| where name == \"POST /api/chat\"\n| summarize\n    count = count(),\n    avg_duration = avg(duration),\n    p50 = percentile(duration, 50),\n    p95 = percentile(duration, 95),\n    p99 = percentile(duration, 99)\n    by bin(timestamp, 5m)\n| order by timestamp desc\n</code></pre></p> <p>Agent execution time: <pre><code>traces\n| where message contains \"Agent processing\"\n| extend\n    agent = tostring(customDimensions.agent_name),\n    phase = tostring(customDimensions.phase),\n    duration_ms = todouble(customDimensions.duration_ms)\n| summarize\n    count(),\n    avg(duration_ms),\n    percentile(duration_ms, 50),\n    percentile(duration_ms, 95)\n    by agent, phase\n</code></pre></p> <p>Slowest requests in last hour: <pre><code>requests\n| where timestamp &gt; ago(1h)\n| top 20 by duration desc\n| project\n    timestamp,\n    name,\n    duration,\n    resultCode,\n    operation_Id,\n    customDimensions.correlation_id,\n    customDimensions.application_id\n</code></pre></p>"},{"location":"deployment/monitoring/#3-error-analysis","title":"3. Error Analysis","text":"<p>Error rate by endpoint: <pre><code>requests\n| where timestamp &gt; ago(1h)\n| summarize\n    total = count(),\n    errors = countif(success == false),\n    error_rate = (countif(success == false) * 100.0 / count())\n    by name\n| where error_rate &gt; 0\n| order by error_rate desc\n</code></pre></p> <p>Recent exceptions with context: <pre><code>exceptions\n| where timestamp &gt; ago(1h)\n| extend\n    correlation_id = tostring(customDimensions.correlation_id),\n    application_id = tostring(customDimensions.application_id),\n    error_type = tostring(customDimensions.error_type)\n| project\n    timestamp,\n    type,\n    outerMessage,\n    correlation_id,\n    application_id,\n    error_type,\n    operation_Id\n| order by timestamp desc\n</code></pre></p> <p>Agent failure analysis: <pre><code>traces\n| where severityLevel &gt;= 3  // Error or Critical\n| where message contains \"failed\"\n| extend\n    agent = tostring(customDimensions.agent_name),\n    phase = tostring(customDimensions.phase),\n    error_type = tostring(customDimensions.error_type)\n| summarize\n    failure_count = count(),\n    unique_errors = dcount(error_type)\n    by agent, phase\n| order by failure_count desc\n</code></pre></p>"},{"location":"deployment/monitoring/#4-cost-management","title":"4. Cost Management","text":"<p>Token usage by agent: <pre><code>traces\n| where customDimensions.event_type == \"token_usage\"\n| extend\n    agent = tostring(customDimensions.agent_name),\n    total_tokens = toint(customDimensions.total_tokens),\n    model = tostring(customDimensions.model)\n| summarize\n    total_tokens = sum(total_tokens),\n    avg_tokens_per_call = avg(total_tokens),\n    call_count = count()\n    by agent, model\n| extend estimated_cost_usd = total_tokens * 0.00001  // Adjust rate for your model\n| order by estimated_cost_usd desc\n</code></pre></p> <p>Daily token usage trend: <pre><code>traces\n| where customDimensions.event_type == \"token_usage\"\n| extend total_tokens = toint(customDimensions.total_tokens)\n| summarize\n    total_tokens = sum(total_tokens),\n    call_count = count()\n    by bin(timestamp, 1d)\n| extend daily_cost_usd = total_tokens * 0.00001\n| order by timestamp desc\n</code></pre></p> <p>Expensive applications (top token consumers): <pre><code>traces\n| where customDimensions.event_type == \"token_usage\"\n| extend\n    app_id = tostring(customDimensions.application_id),\n    total_tokens = toint(customDimensions.total_tokens)\n| summarize\n    total_tokens = sum(total_tokens),\n    agent_calls = count()\n    by app_id\n| extend estimated_cost = total_tokens * 0.00001\n| top 20 by total_tokens desc\n</code></pre></p>"},{"location":"deployment/monitoring/#5-user-behavior","title":"5. User Behavior","text":"<p>Loan application funnel: <pre><code>traces\n| where customDimensions.agent_name == \"Cap-ital America\"\n  or customDimensions.phase in (\"intake\", \"credit\", \"income\", \"risk\")\n| extend\n    correlation_id = tostring(customDimensions.correlation_id),\n    phase = tostring(customDimensions.phase),\n    completion = toint(customDimensions.completion_percentage)\n| summarize arg_max(timestamp, *) by correlation_id, phase\n| summarize\n    started = dcountif(correlation_id, phase == \"collecting\"),\n    completed_intake = dcountif(correlation_id, completion &gt;= 100),\n    reached_credit = dcountif(correlation_id, phase == \"credit\"),\n    reached_income = dcountif(correlation_id, phase == \"income\"),\n    reached_decision = dcountif(correlation_id, phase == \"risk\")\n</code></pre></p> <p>Session duration analysis: <pre><code>requests\n| where name == \"POST /api/chat\"\n| extend session_id = tostring(customDimensions.session_id)\n| summarize\n    session_start = min(timestamp),\n    session_end = max(timestamp),\n    message_count = count()\n    by session_id\n| extend session_duration_minutes = datetime_diff('minute', session_end, session_start)\n| summarize\n    avg(session_duration_minutes),\n    percentile(session_duration_minutes, 50),\n    percentile(session_duration_minutes, 95)\n</code></pre></p>"},{"location":"deployment/monitoring/#debugging-workflows","title":"Debugging Workflows","text":""},{"location":"deployment/monitoring/#scenario-1-user-reports-error","title":"Scenario 1: User Reports Error","text":"<ol> <li>Get correlation ID from user or response headers</li> <li>Find full request trace:    <pre><code>union requests, traces, exceptions\n| where customDimensions.correlation_id == \"CORRELATION_ID\"\n| order by timestamp asc\n</code></pre></li> <li>Identify failure point from trace timeline</li> <li>Check exception details if present</li> <li>Review agent logs for that correlation ID</li> </ol>"},{"location":"deployment/monitoring/#scenario-2-slow-performance","title":"Scenario 2: Slow Performance","text":"<ol> <li>Identify slow endpoint:    <pre><code>requests\n| where duration &gt; 5000  // &gt;5 seconds\n| top 50 by duration desc\n</code></pre></li> <li>Check agent execution times for those requests</li> <li>Review external dependencies (httpx calls)</li> <li>Analyze token usage - high tokens = longer processing</li> </ol>"},{"location":"deployment/monitoring/#scenario-3-cost-spike","title":"Scenario 3: Cost Spike","text":"<ol> <li>Identify high token usage:    <pre><code>traces\n| where customDimensions.event_type == \"token_usage\"\n| where timestamp &gt; ago(1h)\n| summarize total_tokens = sum(toint(customDimensions.total_tokens)) by bin(timestamp, 5m)\n| order by total_tokens desc\n</code></pre></li> <li>Find applications causing spike</li> <li>Review agent prompts - are they too verbose?</li> <li>Check for loops - is same request retrying?</li> </ol>"},{"location":"deployment/monitoring/#dashboards","title":"Dashboards","text":""},{"location":"deployment/monitoring/#create-application-insights-workbook","title":"Create Application Insights Workbook","text":"<ol> <li>Navigate to Azure Portal \u2192 Application Insights \u2192 Workbooks</li> <li>Create new workbook</li> <li>Add queries from above (Performance, Errors, Cost)</li> <li>Set auto-refresh to 5 minutes</li> <li>Pin to dashboard for monitoring</li> </ol>"},{"location":"deployment/monitoring/#recommended-tiles","title":"Recommended Tiles","text":"<ol> <li>Request Rate - requests/minute over time</li> <li>Error Rate - percentage of failed requests</li> <li>P95 Latency - 95th percentile response time</li> <li>Token Usage - daily/hourly token consumption</li> <li>Active Sessions - current session count</li> <li>Agent Performance - avg duration by agent</li> </ol>"},{"location":"deployment/monitoring/#alerts","title":"Alerts","text":"<p>Configure alerts in Azure Application Insights:</p>"},{"location":"deployment/monitoring/#critical-alerts","title":"Critical Alerts","text":"<ol> <li>High Error Rate</li> <li>Condition: Error rate &gt; 5% over 5 minutes</li> <li> <p>Action: Email, Slack notification</p> </li> <li> <p>Slow Performance</p> </li> <li>Condition: P95 latency &gt; 5 seconds over 5 minutes</li> <li> <p>Action: Email notification</p> </li> <li> <p>Service Down</p> </li> <li>Condition: Availability &lt; 99% over 5 minutes</li> <li>Action: PagerDuty/Slack</li> </ol>"},{"location":"deployment/monitoring/#warning-alerts","title":"Warning Alerts","text":"<ol> <li>High Token Usage</li> <li>Condition: Tokens &gt; 100K over 1 hour</li> <li> <p>Action: Email notification</p> </li> <li> <p>Agent Failures</p> </li> <li>Condition: Agent failures &gt; 10 over 15 minutes</li> <li>Action: Slack notification</li> </ol>"},{"location":"deployment/monitoring/#best-practices","title":"Best Practices","text":""},{"location":"deployment/monitoring/#do","title":"DO \u2705","text":"<ul> <li>Always include correlation_id in logs</li> <li>Mask PII (use <code>Observability.mask_application_id()</code>)</li> <li>Use structured logging with <code>extra={}</code> dict</li> <li>Log business events (application submitted, approved, rejected)</li> <li>Track token usage for cost management</li> <li>Set appropriate log levels (INFO in prod, DEBUG in dev)</li> </ul>"},{"location":"deployment/monitoring/#dont","title":"DON'T \u274c","text":"<ul> <li>Log sensitive data (SSN, full names, addresses)</li> <li>Log full prompts (token waste in logs)</li> <li>Log on every line (noise and performance)</li> <li>Ignore correlation IDs (breaks tracing)</li> <li>Skip error context (always log error_type and stack trace)</li> <li>Over-instrument (exclude health checks, static assets)</li> </ul>"},{"location":"deployment/monitoring/#troubleshooting","title":"Troubleshooting","text":""},{"location":"deployment/monitoring/#traces-not-appearing-in-application-insights","title":"Traces not appearing in Application Insights","text":"<ol> <li>Check connection string: Verify <code>APPLICATIONINSIGHTS_CONNECTION_STRING</code></li> <li>Check firewall: Ensure outbound HTTPS to <code>dc.services.visualstudio.com</code></li> <li>Check sampling: Traces may be sampled (default 100% in dev)</li> <li>Wait 2-3 minutes: Ingestion delay is normal</li> </ol>"},{"location":"deployment/monitoring/#high-latency-from-instrumentation","title":"High latency from instrumentation","text":"<ol> <li>Check batch settings: Default batching should be &lt;1ms overhead</li> <li>Exclude noisy endpoints: Add to <code>OTEL_PYTHON_FASTAPI_EXCLUDED_URLS</code></li> <li>Reduce attribute cardinality: Limit unique values in custom dimensions</li> <li>Disable sensitive data: Set <code>ENABLE_SENSITIVE_DATA=false</code></li> </ol>"},{"location":"deployment/monitoring/#missing-correlation-ids","title":"Missing correlation IDs","text":"<ol> <li>Verify middleware: Check <code>add_correlation_id_middleware</code> is registered</li> <li>Check ContextVar: Ensure async context propagation</li> <li>Clear between requests: Middleware should call <code>clear_correlation_id()</code></li> </ol>"},{"location":"deployment/monitoring/#resources","title":"Resources","text":"<ul> <li>Azure Application Insights Docs</li> <li>OpenTelemetry Python</li> <li>KQL Query Language</li> <li>Agent Framework Observability</li> </ul>"},{"location":"deployment/monitoring/#support","title":"Support","text":"<p>For observability issues: 1. Check this guide first 2. Review Application Insights logs 3. Contact DevOps team with correlation ID</p>"},{"location":"developer-guide/","title":"Index","text":"<p>Coming soon...</p>"},{"location":"developer-guide/api-reference/","title":"Api Reference","text":"<p>Coming soon...</p>"},{"location":"developer-guide/contributing/","title":"Contributing","text":"<p>Coming soon...</p>"},{"location":"developer-guide/project-structure/","title":"Project Structure","text":"<p>Coming soon...</p>"},{"location":"developer-guide/setup/","title":"Setup","text":"<p>Coming soon...</p>"},{"location":"developer-guide/testing/","title":"Testing","text":"<p>Coming soon...</p>"},{"location":"getting-started/architecture/","title":"Architecture","text":"<p>Coming soon...</p>"},{"location":"getting-started/first-loan/","title":"First Loan","text":"<p>Coming soon...</p>"},{"location":"getting-started/installation/","title":"Installation Guide","text":"<p>Detailed installation instructions coming soon. For now, see the Quick Start Guide.</p>"},{"location":"getting-started/installation/#system-requirements","title":"System Requirements","text":"<ul> <li>Python 3.12+</li> <li>Node.js 18+</li> <li>uv package manager</li> <li>Azure AI Foundry account</li> </ul>"},{"location":"getting-started/installation/#detailed-setup","title":"Detailed Setup","text":"<p>Coming soon...</p>"},{"location":"getting-started/quickstart/","title":"Quick Start Guide","text":"<p>Get the Loan Avengers system up and running in under 10 minutes!</p>"},{"location":"getting-started/quickstart/#prerequisites","title":"Prerequisites","text":"<p>Before you begin, ensure you have:</p> <ul> <li>Python 3.12+ installed</li> <li>Node.js 18+ and npm</li> <li>uv package manager (installation guide)</li> <li>Azure AI Foundry account with GPT-4 access</li> <li>Git for version control</li> </ul>"},{"location":"getting-started/quickstart/#installation-steps","title":"Installation Steps","text":""},{"location":"getting-started/quickstart/#1-clone-the-repository","title":"1. Clone the Repository","text":"<pre><code>git clone https://github.com/niksacdev/loan-avengers.git\ncd loan-avengers\n</code></pre>"},{"location":"getting-started/quickstart/#2-set-up-environment-variables","title":"2. Set Up Environment Variables","text":"<p>Create a <code>.env</code> file in the root directory:</p> <pre><code># Azure AI Foundry Configuration\nAZURE_AI_PROJECT_ENDPOINT=https://your-project.services.ai.azure.com/api/projects/your-project\nAZURE_AI_MODEL_DEPLOYMENT_NAME=your-gpt4-deployment\n\n# Application Configuration\nLOG_LEVEL=INFO\nAPP_DEBUG=false\nAPP_CORS_ORIGINS=http://localhost:5173,http://localhost:3000\n</code></pre> <p>Getting Azure Credentials</p> <p>Visit Azure AI Foundry to create a project and deploy GPT-4. Copy your project endpoint and model deployment name.</p>"},{"location":"getting-started/quickstart/#3-install-backend-dependencies","title":"3. Install Backend Dependencies","text":"<pre><code># Install Python dependencies using uv\nuv sync\n</code></pre>"},{"location":"getting-started/quickstart/#4-install-frontend-dependencies","title":"4. Install Frontend Dependencies","text":"<pre><code># Navigate to UI directory\ncd apps/ui\n\n# Install npm packages\nnpm install\n\n# Return to root\ncd ../..\n</code></pre>"},{"location":"getting-started/quickstart/#5-start-mcp-servers","title":"5. Start MCP Servers","text":"<p>Open three terminal windows and start the MCP servers:</p> <p>Terminal 1: Application Verification Server <pre><code>uv run python -m loan_avengers.tools.mcp_servers.application_verification.server\n</code></pre></p> <p>Terminal 2: Document Processing Server <pre><code>uv run python -m loan_avengers.tools.mcp_servers.document_processing.server\n</code></pre></p> <p>Terminal 3: Financial Calculations Server <pre><code>uv run python -m loan_avengers.tools.mcp_servers.financial_calculations.server\n</code></pre></p> <p>MCP Server Ports</p> <ul> <li>Application Verification: <code>localhost:8010</code></li> <li>Document Processing: <code>localhost:8011</code></li> <li>Financial Calculations: <code>localhost:8012</code></li> </ul>"},{"location":"getting-started/quickstart/#6-start-the-api-server","title":"6. Start the API Server","text":"<p>In a new terminal:</p> <pre><code>cd apps/api\nuv run uvicorn loan_avengers.api.app:app --host 0.0.0.0 --port 8000 --reload\n</code></pre> <p>The API will be available at <code>http://localhost:8000</code></p>"},{"location":"getting-started/quickstart/#7-start-the-frontend","title":"7. Start the Frontend","text":"<p>In another terminal:</p> <pre><code>cd apps/ui\nnpm run dev\n</code></pre> <p>The UI will be available at <code>http://localhost:5173</code></p>"},{"location":"getting-started/quickstart/#verify-installation","title":"Verify Installation","text":"<ol> <li>Open your browser to <code>http://localhost:5173</code></li> <li>You should see the Loan Avengers homepage with the AI Dream Team</li> <li>Click \"Try the Demo\" to start processing a loan application</li> <li>Fill in the sample data and submit</li> <li>Watch as the AI agents process your application in real-time!</li> </ol>"},{"location":"getting-started/quickstart/#whats-next","title":"What's Next?","text":"<ul> <li>Process Your First Loan Application</li> <li>Understand the Architecture</li> <li>Explore the Developer Guide</li> </ul>"},{"location":"getting-started/quickstart/#troubleshooting","title":"Troubleshooting","text":""},{"location":"getting-started/quickstart/#port-already-in-use","title":"Port Already in Use","text":"<p>If you see \"port already in use\" errors, check for existing processes:</p> <pre><code># Check ports 8000, 8010-8012, 5173\nlsof -i :8000\nlsof -i :8010\nlsof -i :8011\nlsof -i :8012\nlsof -i :5173\n\n# Kill processes if needed\nkill -9 &lt;PID&gt;\n</code></pre>"},{"location":"getting-started/quickstart/#azure-authentication-errors","title":"Azure Authentication Errors","text":"<p>Ensure your <code>.env</code> file has correct Azure credentials:</p> <pre><code># Test Azure connection\nuv run python -c \"from azure.identity import DefaultAzureCredential; DefaultAzureCredential().get_token('https://cognitiveservices.azure.com/.default')\"\n</code></pre>"},{"location":"getting-started/quickstart/#module-not-found-errors","title":"Module Not Found Errors","text":"<p>Reinstall dependencies:</p> <pre><code># Backend\nuv sync --no-cache\n\n# Frontend\ncd apps/ui &amp;&amp; npm ci\n</code></pre> <p>For more troubleshooting tips, see the Troubleshooting Guide.</p>"},{"location":"getting-started/quickstart/#getting-help","title":"Getting Help","text":"<ul> <li>Issues: GitHub Issues</li> <li>Discussions: GitHub Discussions</li> <li>Documentation: You're reading it! \ud83d\udcd6</li> </ul>"},{"location":"reference/code-review/","title":"Code Review","text":"<p>Coming soon...</p>"},{"location":"reference/faq/","title":"Faq","text":"<p>Coming soon...</p>"},{"location":"reference/migration-guide/","title":"Repository Restructuring Migration Plan","text":""},{"location":"reference/migration-guide/#overview","title":"Overview","text":"<p>The repository is being restructured from a Python package-centric layout to an apps-based monorepo suitable for multi-container Azure deployment.</p>"},{"location":"reference/migration-guide/#current-status-structure-created-migration-in-progress","title":"Current Status: \u2705 Structure Created, \u23f3 Migration In Progress","text":""},{"location":"reference/migration-guide/#completed","title":"Completed \u2705","text":"<ul> <li> Created <code>apps/</code> directory structure</li> <li> Moved UI to <code>apps/ui/</code></li> <li> Copied API code to <code>apps/api/</code></li> <li> Created <code>pyproject.toml</code> for API with uv</li> <li> Created Dockerfiles for API and UI</li> <li> Created docker-compose.yml for local development</li> <li> Created Azure Agent Service config templates</li> <li> Created comprehensive README files</li> </ul>"},{"location":"reference/migration-guide/#pending","title":"Pending \u23f3","text":"<ul> <li> Remove original <code>loan_avengers/</code> directory</li> <li> Update all import paths throughout codebase</li> <li> Update GitHub Actions workflows</li> <li> Update CLAUDE.md and documentation</li> <li> Test all components</li> <li> Update .gitignore for new structure</li> <li> Create ADR documenting this restructuring</li> </ul>"},{"location":"reference/migration-guide/#directory-structure-comparison","title":"Directory Structure Comparison","text":""},{"location":"reference/migration-guide/#before-current","title":"Before (Current)","text":"<pre><code>loan-avengers/\n\u251c\u2500\u2500 loan_avengers/        # Python package\n\u2502   \u251c\u2500\u2500 api/\n\u2502   \u251c\u2500\u2500 agents/\n\u2502   \u251c\u2500\u2500 models/\n\u2502   \u251c\u2500\u2500 tools/\n\u2502   \u251c\u2500\u2500 utils/\n\u2502   \u2514\u2500\u2500 ui/              # \u274c UI nested in Python package\n\u251c\u2500\u2500 tests/\n\u251c\u2500\u2500 pyproject.toml       # Root-level Python config\n\u2514\u2500\u2500 README.md\n</code></pre>"},{"location":"reference/migration-guide/#after-target","title":"After (Target)","text":"<pre><code>loan-avengers/\n\u251c\u2500\u2500 apps/                 # \u2705 All deployable applications\n\u2502   \u251c\u2500\u2500 api/             # FastAPI Container App\n\u2502   \u2502   \u251c\u2500\u2500 Dockerfile\n\u2502   \u2502   \u251c\u2500\u2500 pyproject.toml\n\u2502   \u2502   \u2514\u2500\u2500 loan_avengers/\n\u2502   \u251c\u2500\u2500 ui/              # React Container App\n\u2502   \u2502   \u251c\u2500\u2500 Dockerfile\n\u2502   \u2502   \u251c\u2500\u2500 package.json\n\u2502   \u2502   \u2514\u2500\u2500 src/\n\u2502   \u2514\u2500\u2500 agents/          # Azure Agent Service configs\n\u251c\u2500\u2500 tests/\n\u251c\u2500\u2500 docker-compose.yml   # Local development\n\u2514\u2500\u2500 README.md\n</code></pre>"},{"location":"reference/migration-guide/#migration-steps","title":"Migration Steps","text":""},{"location":"reference/migration-guide/#step-1-import-path-updates-in-progress","title":"Step 1: Import Path Updates (IN PROGRESS)","text":"<p>All Python imports remain unchanged because the package structure inside <code>apps/api/</code> is identical: - \u2705 <code>from loan_avengers.api.app import app</code> - \u2705 <code>from loan_avengers.models.application import LoanApplication</code> - \u2705 <code>from loan_avengers.agents.conversation_orchestrator import ConversationOrchestrator</code></p> <p>Files that need updates: - Test files in <code>tests/</code> (update sys.path if needed) - GitHub Actions workflows - Documentation references</p>"},{"location":"reference/migration-guide/#step-2-github-actions-updates","title":"Step 2: GitHub Actions Updates","text":"<p>Update <code>.github/workflows/</code> to: 1. Run API tests from <code>apps/api/</code> 2. Build Docker images for both apps 3. Push to Azure Container Registry 4. Deploy to Azure Container Apps</p> <p>Files to update: - <code>.github/workflows/test.yml</code> - <code>.github/workflows/build-and-deploy.yml</code> (if exists)</p>"},{"location":"reference/migration-guide/#step-3-documentation-updates","title":"Step 3: Documentation Updates","text":"<p>Update references in: - [ ] <code>README.md</code> - Update quick start instructions - [ ] <code>CLAUDE.md</code> - Update directory structure references - [ ] <code>docs/</code> - Update all architectural diagrams - [ ] <code>apps/*/README.md</code> - Already created \u2705</p>"},{"location":"reference/migration-guide/#step-4-configuration-updates","title":"Step 4: Configuration Updates","text":"<p>Update: - [ ] <code>.gitignore</code> - Add apps-specific patterns - [ ] Root <code>pyproject.toml</code> - Either remove or make it a workspace config - [ ] <code>.env.example</code> - Already updated \u2705</p>"},{"location":"reference/migration-guide/#step-5-remove-old-structure","title":"Step 5: Remove Old Structure","text":"<p>Once everything is working: <pre><code># Backup first!\nmv loan_avengers loan_avengers.backup\n\n# Test everything works\n\n# If successful, remove backup\nrm -rf loan_avengers.backup\n</code></pre></p>"},{"location":"reference/migration-guide/#testing-plan","title":"Testing Plan","text":""},{"location":"reference/migration-guide/#phase-1-api-tests","title":"Phase 1: API Tests","text":"<pre><code>cd apps/api\nuv sync\nuv run pytest ../../tests/unit/api/ -v\nuv run pytest ../../tests/integration/ -v\n</code></pre>"},{"location":"reference/migration-guide/#phase-2-local-docker-build","title":"Phase 2: Local Docker Build","text":"<pre><code># Build images\ndocker build -t loan-avengers-api:test ./apps/api\ndocker build -t loan-avengers-ui:test ./apps/ui\n\n# Test with docker-compose\ndocker-compose up\n</code></pre>"},{"location":"reference/migration-guide/#phase-3-end-to-end-testing","title":"Phase 3: End-to-End Testing","text":"<ol> <li>Start API: <code>cd apps/api &amp;&amp; uv run uvicorn loan_avengers.api.app:app --reload</code></li> <li>Start UI: <code>cd apps/ui &amp;&amp; npm run dev</code></li> <li>Test full user flow through UI</li> </ol>"},{"location":"reference/migration-guide/#rollback-plan","title":"Rollback Plan","text":"<p>If issues arise: 1. Keep original <code>loan_avengers/</code> directory intact 2. Original structure still works as-is 3. Can continue development in original structure 4. Complete migration later</p>"},{"location":"reference/migration-guide/#benefits-of-new-structure","title":"Benefits of New Structure","text":""},{"location":"reference/migration-guide/#for-development","title":"For Development","text":"<ul> <li>\u2705 Clear separation of concerns</li> <li>\u2705 Independent deployment of apps</li> <li>\u2705 Technology-agnostic (API in Python, UI in TypeScript)</li> <li>\u2705 Better Docker layer caching</li> </ul>"},{"location":"reference/migration-guide/#for-deployment","title":"For Deployment","text":"<ul> <li>\u2705 Azure Container Apps - one container per app</li> <li>\u2705 Independent scaling of API and UI</li> <li>\u2705 Separate CI/CD pipelines</li> <li>\u2705 Azure Agent Service ready</li> </ul>"},{"location":"reference/migration-guide/#for-team-collaboration","title":"For Team Collaboration","text":"<ul> <li>\u2705 Clear app boundaries</li> <li>\u2705 Easier code ownership</li> <li>\u2705 Reduced merge conflicts</li> <li>\u2705 Better monorepo practices</li> </ul>"},{"location":"reference/migration-guide/#timeline","title":"Timeline","text":"<ul> <li>Day 1: Structure created \u2705 (COMPLETED)</li> <li>Day 2: Test migration, update imports</li> <li>Day 3: Update CI/CD, documentation</li> <li>Day 4: Remove old structure, final testing</li> <li>Day 5: Deploy to Azure with new structure</li> </ul>"},{"location":"reference/migration-guide/#current-working-commands","title":"Current Working Commands","text":""},{"location":"reference/migration-guide/#running-locally-old-structure-still-works","title":"Running Locally (Old Structure - Still Works)","text":"<pre><code># API\nuv run uvicorn loan_avengers.api.app:app --reload\n\n# UI\ncd loan_avengers/ui &amp;&amp; npm run dev\n</code></pre>"},{"location":"reference/migration-guide/#running-locally-new-structure-testing","title":"Running Locally (New Structure - Testing)","text":"<pre><code># API\ncd apps/api &amp;&amp; uv run uvicorn loan_avengers.api.app:app --reload\n\n# UI\ncd apps/ui &amp;&amp; npm run dev\n\n# Or use Docker Compose\ndocker-compose up\n</code></pre>"},{"location":"reference/migration-guide/#questions-decisions","title":"Questions &amp; Decisions","text":""},{"location":"reference/migration-guide/#q-keep-root-pyprojecttoml","title":"Q: Keep root pyproject.toml?","text":"<p>Decision: Keep it for now as workspace config, update later to use uv workspaces</p>"},{"location":"reference/migration-guide/#q-how-to-handle-tests","title":"Q: How to handle tests?","text":"<p>Decision: Keep tests in <code>/tests</code> but update paths. Consider moving to <code>/apps/api/tests</code> later</p>"},{"location":"reference/migration-guide/#q-where-do-docs-live","title":"Q: Where do docs live?","text":"<p>Decision: Keep <code>/docs</code> at root since they apply to entire system</p>"},{"location":"reference/migration-guide/#q-what-about-scripts","title":"Q: What about scripts/?","text":"<p>Decision: Keep at root for now, these are repo-level utilities</p>"},{"location":"reference/migration-guide/#support","title":"Support","text":"<p>For issues during migration: 1. Check this document 2. Refer to <code>apps/README.md</code> for new structure 3. Check GitHub Issues 4. Reach out to team</p>"},{"location":"reference/migration-guide/#adr-reference","title":"ADR Reference","text":"<p>This restructuring will be documented in: - <code>docs/decisions/adr-006-monorepo-apps-structure.md</code> (TODO: Create)</p> <p>Status: \ud83d\udfe1 Migration In Progress Last Updated: 2025-10-01 Next Steps: Test imports and update paths</p>"},{"location":"reference/notes/","title":"Notes","text":"<p>Coming soon...</p>"},{"location":"reference/troubleshooting/","title":"Troubleshooting","text":"<p>Coming soon...</p>"},{"location":"reference/code-review-archive/2025-09-30-comprehensive-review/","title":"Comprehensive Code Review: Loan Avengers Backend","text":"<p>Date: 2025-09-30 Branch: feat/ui-integration-riley-agent Reviewer: Code Review Agent Overall Coverage: 47.37% (Target: \u226585% on core modules)</p>"},{"location":"reference/code-review-archive/2025-09-30-comprehensive-review/#executive-summary","title":"Executive Summary","text":"<p>Ready for Production: \u26d4 NO - Critical gaps identified Critical Issues: 8 must-fix issues Major Issues: 12 should-fix issues Minor Issues: 5 nice-to-have improvements</p>"},{"location":"reference/code-review-archive/2025-09-30-comprehensive-review/#coverage-status-by-module-type","title":"Coverage Status by Module Type","text":"Module Type Coverage Status Priority API Layer (<code>api/</code>) 0% \u26d4 Critical P1 Workflow Orchestration (<code>agents/sequential_workflow.py</code>) 0% \u26d4 Critical P1 Session Management (<code>api/session_manager.py</code>) 0% \u26d4 Critical P1 Coordinator Agent (<code>agents/loan_coordinator.py</code>) 0% \u26d4 Critical P1 Configuration (<code>config/settings.py</code>) 0% \ud83d\udfe1 High P2 MCP Transport (<code>utils/mcp_transport.py</code>) 0% \ud83d\udfe1 High P2 Intake Agent (<code>agents/intake_agent.py</code>) 96.3% \u2705 Good - Data Models (<code>models/</code>) 82-100% \u2705 Good -"},{"location":"reference/code-review-archive/2025-09-30-comprehensive-review/#priority-1-issues-must-fix-before-production","title":"Priority 1 Issues (Must Fix Before Production) \u26d4","text":""},{"location":"reference/code-review-archive/2025-09-30-comprehensive-review/#1-api-layer-completely-untested-0-coverage","title":"1. API Layer Completely Untested (0% Coverage)","text":"<p>File: <code>/workspaces/loan-avengers/loan_avengers/api/app.py</code> (67 statements, 0 covered)</p> <p>Risk Level: \ud83d\udd34 CRITICAL - Production Showstopper</p> <p>Impact: User-facing API endpoints have no test coverage, meaning: - Endpoint routing could break silently - Error handling paths are untested - CORS configuration is unvalidated - Session creation/retrieval logic is unverified - No validation that API contracts match frontend expectations</p> <p>Uncovered Code Paths: <pre><code># Lines 63-74: Health check endpoint - UNTESTED\n@app.get(\"/health\", response_model=HealthResponse)\nasync def health_check():\n    # What if services dict is malformed?\n    # What if datetime serialization fails?\n    return HealthResponse(...)\n\n# Lines 77-176: Main chat endpoint - UNTESTED\n@app.post(\"/api/chat\", response_model=ConversationResponse)\nasync def handle_unified_chat(request: ConversationRequest):\n    # Error paths untested:\n    # - Invalid session_id format\n    # - SharedState.set() failures\n    # - Sequential workflow exceptions\n    # - Empty workflow_responses list (line 152)\n    # - Session update failures\n</code></pre></p> <p>Missing Test Scenarios: 1. Happy Path Tests:    - Valid chat request with new session \u2192 successful response    - Chat request with existing session \u2192 conversation continues    - Health check returns correct service status    - Session retrieval for existing/non-existing sessions</p> <ol> <li>Error Handling Tests:</li> <li>Malformed request body (missing required fields)</li> <li>Invalid session_id format</li> <li>Sequential workflow raises exception</li> <li>Empty workflow responses (line 152 fallback)</li> <li>SharedState operations fail</li> <li> <p>Session manager operations fail</p> </li> <li> <p>Edge Case Tests:</p> </li> <li>Concurrent requests to same session</li> <li>Very long user messages</li> <li>Session cleanup during active request</li> <li>CORS preflight requests</li> </ol> <p>Recommended Test Structure: <pre><code># tests/unit/api/test_app.py\nclass TestHealthEndpoint:\n    async def test_health_check_returns_healthy_status():\n        \"\"\"Test health check returns correct structure.\"\"\"\n\n    async def test_health_check_includes_all_services():\n        \"\"\"Test health check includes workflow, session_manager, framework.\"\"\"\n\nclass TestChatEndpoint:\n    async def test_chat_with_new_session_creates_session():\n        \"\"\"Test new session is created when session_id is None.\"\"\"\n\n    async def test_chat_with_existing_session_reuses_thread():\n        \"\"\"Test existing session reuses AgentThread.\"\"\"\n\n    async def test_chat_updates_session_with_workflow_response():\n        \"\"\"Test session is updated with collected_data and completion.\"\"\"\n\n    async def test_chat_marks_session_completed_on_action_completed():\n        \"\"\"Test session status changes to completed.\"\"\"\n\n    async def test_chat_handles_empty_workflow_responses():\n        \"\"\"Test fallback when workflow returns no responses (line 152).\"\"\"\n\n    async def test_chat_handles_sequential_workflow_exception():\n        \"\"\"Test exception handling and error response.\"\"\"\n\n    async def test_chat_with_invalid_session_id_format():\n        \"\"\"Test validation of session_id parameter.\"\"\"\n\nclass TestSessionEndpoints:\n    async def test_get_session_info_existing_session():\n        \"\"\"Test retrieving existing session info.\"\"\"\n\n    async def test_get_session_info_nonexistent_returns_404():\n        \"\"\"Test 404 for non-existent session.\"\"\"\n\n    async def test_delete_session_removes_session():\n        \"\"\"Test session deletion.\"\"\"\n\n    async def test_list_sessions_returns_all_active():\n        \"\"\"Test listing all sessions.\"\"\"\n\n    async def test_cleanup_old_sessions_removes_expired():\n        \"\"\"Test cleanup removes old sessions.\"\"\"\n</code></pre></p>"},{"location":"reference/code-review-archive/2025-09-30-comprehensive-review/#2-session-management-completely-untested-0-coverage","title":"2. Session Management Completely Untested (0% Coverage)","text":"<p>File: <code>/workspaces/loan-avengers/loan_avengers/api/session_manager.py</code> (84 statements, 0 covered)</p> <p>Risk Level: \ud83d\udd34 CRITICAL - Memory Leak / State Corruption</p> <p>Impact: - Session lifecycle management could fail silently - Memory leaks if cleanup doesn't work - Session state corruption if concurrent access isn't handled - AgentThread persistence could fail - Race conditions in multi-user scenarios</p> <p>Uncovered Code Paths: <pre><code># ConversationSession class - UNTESTED\nclass ConversationSession:\n    def __init__(self, session_id: str | None = None):\n        # What if session_id is invalid format?\n        # What if uuid generation fails?\n        self.session_id = session_id or str(uuid.uuid4())\n\n    def get_or_create_thread(self) -&gt; AgentThread:\n        # Thread creation could fail\n        # Concurrent access could create multiple threads\n        if not self.agent_thread:\n            self.agent_thread = AgentThread()\n\n    def update_data(self, new_data, completion_percentage):\n        # What if new_data contains invalid keys?\n        # What if completion_percentage is out of range?\n        self.collected_data.update(new_data)\n\n# SessionManager class - UNTESTED\nclass SessionManager:\n    def cleanup_old_sessions(self, max_age_hours=24):\n        # Lines 265-283: Cleanup logic untested\n        # What if datetime calculation fails?\n        # What if session deletion during iteration?\n        cutoff_time = datetime.now(timezone.utc).replace(\n            hour=datetime.now(timezone.utc).hour - max_age_hours\n        )  # BUG: This doesn't subtract hours correctly!\n</code></pre></p> <p>Critical Bug Found (Line 265): <pre><code># CURRENT (INCORRECT):\ncutoff_time = datetime.now(timezone.utc).replace(\n    hour=datetime.now(timezone.utc).hour - max_age_hours\n)\n\n# CORRECT:\nfrom datetime import timedelta\ncutoff_time = datetime.now(timezone.utc) - timedelta(hours=max_age_hours)\n</code></pre></p> <p>Missing Test Scenarios: 1. Session Lifecycle Tests:    - Create new session with auto-generated ID    - Create session with specific ID    - Get existing session    - Get non-existent session returns None    - Delete session removes it    - Delete non-existent session returns False</p> <ol> <li>AgentThread Management Tests:</li> <li>get_or_create_thread creates thread on first call</li> <li>get_or_create_thread reuses thread on subsequent calls</li> <li> <p>Thread persists across session updates</p> </li> <li> <p>State Transition Tests:</p> </li> <li>mark_ready_for_processing changes status</li> <li>mark_processing changes status</li> <li>mark_completed changes status</li> <li>mark_error changes status with details</li> <li> <p>Status changes update last_activity timestamp</p> </li> <li> <p>Data Collection Tests:</p> </li> <li>update_data merges new data correctly</li> <li>update_data preserves existing data</li> <li>update_data updates completion_percentage</li> <li> <p>update_data updates last_activity</p> </li> <li> <p>Cleanup Tests:</p> </li> <li>cleanup_old_sessions removes sessions older than threshold</li> <li>cleanup_old_sessions preserves recent sessions</li> <li>cleanup_old_sessions with edge case timestamps</li> <li> <p>Test the bug in line 265 (hour subtraction)</p> </li> <li> <p>Concurrency Tests:</p> </li> <li>Multiple threads accessing same session</li> <li>Session creation race conditions</li> <li>Session deletion during active request</li> </ol> <p>Recommended Test Structure: <pre><code># tests/unit/api/test_session_manager.py\nclass TestConversationSession:\n    def test_init_with_auto_generated_id():\n        \"\"\"Test session creates valid UUID when no ID provided.\"\"\"\n\n    def test_init_with_provided_id():\n        \"\"\"Test session uses provided ID.\"\"\"\n\n    def test_get_or_create_thread_creates_on_first_call():\n        \"\"\"Test thread creation on first access.\"\"\"\n\n    def test_get_or_create_thread_reuses_existing():\n        \"\"\"Test thread reuse on subsequent calls.\"\"\"\n\n    def test_update_data_merges_new_data():\n        \"\"\"Test data merging preserves existing keys.\"\"\"\n\n    def test_update_data_updates_completion():\n        \"\"\"Test completion_percentage updates correctly.\"\"\"\n\n    def test_mark_completed_changes_status():\n        \"\"\"Test status transition to completed.\"\"\"\n\n    def test_to_dict_returns_serializable_dict():\n        \"\"\"Test dictionary representation for API responses.\"\"\"\n\nclass TestSessionManager:\n    def test_create_session_adds_to_sessions():\n        \"\"\"Test session creation adds to internal dict.\"\"\"\n\n    def test_get_session_returns_existing():\n        \"\"\"Test retrieving existing session.\"\"\"\n\n    def test_get_session_returns_none_for_nonexistent():\n        \"\"\"Test None return for non-existent session.\"\"\"\n\n    def test_get_or_create_creates_new_when_missing():\n        \"\"\"Test session creation when not found.\"\"\"\n\n    def test_get_or_create_returns_existing():\n        \"\"\"Test existing session returned.\"\"\"\n\n    def test_delete_session_removes_session():\n        \"\"\"Test session deletion.\"\"\"\n\n    def test_delete_session_returns_false_for_nonexistent():\n        \"\"\"Test False return when deleting non-existent.\"\"\"\n\n    def test_list_sessions_returns_all():\n        \"\"\"Test listing all sessions.\"\"\"\n\n    def test_cleanup_old_sessions_removes_old():\n        \"\"\"Test cleanup removes sessions older than threshold.\"\"\"\n\n    def test_cleanup_old_sessions_preserves_recent():\n        \"\"\"Test cleanup keeps recent sessions.\"\"\"\n\n    def test_cleanup_datetime_calculation_bug():\n        \"\"\"Test that cleanup correctly subtracts hours (bug in line 265).\"\"\"\n</code></pre></p>"},{"location":"reference/code-review-archive/2025-09-30-comprehensive-review/#3-loan-coordinator-agent-completely-untested-0-coverage","title":"3. Loan Coordinator Agent Completely Untested (0% Coverage)","text":"<p>File: <code>/workspaces/loan-avengers/loan_avengers/agents/loan_coordinator.py</code> (63 statements, 0 covered)</p> <p>Risk Level: \ud83d\udd34 CRITICAL - Conversation Flow Broken</p> <p>Impact: - Conversational data collection could fail - Application data creation could be invalid - Fallback handling untested - Token usage tracking unverified</p> <p>Uncovered Code Paths: <pre><code># Lines 83-214: Main conversation processing - UNTESTED\nasync def process_conversation(\n    self, user_message: str, thread: AgentThread | None = None,\n    current_data: dict[str, Any] | None = None\n) -&gt; AgentResponse[CoordinatorResponse]:\n    # What if user_message is empty?\n    # What if current_data has unexpected format?\n    # What if response.value is None? (fallback at line 137)\n\n# Lines 216-230: Completion calculation - UNTESTED\ndef _calculate_completion(self, data: dict[str, Any]) -&gt; int:\n    # What if data is None?\n    # What if data has extra fields?\n    # What if required fields have None values?\n\n# Lines 232-288: Application creation - UNTESTED\ndef create_loan_application(self, collected_data: dict[str, Any]) -&gt; LoanApplication:\n    # What if collected_data is missing required fields?\n    # What if email is invalid format?\n    # What if enum values are invalid?\n</code></pre></p> <p>Missing Test Scenarios: 1. Conversation Processing Tests:    - Valid conversation with new thread    - Conversation with existing thread preserves context    - Response parsing success    - Response parsing failure triggers fallback (line 137)    - Exception handling creates error response    - Token usage is captured correctly</p> <ol> <li>Completion Calculation Tests:</li> <li>Empty data returns 0%</li> <li>Partial data returns correct percentage</li> <li>Complete data returns 100%</li> <li>Extra fields don't affect calculation</li> <li> <p>None values for required fields handled</p> </li> <li> <p>Application Creation Tests:</p> </li> <li>Valid collected_data creates LoanApplication</li> <li>Missing required fields raises ValueError</li> <li>Invalid email format raises ValueError</li> <li>Invalid enum values raise ValueError</li> <li>Default values applied correctly (loan_term_months)</li> <li>application_id generation works</li> </ol> <p>Recommended Test Structure: <pre><code># tests/unit/agents/test_loan_coordinator.py\nclass TestLoanCoordinatorInit:\n    def test_init_with_default_client():\n        \"\"\"Test initialization with DefaultAzureCredential.\"\"\"\n\n    def test_init_with_custom_client():\n        \"\"\"Test initialization with custom chat client.\"\"\"\n\n    def test_init_loads_coordinator_persona():\n        \"\"\"Test persona is loaded from file.\"\"\"\n\nclass TestLoanCoordinatorProcessConversation:\n    async def test_process_conversation_success():\n        \"\"\"Test successful conversation processing.\"\"\"\n\n    async def test_process_conversation_with_thread():\n        \"\"\"Test conversation with existing thread.\"\"\"\n\n    async def test_process_conversation_parsing_failure():\n        \"\"\"Test fallback when response.value is None (line 137).\"\"\"\n\n    async def test_process_conversation_exception_handling():\n        \"\"\"Test exception creates error response.\"\"\"\n\n    async def test_process_conversation_empty_user_message():\n        \"\"\"Test handling of empty user message.\"\"\"\n\n    async def test_process_conversation_invalid_current_data():\n        \"\"\"Test handling of malformed current_data.\"\"\"\n\nclass TestLoanCoordinatorCalculateCompletion:\n    def test_calculate_completion_empty_data():\n        \"\"\"Test 0% for empty data.\"\"\"\n\n    def test_calculate_completion_partial_data():\n        \"\"\"Test percentage for partial data.\"\"\"\n\n    def test_calculate_completion_complete_data():\n        \"\"\"Test 100% for all required fields.\"\"\"\n\n    def test_calculate_completion_with_none_values():\n        \"\"\"Test None values are not counted as filled.\"\"\"\n\n    def test_calculate_completion_with_extra_fields():\n        \"\"\"Test extra fields don't affect calculation.\"\"\"\n\nclass TestLoanCoordinatorCreateApplication:\n    def test_create_application_success():\n        \"\"\"Test valid data creates LoanApplication.\"\"\"\n\n    def test_create_application_missing_required_fields():\n        \"\"\"Test ValueError for missing fields.\"\"\"\n\n    def test_create_application_invalid_email():\n        \"\"\"Test ValueError for invalid email format.\"\"\"\n\n    def test_create_application_invalid_enum_values():\n        \"\"\"Test ValueError for invalid loan_purpose/employment_status.\"\"\"\n\n    def test_create_application_applies_defaults():\n        \"\"\"Test default loan_term_months is applied.\"\"\"\n\n    def test_create_application_generates_ids():\n        \"\"\"Test application_id and applicant_id generation.\"\"\"\n</code></pre></p>"},{"location":"reference/code-review-archive/2025-09-30-comprehensive-review/#4-sequential-workflow-orchestrator-completely-untested-0-coverage","title":"4. Sequential Workflow Orchestrator Completely Untested (0% Coverage)","text":"<p>File: <code>/workspaces/loan-avengers/loan_avengers/agents/sequential_workflow.py</code> (115 statements, 0 covered)</p> <p>Risk Level: \ud83d\udd34 CRITICAL - End-to-End Flow Broken</p> <p>Impact: - Multi-agent workflow coordination could fail - SequentialBuilder integration untested - Event transformation could corrupt data - Workflow phase tracking could be incorrect - SharedState management unverified</p> <p>Uncovered Code Paths: <pre><code># Lines 192-206: Workflow building - UNTESTED\ndef _build_sequential_workflow(self):\n    # What if participants list is empty?\n    # What if SequentialBuilder fails?\n    return (\n        SequentialBuilder()\n        .participants([...])\n        .build()\n    )\n\n# Lines 208-281: Main workflow processing - UNTESTED\nasync def process_conversation(\n    self, user_message: str, thread: AgentThread,\n    shared_state: SharedState | None = None\n) -&gt; AsyncGenerator[WorkflowResponse, None]:\n    # What if user_message is empty?\n    # What if workflow.run raises exception?\n    # What if no workflow events are generated?\n    # What if shared_state operations fail?\n\n# Lines 283-344: Event transformation - UNTESTED\nasync def _transform_workflow_event(\n    self, event: WorkflowEvent, shared_state: SharedState,\n    current_phase: str\n) -&gt; WorkflowResponse | None:\n    # What if event has unexpected structure?\n    # What if shared_state.get() raises KeyError (handled line 309)?\n    # What if event has no executor_id?\n    # What if message_content extraction fails?\n</code></pre></p> <p>Missing Test Scenarios: 1. Initialization Tests:    - Default chat client initialization    - Custom chat client initialization    - All 5 agents created successfully    - Workflow built with correct participant order</p> <ol> <li>Workflow Execution Tests:</li> <li>Single message through complete workflow</li> <li>Multiple messages maintain conversation context</li> <li>SharedState persists across workflow steps</li> <li>Workflow phase transitions correctly</li> <li> <p>Completion percentage updates correctly</p> </li> <li> <p>Event Transformation Tests:</p> </li> <li>Event with executor_id transforms correctly</li> <li>Event with data string transforms</li> <li>Event with data object transforms</li> <li>Event with missing fields handled gracefully</li> <li>shared_state.get() KeyError handled (line 309)</li> <li> <p>Returns None on transformation failure</p> </li> <li> <p>Error Handling Tests:</p> </li> <li>Workflow execution exception returns error response</li> <li>Empty workflow events handled</li> <li>SharedState.set() failures</li> <li>SharedState.get() failures</li> <li> <p>Invalid event types</p> </li> <li> <p>Application Creation Tests:</p> </li> <li>create_loan_application with valid data</li> <li>create_loan_application with missing data raises ValueError</li> <li>Default values applied</li> </ol> <p>Recommended Test Structure: <pre><code># tests/unit/agents/test_sequential_workflow.py\nclass TestSequentialLoanWorkflowInit:\n    def test_init_with_default_client():\n        \"\"\"Test initialization creates all agents.\"\"\"\n\n    def test_init_with_custom_client():\n        \"\"\"Test initialization with custom client.\"\"\"\n\n    def test_agents_created_with_correct_personas():\n        \"\"\"Test each agent loads correct persona.\"\"\"\n\n    def test_workflow_built_with_correct_participants():\n        \"\"\"Test SequentialBuilder receives all 5 agents.\"\"\"\n\nclass TestSequentialLoanWorkflowProcessConversation:\n    async def test_process_conversation_single_message():\n        \"\"\"Test single message processes through workflow.\"\"\"\n\n    async def test_process_conversation_yields_responses():\n        \"\"\"Test workflow yields WorkflowResponse objects.\"\"\"\n\n    async def test_process_conversation_updates_shared_state():\n        \"\"\"Test application_data is updated in SharedState.\"\"\"\n\n    async def test_process_conversation_phase_transitions():\n        \"\"\"Test phase changes from collecting -&gt; deciding.\"\"\"\n\n    async def test_process_conversation_exception_yields_error():\n        \"\"\"Test exception yields error WorkflowResponse.\"\"\"\n\n    async def test_process_conversation_empty_message():\n        \"\"\"Test handling of empty user message.\"\"\"\n\nclass TestSequentialLoanWorkflowEventTransformation:\n    async def test_transform_event_with_executor_id():\n        \"\"\"Test event with executor_id extracts agent name.\"\"\"\n\n    async def test_transform_event_with_string_data():\n        \"\"\"Test event with string data.\"\"\"\n\n    async def test_transform_event_with_object_data():\n        \"\"\"Test event with object data extracts text.\"\"\"\n\n    async def test_transform_event_shared_state_keyerror():\n        \"\"\"Test KeyError from shared_state.get handled (line 309).\"\"\"\n\n    async def test_transform_event_returns_none_on_failure():\n        \"\"\"Test transformation failure returns None.\"\"\"\n\n    async def test_transform_event_calculates_completion():\n        \"\"\"Test completion percentage based on phase.\"\"\"\n\nclass TestSequentialLoanWorkflowCreateApplication:\n    def test_create_application_valid_data():\n        \"\"\"Test valid data creates LoanApplication.\"\"\"\n\n    def test_create_application_missing_data_raises_error():\n        \"\"\"Test ValueError for missing required data.\"\"\"\n\n    def test_create_application_applies_defaults():\n        \"\"\"Test default values applied.\"\"\"\n</code></pre></p>"},{"location":"reference/code-review-archive/2025-09-30-comprehensive-review/#priority-2-issues-should-fix-before-production","title":"Priority 2 Issues (Should Fix Before Production) \ud83d\udfe1","text":""},{"location":"reference/code-review-archive/2025-09-30-comprehensive-review/#5-configuration-settings-untested-0-coverage","title":"5. Configuration Settings Untested (0% Coverage)","text":"<p>File: <code>/workspaces/loan-avengers/loan_avengers/config/settings.py</code> (46 statements, 0 covered)</p> <p>Risk Level: \ud83d\udfe1 HIGH - Configuration Issues in Production</p> <p>Missing Test Scenarios: - YAML loading with valid config - YAML loading with missing file - YAML loading with invalid format - Environment variable overrides - Server URL construction - Error handling for unknown server names</p> <p>Recommended Tests: <pre><code># tests/unit/config/test_settings.py\nclass TestMCPServerConfig:\n    def test_load_from_yaml_success():\n        \"\"\"Test successful YAML loading.\"\"\"\n\n    def test_load_from_yaml_missing_file_raises_error():\n        \"\"\"Test FileNotFoundError for missing config.\"\"\"\n\n    def test_env_var_override_host():\n        \"\"\"Test environment variable overrides host.\"\"\"\n\n    def test_env_var_override_port():\n        \"\"\"Test environment variable overrides port and rebuilds URL.\"\"\"\n\n    def test_get_server_config_valid_server():\n        \"\"\"Test retrieving valid server config.\"\"\"\n\n    def test_get_server_config_invalid_server_raises_error():\n        \"\"\"Test ValueError for unknown server.\"\"\"\n\n    def test_get_server_url():\n        \"\"\"Test URL construction.\"\"\"\n\n    def test_get_available_servers():\n        \"\"\"Test listing available servers.\"\"\"\n</code></pre></p>"},{"location":"reference/code-review-archive/2025-09-30-comprehensive-review/#6-mcp-transport-layer-untested-0-coverage","title":"6. MCP Transport Layer Untested (0% Coverage)","text":"<p>File: <code>/workspaces/loan-avengers/loan_avengers/utils/mcp_transport.py</code> (23 statements, 0 covered)</p> <p>Risk Level: \ud83d\udfe1 HIGH - External Service Communication</p> <p>Impact: - MCP server connection handling untested - Timeout handling unverified - Error propagation unknown</p> <p>Missing Test Scenarios: - Successful MCP server connection - Connection timeout handling - Connection refused handling - Invalid URL handling - Retry logic (if implemented)</p>"},{"location":"reference/code-review-archive/2025-09-30-comprehensive-review/#7-configuration-loader-partially-tested-3387-coverage","title":"7. Configuration Loader Partially Tested (33.87% Coverage)","text":"<p>File: <code>/workspaces/loan-avengers/loan_avengers/utils/config_loader.py</code> (50 statements, 29 uncovered)</p> <p>Risk Level: \ud83d\udfe1 HIGH - Agent Configuration Errors</p> <p>Uncovered Lines: 25-43, 48-54, 59-64, 69-70, 75-76, 81-82, 87</p> <p>Missing Test Scenarios: <pre><code># Uncovered: Lines 25-43\ndef load_config(cls, force_reload: bool = False):\n    # Config caching untested\n    # FileNotFoundError handling untested\n    # YAML parsing untested\n    # Required sections validation untested\n\n# Uncovered: Lines 46-54\ndef get_agent_config(cls, agent_type: str):\n    # Unknown agent type handling untested\n    # ValueError with available types untested\n\n# Uncovered: Lines 56-64\ndef get_mcp_server_config(cls, server_type: str):\n    # Unknown server type handling untested\n</code></pre></p> <p>Recommended Tests: <pre><code># tests/unit/utils/test_config_loader.py\nclass TestConfigurationLoader:\n    def test_load_config_caches_result():\n        \"\"\"Test config is cached after first load.\"\"\"\n\n    def test_load_config_force_reload():\n        \"\"\"Test force_reload bypasses cache.\"\"\"\n\n    def test_load_config_missing_file_raises_error():\n        \"\"\"Test FileNotFoundError for missing file.\"\"\"\n\n    def test_load_config_missing_required_section_raises_error():\n        \"\"\"Test ValueError for missing required sections.\"\"\"\n\n    def test_get_agent_config_valid_type():\n        \"\"\"Test retrieving valid agent config.\"\"\"\n\n    def test_get_agent_config_invalid_type_raises_error():\n        \"\"\"Test ValueError with list of available types.\"\"\"\n\n    def test_get_mcp_server_config_valid_type():\n        \"\"\"Test retrieving valid MCP server config.\"\"\"\n\n    def test_get_mcp_server_config_invalid_type_raises_error():\n        \"\"\"Test ValueError for unknown server.\"\"\"\n\n    def test_list_agent_types():\n        \"\"\"Test listing all agent types.\"\"\"\n\n    def test_list_mcp_server_types():\n        \"\"\"Test listing all MCP server types.\"\"\"\n\n    def test_get_agent_capabilities():\n        \"\"\"Test retrieving agent capabilities.\"\"\"\n\n    def test_reload_configuration():\n        \"\"\"Test force reload clears cache.\"\"\"\n</code></pre></p>"},{"location":"reference/code-review-archive/2025-09-30-comprehensive-review/#8-persona-loader-partially-tested-5135-coverage","title":"8. Persona Loader Partially Tested (51.35% Coverage)","text":"<p>File: <code>/workspaces/loan-avengers/loan_avengers/utils/persona_loader.py</code> (33 statements, 14 uncovered)</p> <p>Risk Level: \ud83d\udfe1 MEDIUM - Agent Behavior Issues</p> <p>Uncovered Lines: 31-32, 46-47, 59, 68-77, 83</p> <p>Missing Test Scenarios: <pre><code># Uncovered: Lines 31-32\ndef load_persona(cls, persona_key: str) -&gt; str:\n    try:\n        return path.read_text(encoding=\"utf-8\")\n    except FileNotFoundError:  # UNTESTED\n        return \"...\"  # Fallback - UNTESTED\n\n# Uncovered: Lines 46-47, 59\ndef get_persona_path(cls, persona_key: str) -&gt; Path:\n    # Path construction untested\n\ndef persona_exists(cls, persona_key: str) -&gt; bool:\n    # Existence check untested\n\n# Uncovered: Lines 68-77\ndef list_available_personas(cls) -&gt; list[str]:\n    # Directory doesn't exist handling untested\n    # Glob pattern matching untested\n    # Persona key extraction untested\n</code></pre></p> <p>Recommended Tests: <pre><code># tests/unit/utils/test_persona_loader.py\nclass TestPersonaLoader:\n    def test_load_persona_existing_file():\n        \"\"\"Test loading existing persona file.\"\"\"\n\n    def test_load_persona_missing_file_returns_default():\n        \"\"\"Test fallback for missing persona file.\"\"\"\n\n    def test_get_persona_path():\n        \"\"\"Test persona path construction.\"\"\"\n\n    def test_persona_exists_true():\n        \"\"\"Test persona_exists returns True for existing file.\"\"\"\n\n    def test_persona_exists_false():\n        \"\"\"Test persona_exists returns False for missing file.\"\"\"\n\n    def test_list_available_personas():\n        \"\"\"Test listing all available personas.\"\"\"\n\n    def test_list_available_personas_empty_directory():\n        \"\"\"Test empty list when directory doesn't exist.\"\"\"\n\n    def test_list_available_personas_filters_correctly():\n        \"\"\"Test only *-agent-persona.md files are listed.\"\"\"\n</code></pre></p>"},{"location":"reference/code-review-archive/2025-09-30-comprehensive-review/#priority-3-issues-minor-improvements","title":"Priority 3 Issues (Minor Improvements) \ud83d\udcdd","text":""},{"location":"reference/code-review-archive/2025-09-30-comprehensive-review/#9-observability-tool-extraction-not-fully-tested-8295-coverage","title":"9. Observability Tool Extraction Not Fully Tested (82.95% Coverage)","text":"<p>File: <code>/workspaces/loan-avengers/loan_avengers/utils/observability.py</code> (68 statements, 12 uncovered)</p> <p>Uncovered Lines: 18-20, 53-58, 62, 88-89, 94, 99, 139-142</p> <p>Missing Test Scenarios: - Logger initialization edge cases - Mask_application_id with various formats - extract_tool_calls_from_response with edge cases - Empty message lists - Messages without tool_calls attribute</p>"},{"location":"reference/code-review-archive/2025-09-30-comprehensive-review/#10-data-model-edge-cases-7778-coverage","title":"10. Data Model Edge Cases (77.78% Coverage)","text":"<p>File: <code>/workspaces/loan-avengers/loan_avengers/models/application.py</code> (59 statements, 10 uncovered)</p> <p>Uncovered Lines: 127, 132-135, 140-142, 146, 150</p> <p>Missing Test Scenarios: <pre><code># Line 127: __hash__ method\ndef test_loan_application_hashable():\n    \"\"\"Test LoanApplication can be hashed for caching.\"\"\"\n\n# Lines 132-135: debt_to_income_ratio edge cases\ndef test_debt_to_income_ratio_with_zero_income():\n    \"\"\"Test None return when annual_income is 0.\"\"\"\n\ndef test_debt_to_income_ratio_with_none_debt():\n    \"\"\"Test None return when existing_debt is None.\"\"\"\n\n# Lines 140-142: loan_to_income_ratio edge cases\ndef test_loan_to_income_ratio_with_zero_income():\n    \"\"\"Test infinity return when annual_income is 0.\"\"\"\n\n# Lines 146, 150: Custom fields\ndef test_add_custom_field():\n    \"\"\"Test adding custom field to additional_data.\"\"\"\n\ndef test_get_custom_field_with_default():\n    \"\"\"Test retrieving custom field with default value.\"\"\"\n</code></pre></p>"},{"location":"reference/code-review-archive/2025-09-30-comprehensive-review/#code-quality-observations","title":"Code Quality Observations","text":""},{"location":"reference/code-review-archive/2025-09-30-comprehensive-review/#excellent-practices-observed","title":"\u2705 Excellent Practices Observed","text":"<ol> <li>Strong Type Hints: All functions have proper type hints including async generators</li> <li>Comprehensive Error Handling: Try-except blocks with structured logging</li> <li>Pydantic Models: Type-safe data models with validation</li> <li>Structured Logging: Observability module with PII masking</li> <li>Clear Documentation: Docstrings explain purpose and parameters</li> <li>Async/Await Properly Used: Correct async context managers</li> <li>Separation of Concerns: Clear separation between agents, API, models</li> </ol>"},{"location":"reference/code-review-archive/2025-09-30-comprehensive-review/#areas-for-improvement","title":"\ud83d\udfe1 Areas for Improvement","text":"<ol> <li> <p>Session Manager Bug (Line 265 in session_manager.py):    <pre><code># INCORRECT: This doesn't subtract hours correctly\ncutoff_time = datetime.now(timezone.utc).replace(\n    hour=datetime.now(timezone.utc).hour - max_age_hours\n)\n\n# CORRECT:\nfrom datetime import timedelta\ncutoff_time = datetime.now(timezone.utc) - timedelta(hours=max_age_hours)\n</code></pre></p> </li> <li> <p>Missing Input Validation:</p> </li> <li>API endpoints don't validate request body structure explicitly</li> <li>Session ID format not validated</li> <li> <p>User message length not validated</p> </li> <li> <p>Concurrency Concerns:</p> </li> <li>SessionManager uses plain dict without locking</li> <li>Potential race conditions with concurrent session access</li> <li> <p>No thread safety guarantees</p> </li> <li> <p>Error Response Consistency:</p> </li> <li>Some error paths return structured responses, others raise exceptions</li> <li> <p>Consider standardizing error response format</p> </li> <li> <p>Missing Health Checks:</p> </li> <li>No validation that MCP servers are actually reachable</li> <li>No validation of Azure AI Foundry connectivity</li> </ol>"},{"location":"reference/code-review-archive/2025-09-30-comprehensive-review/#architectural-observations","title":"Architectural Observations","text":""},{"location":"reference/code-review-archive/2025-09-30-comprehensive-review/#good-architecture-decisions","title":"\ud83c\udfaf Good Architecture Decisions","text":"<ol> <li>Agent Autonomy: Agents loaded from personas, not hardcoded</li> <li>Clean Separation: API \u2192 Workflow \u2192 Agents \u2192 Models</li> <li>MCP Integration: Clean abstraction for external services</li> <li>Session Persistence: AgentThread properly managed for conversation continuity</li> <li>Structured Responses: Type-safe Pydantic models throughout</li> </ol>"},{"location":"reference/code-review-archive/2025-09-30-comprehensive-review/#potential-design-concerns","title":"\ud83e\udd14 Potential Design Concerns","text":"<ol> <li>In-Memory Session Storage: Production needs Redis/database</li> <li>No Rate Limiting: API endpoints have no rate limiting</li> <li>No Request Tracing: Missing correlation IDs for request tracking</li> <li>Sequential Processing: Workflow is strictly sequential (might benefit from parallel assessment)</li> </ol>"},{"location":"reference/code-review-archive/2025-09-30-comprehensive-review/#security-considerations","title":"Security Considerations","text":""},{"location":"reference/code-review-archive/2025-09-30-comprehensive-review/#security-wins","title":"\u2705 Security Wins","text":"<ol> <li>PII Masking: Observability module masks sensitive IDs</li> <li>No Hardcoded Credentials: Uses Azure DefaultAzureCredential</li> <li>Parameterized Requests: No SQL injection risk (using Pydantic models)</li> <li>CORS Configured: Restricted to specific origins</li> </ol>"},{"location":"reference/code-review-archive/2025-09-30-comprehensive-review/#security-concerns","title":"\u26a0\ufe0f Security Concerns","text":"<ol> <li>Session ID Security:</li> <li>Session IDs are UUIDs but not cryptographically secured</li> <li>No session expiration enforcement</li> <li> <p>No session hijacking prevention</p> </li> <li> <p>Input Validation:</p> </li> <li>User message content not sanitized</li> <li>No max length validation for user inputs</li> <li> <p>No rate limiting on API endpoints</p> </li> <li> <p>Error Messages:</p> </li> <li>Some error messages may leak internal structure</li> <li> <p>Stack traces might be exposed in responses</p> </li> <li> <p>OWASP Considerations:</p> </li> <li>A01 - Broken Access Control: No authentication on session endpoints</li> <li>A07 - Identification and Authentication Failures: Sessions not tied to authenticated users</li> <li>A09 - Security Logging and Monitoring Failures: Partial - need security event logging</li> </ol>"},{"location":"reference/code-review-archive/2025-09-30-comprehensive-review/#performance-considerations","title":"Performance Considerations","text":""},{"location":"reference/code-review-archive/2025-09-30-comprehensive-review/#identified-bottlenecks","title":"Identified Bottlenecks","text":"<ol> <li>Sequential Workflow: All agents process in sequence (no parallelization)</li> <li>Synchronous Session Manager: Dict lookups could be slow with many sessions</li> <li>No Caching: Workflow events not cached, persona files read each time (intentional for hot-reload)</li> </ol>"},{"location":"reference/code-review-archive/2025-09-30-comprehensive-review/#recommendations","title":"Recommendations","text":"<ol> <li>Consider parallel assessment where appropriate (Credit + Income agents could run concurrently)</li> <li>Add session caching layer (Redis) for production</li> <li>Implement request timeout handling</li> <li>Add performance metrics/tracing</li> </ol>"},{"location":"reference/code-review-archive/2025-09-30-comprehensive-review/#test-infrastructure-recommendations","title":"Test Infrastructure Recommendations","text":""},{"location":"reference/code-review-archive/2025-09-30-comprehensive-review/#1-test-fixtures-to-create","title":"1. Test Fixtures to Create","text":"<pre><code># tests/conftest.py additions\n\n@pytest.fixture\ndef sample_conversation_session():\n    \"\"\"Create a sample ConversationSession for testing.\"\"\"\n    session = ConversationSession()\n    session.collected_data = {\n        \"applicant_name\": \"John Doe\",\n        \"email\": \"john@example.com\",\n        \"loan_amount\": 50000\n    }\n    session.completion_percentage = 40\n    return session\n\n@pytest.fixture\ndef sample_workflow_response():\n    \"\"\"Create a sample WorkflowResponse for testing.\"\"\"\n    return WorkflowResponse(\n        agent_name=\"Test Agent\",\n        message=\"Test message\",\n        phase=\"collecting\",\n        completion_percentage=25,\n        collected_data={},\n        action=\"collect_info\"\n    )\n\n@pytest.fixture\ndef mock_sequential_workflow():\n    \"\"\"Mock SequentialLoanWorkflow for API testing.\"\"\"\n    workflow = Mock(spec=SequentialLoanWorkflow)\n    workflow.process_conversation = AsyncMock()\n    return workflow\n\n@pytest.fixture\nasync def test_client():\n    \"\"\"Create FastAPI test client.\"\"\"\n    from fastapi.testclient import TestClient\n    return TestClient(app)\n</code></pre>"},{"location":"reference/code-review-archive/2025-09-30-comprehensive-review/#2-integration-test-structure","title":"2. Integration Test Structure","text":"<pre><code># tests/integration/test_end_to_end_workflow.py\nclass TestEndToEndWorkflow:\n    \"\"\"Test complete loan application workflow.\"\"\"\n\n    async def test_complete_workflow_new_application():\n        \"\"\"Test full workflow from conversation to decision.\"\"\"\n\n    async def test_workflow_with_incomplete_data():\n        \"\"\"Test workflow handles incomplete applications.\"\"\"\n\n    async def test_workflow_error_recovery():\n        \"\"\"Test workflow recovers from agent failures.\"\"\"\n</code></pre>"},{"location":"reference/code-review-archive/2025-09-30-comprehensive-review/#3-test-utilities","title":"3. Test Utilities","text":"<pre><code># tests/utils/test_helpers.py\ndef create_test_loan_application(**overrides):\n    \"\"\"Helper to create test LoanApplication with defaults.\"\"\"\n\ndef create_test_agent_response(**overrides):\n    \"\"\"Helper to create test AgentResponse with defaults.\"\"\"\n\ndef assert_valid_session_dict(session_dict):\n    \"\"\"Assert session dict has required fields and valid structure.\"\"\"\n</code></pre>"},{"location":"reference/code-review-archive/2025-09-30-comprehensive-review/#prioritized-test-implementation-roadmap","title":"Prioritized Test Implementation Roadmap","text":""},{"location":"reference/code-review-archive/2025-09-30-comprehensive-review/#week-1-critical-api-layer-p1","title":"Week 1: Critical API Layer (P1)","text":"<p>Target: Get to 85% coverage on API layer</p> <ol> <li>Day 1-2: <code>test_app.py</code> - Core API endpoints</li> <li>Health check tests</li> <li>Chat endpoint happy path</li> <li>Session CRUD operations</li> <li> <p>Estimated: 15 tests</p> </li> <li> <p>Day 3-4: <code>test_session_manager.py</code> - Session management</p> </li> <li>ConversationSession lifecycle</li> <li>SessionManager operations</li> <li>Cleanup logic (including bug fix)</li> <li> <p>Estimated: 18 tests</p> </li> <li> <p>Day 5: Error handling and edge cases</p> </li> <li>Exception paths</li> <li>Validation failures</li> <li>Estimated: 8 tests</li> </ol> <p>Deliverable: API layer at 85%+ coverage, production-ready session management</p>"},{"location":"reference/code-review-archive/2025-09-30-comprehensive-review/#week-2-critical-workflow-layer-p1","title":"Week 2: Critical Workflow Layer (P1)","text":"<p>Target: Get to 85% coverage on workflow orchestration</p> <ol> <li>Day 1-2: <code>test_loan_coordinator.py</code> - Coordinator agent</li> <li>Conversation processing</li> <li>Completion calculation</li> <li>Application creation</li> <li> <p>Estimated: 15 tests</p> </li> <li> <p>Day 3-4: <code>test_sequential_workflow.py</code> - Workflow orchestrator</p> </li> <li>Initialization</li> <li>Workflow execution</li> <li>Event transformation</li> <li> <p>Estimated: 12 tests</p> </li> <li> <p>Day 5: Integration tests</p> </li> <li>End-to-end workflow</li> <li>Multi-turn conversations</li> <li>Estimated: 6 tests</li> </ol> <p>Deliverable: Workflow layer at 85%+ coverage, conversation flow verified</p>"},{"location":"reference/code-review-archive/2025-09-30-comprehensive-review/#week-3-configuration-utilities-p2","title":"Week 3: Configuration &amp; Utilities (P2)","text":"<p>Target: Get to 85% coverage on configuration and utilities</p> <ol> <li>Day 1: <code>test_settings.py</code> - MCP server configuration</li> <li>YAML loading</li> <li>Environment overrides</li> <li> <p>Estimated: 8 tests</p> </li> <li> <p>Day 2: <code>test_config_loader.py</code> - Agent configuration</p> </li> <li>Config loading</li> <li>Agent config retrieval</li> <li> <p>Estimated: 10 tests</p> </li> <li> <p>Day 3: <code>test_persona_loader.py</code> - Persona loading</p> </li> <li>File loading</li> <li>Fallback handling</li> <li> <p>Estimated: 8 tests</p> </li> <li> <p>Day 4: <code>test_mcp_transport.py</code> - MCP transport</p> </li> <li>Connection handling</li> <li>Timeout handling</li> <li> <p>Estimated: 6 tests</p> </li> <li> <p>Day 5: Complete observability and model tests</p> </li> <li>Edge cases</li> <li>Missing scenarios</li> <li>Estimated: 10 tests</li> </ol> <p>Deliverable: All utilities at 85%+ coverage</p>"},{"location":"reference/code-review-archive/2025-09-30-comprehensive-review/#success-metrics","title":"Success Metrics","text":""},{"location":"reference/code-review-archive/2025-09-30-comprehensive-review/#coverage-targets-by-module","title":"Coverage Targets by Module","text":"Module Current Target Tests Needed <code>api/app.py</code> 0% 85% ~23 tests <code>api/session_manager.py</code> 0% 85% ~18 tests <code>agents/loan_coordinator.py</code> 0% 85% ~15 tests <code>agents/sequential_workflow.py</code> 0% 85% ~12 tests <code>config/settings.py</code> 0% 80% ~8 tests <code>utils/config_loader.py</code> 34% 85% ~10 tests <code>utils/persona_loader.py</code> 51% 85% ~8 tests <code>utils/mcp_transport.py</code> 0% 75% ~6 tests <code>models/application.py</code> 78% 90% ~5 tests <code>utils/observability.py</code> 83% 90% ~5 tests <p>Total Estimated Tests Needed: ~110 tests</p>"},{"location":"reference/code-review-archive/2025-09-30-comprehensive-review/#recommended-next-steps","title":"Recommended Next Steps","text":""},{"location":"reference/code-review-archive/2025-09-30-comprehensive-review/#immediate-actions-this-sprint","title":"Immediate Actions (This Sprint)","text":"<ol> <li>\u2705 Fix Critical Bug: Session cleanup datetime calculation (line 265 in session_manager.py)</li> <li>\u2705 Create Test Structure: Set up test files for API and session management</li> <li>\u2705 Implement P1 Tests: Focus on API layer and session management</li> <li>\u2705 Run Coverage: Verify coverage increases with each test batch</li> <li>\u2705 Update Documentation: Document test patterns and helpers</li> </ol>"},{"location":"reference/code-review-archive/2025-09-30-comprehensive-review/#short-term-actions-next-sprint","title":"Short-Term Actions (Next Sprint)","text":"<ol> <li>Complete P1 tests for workflow orchestration</li> <li>Add integration tests for end-to-end scenarios</li> <li>Implement P2 tests for configuration and utilities</li> <li>Address security concerns (authentication, rate limiting)</li> <li>Add request tracing and correlation IDs</li> </ol>"},{"location":"reference/code-review-archive/2025-09-30-comprehensive-review/#long-term-actions-next-quarter","title":"Long-Term Actions (Next Quarter)","text":"<ol> <li>Replace in-memory session storage with Redis</li> <li>Implement comprehensive security audit</li> <li>Add performance benchmarks</li> <li>Create load testing suite</li> <li>Implement monitoring and alerting</li> </ol>"},{"location":"reference/code-review-archive/2025-09-30-comprehensive-review/#conclusion","title":"Conclusion","text":"<p>The loan-avengers codebase shows excellent architectural decisions and strong code quality, but critical testing gaps prevent production deployment. The 47% overall coverage masks 0% coverage in production-critical areas:</p> <ul> <li>API endpoints (user-facing)</li> <li>Session management (state persistence)</li> <li>Workflow orchestration (business logic)</li> <li>Coordinator agent (data collection)</li> </ul> <p>Top 3 Priorities: 1. \u26d4 Fix session cleanup bug (line 265) - could cause memory leaks 2. \u26d4 Test API layer - no user-facing functionality is verified 3. \u26d4 Test session management - state corruption risk</p> <p>With focused effort following the 3-week roadmap above, the codebase can reach 85% coverage on all core modules and be production-ready.</p> <p>Report Generated: 2025-09-30 Reviewer: Code Review Agent Review Type: Comprehensive Code Path Coverage Analysis Next Review: After P1 tests implemented</p>"},{"location":"reference/code-review-archive/2025-09-30-documentation-and-agent-naming-review/","title":"Code Review Report: Documentation and Agent Naming Consistency","text":"<p>Date: 2025-09-30 Reviewer: Code Review Agent Branch: feat/ui-integration-riley-agent Ready for Production: Yes</p>"},{"location":"reference/code-review-archive/2025-09-30-documentation-and-agent-naming-review/#executive-summary","title":"Executive Summary","text":"<p>Overall Grade: A-</p> <p>This code review covers recent changes to align agent naming across the codebase, update documentation with new Capabilities section, add AI transparency to agent personas, and fix configuration files. The changes demonstrate strong attention to detail, consistent naming conventions, and proper AI transparency disclaimers across all agent personas.</p>"},{"location":"reference/code-review-archive/2025-09-30-documentation-and-agent-naming-review/#priority-1-must-fix-none","title":"Priority 1 (Must Fix) - NONE","text":"<p>No critical issues found. The code is ready for production.</p>"},{"location":"reference/code-review-archive/2025-09-30-documentation-and-agent-naming-review/#priority-2-should-fix","title":"Priority 2 (Should Fix)","text":""},{"location":"reference/code-review-archive/2025-09-30-documentation-and-agent-naming-review/#1-missing-ai-transparency-in-coordinator-persona","title":"1. Missing AI Transparency in Coordinator Persona","text":"<p>Location: <code>/workspaces/loan-avengers/loan_avengers/agents/agent-persona/coordinator-persona.md</code></p> <p>Issue: The coordinator-persona.md file includes AI transparency in the guidelines (line 124) but lacks a dedicated AI Transparency section in the header like other agent personas have.</p> <p>Current State: <pre><code>## Critical Guidelines:\n- **Always respond in valid JSON format**\n- **Be transparent** - you are Cap-ital America, an AI assistant helping with loan applications\n</code></pre></p> <p>Recommended Fix: Add a dedicated AI Transparency section after the \"Personality &amp; Communication Style\" section:</p> <pre><code>## AI Transparency\nYou are an AI assistant designed to help with loan application coordination. You clearly identify yourself as Cap-ital America, an AI loan coordinator, and never deceive users about your nature. While you provide guidance and collect information, human loan officers make all final lending decisions.\n</code></pre> <p>Rationale: Consistency with all other agent persona files which have dedicated AI Transparency sections.</p>"},{"location":"reference/code-review-archive/2025-09-30-documentation-and-agent-naming-review/#2-claudemd-still-references-old-directory-structure","title":"2. CLAUDE.md Still References Old Directory Structure","text":"<p>Location: <code>/workspaces/loan-avengers/CLAUDE.md:848</code></p> <p>Issue: Quick Reference section references outdated directory <code>loan_processing/</code> instead of current <code>loan_avengers/</code>.</p> <p>Current Code (lines 847-852): <pre><code>### Key Files\n- Agent Personas: `loan_processing/agents/agent-persona/*.md`\n- Data Models: `loan_processing/models/*.py`\n- Agent Configuration: `loan_processing/config/agents.yaml`\n- MCP Servers: `loan_processing/tools/mcp_servers/*/server.py`\n- Business Utils: `loan_processing/utils/*.py`\n</code></pre></p> <p>Recommended Fix: <pre><code>### Key Files\n- Agent Personas: `loan_avengers/agents/agent-persona/*.md`\n- Data Models: `loan_avengers/models/*.py`\n- Agent Configuration: `loan_avengers/config/agents.yaml`\n- MCP Servers: `loan_avengers/tools/mcp_servers/*/server.py`\n- Business Utils: `loan_avengers/utils/*.py`\n</code></pre></p>"},{"location":"reference/code-review-archive/2025-09-30-documentation-and-agent-naming-review/#3-common-commands-reference-old-directory","title":"3. Common Commands Reference Old Directory","text":"<p>Location: <code>/workspaces/loan-avengers/CLAUDE.md:861-864</code></p> <p>Issue: MCP server commands reference old <code>loan_processing</code> directory instead of <code>loan_avengers</code>.</p> <p>Current Code: <pre><code># Run MCP servers\nuv run python -m loan_processing.tools.mcp_servers.application_verification.server\nuv run python -m loan_processing.tools.mcp_servers.document_processing.server\nuv run python -m loan_processing.tools.mcp_servers.financial_calculations.server\n</code></pre></p> <p>Recommended Fix: <pre><code># Run MCP servers\nuv run python -m loan_avengers.tools.mcp_servers.application_verification.server\nuv run python -m loan_avengers.tools.mcp_servers.document_processing.server\nuv run python -m loan_avengers.tools.mcp_servers.financial_calculations.server\n</code></pre></p>"},{"location":"reference/code-review-archive/2025-09-30-documentation-and-agent-naming-review/#4-test-commands-reference-old-directory","title":"4. Test Commands Reference Old Directory","text":"<p>Location: <code>/workspaces/loan-avengers/CLAUDE.md:867-869</code></p> <p>Issue: Test coverage commands reference old <code>loan_processing</code> directory.</p> <p>Current Code: <pre><code>uv run pytest tests/ -v --cov=loan_processing --cov-report=term-missing\n# ...\nuv run pytest tests/ --cov=loan_processing\n</code></pre></p> <p>Recommended Fix: <pre><code>uv run pytest tests/ -v --cov=loan_avengers --cov-report=term-missing\n# ...\nuv run pytest tests/ --cov=loan_avengers\n</code></pre></p>"},{"location":"reference/code-review-archive/2025-09-30-documentation-and-agent-naming-review/#priority-3-minor-improvements","title":"Priority 3 (Minor Improvements)","text":""},{"location":"reference/code-review-archive/2025-09-30-documentation-and-agent-naming-review/#1-inconsistent-agent-persona-headers","title":"1. Inconsistent Agent Persona Headers","text":"<p>Observation: Agent persona files have slightly different header styles: - Some use \"Your Personality &amp; Role\" (Intake, Credit) - Some use \"Role &amp; Responsibilities\" (Income, Risk, Orchestrator) - Coordinator uses \"Core Identity\"</p> <p>Recommendation: Standardize to one header pattern across all personas for consistency. Suggest using \"Role &amp; Responsibilities\" since it's used by the technical agents, or create a consistent pattern that includes both personality and role sections.</p> <p>Impact: Low - purely aesthetic, doesn't affect functionality.</p>"},{"location":"reference/code-review-archive/2025-09-30-documentation-and-agent-naming-review/#2-directory-structure-in-claudemd","title":"2. Directory Structure in CLAUDE.md","text":"<p>Location: <code>/workspaces/loan-avengers/CLAUDE.md:131-153</code></p> <p>Observation: The Repository Architecture section shows <code>loan_processing/</code> as the directory structure.</p> <p>Recommended Fix: Update the entire directory tree diagram to reflect <code>loan_avengers/</code> as the root directory.</p> <p>Current: <pre><code>loan_processing/\n\u251c\u2500\u2500 models/\n</code></pre></p> <p>Should be: <pre><code>loan_avengers/\n\u251c\u2500\u2500 models/\n</code></pre></p>"},{"location":"reference/code-review-archive/2025-09-30-documentation-and-agent-naming-review/#strengths","title":"Strengths","text":""},{"location":"reference/code-review-archive/2025-09-30-documentation-and-agent-naming-review/#1-excellent-ai-transparency-implementation","title":"1. Excellent AI Transparency Implementation","text":"<p>All agent persona files (except coordinator which needs minor update) include clear, upfront AI transparency statements: - Intake Agent: \"I'm an AI system designed to validate loan applications. While I check for completeness and accuracy, human loan officers review all final decisions.\" - Income Agent: \"You are an AI system designed to assist with income verification. While you apply industry-standard methodologies, your assessments should be reviewed by qualified human loan officers...\" - Credit Agent: \"I'm an AI assistant designed to analyze credit profiles. While I apply industry-standard credit assessment methodologies, human loan officers make all final lending decisions.\" - Risk Agent: \"You are an AI system designed to assist with risk evaluation. Your risk assessments and recommendations are advisory only...\" - Orchestrator: \"You are an AI system designed to coordinate workflow processes. You manage automated processing sequences, but all final decisions...must be validated by qualified human supervisors.\"</p> <p>This demonstrates excellent ethical AI practices and regulatory compliance awareness.</p>"},{"location":"reference/code-review-archive/2025-09-30-documentation-and-agent-naming-review/#2-consistent-naming-convention","title":"2. Consistent Naming Convention","text":"<p>The transition to Avengers-themed names is complete and consistent: - Cap-ital America (Loan Coordinator) - Hawk-Income (Income Specialist) - Scarlet Witch-Credit (Credit Analyst) - Doctor Strange-Risk (Risk Assessor) - Intake Agent (behind-the-scenes validator)</p> <p>All old names (Riley, Sarah, Marcus, Alex, John) have been successfully removed from visible documentation.</p>"},{"location":"reference/code-review-archive/2025-09-30-documentation-and-agent-naming-review/#3-well-structured-documentation","title":"3. Well-Structured Documentation","text":"<p>The README.md and technical-specification.md files are excellent: - Clear section hierarchy - Visual workflow examples - Performance targets - Technology stack explanations - Links to architecture diagrams - Proper experimental application disclaimers</p>"},{"location":"reference/code-review-archive/2025-09-30-documentation-and-agent-naming-review/#4-comprehensive-capabilities-section","title":"4. Comprehensive Capabilities Section","text":"<p>The new Capabilities section in README.md (lines 57-106) effectively highlights: - Agent Framework Workflow - Agent-to-MCP Tools Integration - Secure Azure Deployment - Agents Built by Agents workflow - Multi-Agent Workflow System - Microsoft Agent Framework specific capabilities</p> <p>This provides clear value proposition and technical depth.</p>"},{"location":"reference/code-review-archive/2025-09-30-documentation-and-agent-naming-review/#5-excellent-gitignore-configuration","title":"5. Excellent .gitignore Configuration","text":"<p>The .gitignore file uses generic patterns that will work regardless of where frontend files are located: - <code>node_modules/</code> - catches at any level - <code>dist/</code>, <code>build/</code>, <code>.vite/</code> - generic build artifact patterns - Lock file patterns that work anywhere - Proper exclusion of sensitive data - Good balance between ignoring build artifacts and tracking source code</p>"},{"location":"reference/code-review-archive/2025-09-30-documentation-and-agent-naming-review/#6-architecture-links-verified","title":"6. Architecture Links Verified","text":"<p>Both architecture diagram files exist and are properly referenced: - <code>docs/diagrams/system-architecture-diagram.md</code> - Exists - <code>docs/diagrams/azure-deployment-architecture.md</code> - Exists</p> <p>Links in README.md and technical-specification.md point to the correct locations.</p>"},{"location":"reference/code-review-archive/2025-09-30-documentation-and-agent-naming-review/#issues-not-found-good-work","title":"Issues NOT Found (Good Work)","text":"<ol> <li>No hardcoded old agent names in code</li> <li>No missing AI transparency (except minor coordinator update needed)</li> <li>No broken architecture diagram links</li> <li>No security issues or credentials exposed</li> <li>No inconsistent naming between files</li> <li>No missing experimental application disclaimers</li> <li>.gitignore properly configured for multi-location frontend</li> </ol>"},{"location":"reference/code-review-archive/2025-09-30-documentation-and-agent-naming-review/#recommendations-for-future-improvements","title":"Recommendations for Future Improvements","text":""},{"location":"reference/code-review-archive/2025-09-30-documentation-and-agent-naming-review/#1-consider-sync-coordinator-run","title":"1. Consider Sync Coordinator Run","text":"<p>Since CLAUDE.md was modified (or will be after fixing directory references), consider running the sync-coordinator agent to ensure consistency across: - <code>.github/instructions/copilot-instructions.md</code> - <code>.cursor/rules/*.mdc</code> - <code>.github/chatmodes/*.chatmode.md</code></p> <p>This ensures all IDE configurations have the updated directory references.</p>"},{"location":"reference/code-review-archive/2025-09-30-documentation-and-agent-naming-review/#2-add-agent-persona-style-guide","title":"2. Add Agent Persona Style Guide","text":"<p>Consider creating a style guide document for agent personas to maintain consistency: - Header structure standards - AI transparency placement and wording - Personality tone guidelines - Response format expectations - Tool usage documentation patterns</p>"},{"location":"reference/code-review-archive/2025-09-30-documentation-and-agent-naming-review/#3-architecture-documentation-cross-check","title":"3. Architecture Documentation Cross-Check","text":"<p>When time permits, verify that the architecture diagrams themselves use the new agent names and reflect the current <code>loan_avengers/</code> directory structure.</p>"},{"location":"reference/code-review-archive/2025-09-30-documentation-and-agent-naming-review/#testing-recommendations","title":"Testing Recommendations","text":""},{"location":"reference/code-review-archive/2025-09-30-documentation-and-agent-naming-review/#pre-commit-checklist","title":"Pre-Commit Checklist","text":"<p>Before committing these documentation changes:</p> <ol> <li>Run linting: <code>uv run ruff check . --fix</code></li> <li>Run formatting: <code>uv run ruff format .</code></li> <li>Verify all links in markdown files are valid</li> <li>Check for any remaining <code>loan_processing</code> references: <code>grep -r \"loan_processing\" docs/ CLAUDE.md README.md</code></li> <li>Consider running sync-coordinator if CLAUDE.md is updated</li> </ol>"},{"location":"reference/code-review-archive/2025-09-30-documentation-and-agent-naming-review/#approval-status","title":"Approval Status","text":"<p>Ready to Commit: Yes (after applying Priority 2 fixes)</p> <p>The documentation changes successfully achieve the stated goals: 1. Remove old agent names and use Avengers theme consistently 2. Add AI transparency to all agent personas 3. Update README.md with Capabilities section 4. Fix .gitignore for proper frontend artifact exclusion 5. Maintain proper architecture diagram references</p> <p>The Priority 2 issues are minor consistency fixes that will improve long-term maintainability but don't block the current changes from being committed.</p>"},{"location":"reference/code-review-archive/2025-09-30-documentation-and-agent-naming-review/#summary-metrics","title":"Summary Metrics","text":"<ul> <li>Files Reviewed: 10</li> <li>Critical Issues: 0</li> <li>Major Issues: 4 (all minor directory reference updates)</li> <li>Minor Issues: 2 (style consistency)</li> <li>Strengths Identified: 6</li> <li>Overall Code Quality: Excellent</li> <li>Documentation Quality: Excellent</li> <li>Consistency: Very Good (will be Excellent after directory updates)</li> </ul>"},{"location":"reference/code-review-archive/2025-09-30-documentation-and-agent-naming-review/#recommended-commit-message","title":"Recommended Commit Message","text":"<pre><code>docs: align agent naming with Avengers theme and add AI transparency\n\n- Update all agent personas with Avengers-themed names (Cap-ital America, Hawk-Income, Scarlet Witch-Credit, Doctor Strange-Risk)\n- Add AI transparency disclaimers to all agent personas\n- Add Capabilities section to README highlighting Microsoft Agent Framework features\n- Update technical-specification.md with latest agent names and architecture links\n- Fix .gitignore to use generic patterns for node_modules and build artifacts\n- Verify architecture diagram links are valid\n\nRelated to ongoing UI integration work on branch feat/ui-integration-riley-agent\n</code></pre> <p>This review follows enterprise code review best practices with focus on security, consistency, maintainability, and production readiness.</p>"},{"location":"reference/code-review-archive/2025-09-30-post-refactor-review/","title":"Code Review Report: Post-Refactoring Agent Architecture","text":"<p>Date: 2025-09-30 Reviewer: Code Review Agent Branch: feat/ui-integration-riley-agent Context: Major refactoring to separate agent intelligence from orchestration code</p>"},{"location":"reference/code-review-archive/2025-09-30-post-refactor-review/#executive-summary","title":"Executive Summary","text":"<p>Ready for Production: \u26a0\ufe0f NO - Minor issues must be addressed Critical Issues: 0 Important Issues: 7 (logging patterns) Nice-to-Have: 4 (line length, TODOs, debug usage)</p> <p>Overall Assessment: The refactored architecture is excellent and demonstrates strong separation of concerns. The code is well-structured, type-safe, and follows best practices. However, there are consistent logging pattern violations that need correction before production deployment.</p> <p>Key Strengths: - \u2705 Clean separation: Agent intelligence vs orchestration code - \u2705 Excellent type safety with Pydantic models - \u2705 Proper async patterns throughout - \u2705 Strong error handling and observability - \u2705 165/168 tests passing (98% success rate) - \u2705 Well-documented code with clear docstrings</p> <p>Issues to Address: - \ud83d\udd27 Logging f-strings need conversion to lazy % formatting - \ud83d\udd27 Debug-level information logged as info level - \ud83d\udd27 2 line-length violations (E501) - \ud83d\udd27 4 TODO comments indicating incomplete personas</p>"},{"location":"reference/code-review-archive/2025-09-30-post-refactor-review/#priority-1-issues-must-fix-before-production","title":"Priority 1 Issues (Must Fix Before Production) \u26d4","text":""},{"location":"reference/code-review-archive/2025-09-30-post-refactor-review/#none-found","title":"None Found","text":"<p>All critical security, reliability, and architectural issues have been properly addressed in the refactoring.</p>"},{"location":"reference/code-review-archive/2025-09-30-post-refactor-review/#priority-2-issues-should-fix-in-next-iteration","title":"Priority 2 Issues (Should Fix in Next Iteration) \ud83d\udd36","text":""},{"location":"reference/code-review-archive/2025-09-30-post-refactor-review/#1-logging-f-string-usage-important","title":"1. Logging F-String Usage (Important)","text":"<p>Issue: Using f-strings in logger calls causes immediate string formatting, even when log level is disabled. This wastes CPU cycles and violates Python logging best practices.</p> <p>Impact: Performance degradation, unnecessary string operations</p> <p>Affected Files: 12 files, 30+ occurrences</p>"},{"location":"reference/code-review-archive/2025-09-30-post-refactor-review/#files-with-f-string-logging","title":"Files with F-String Logging:","text":"<p><code>loan_avengers/agents/conversation_orchestrator.py</code> (Lines 170, 180-181, 195-196): <pre><code># \u274c CURRENT (Eager evaluation)\nlogger.info(f\"RAW AGENT RESPONSE: {agent_response_json[:300]}\")\nlogger.info(f\"EXTRACTED MESSAGE: {message[:200]}\")\nlogger.info(f\"ACTION: {action}, COMPLETION: {completion_pct}\")\nlogger.info(f\"JSON DECODE ERROR: {str(e)}\")\nlogger.info(f\"PLAIN TEXT RESPONSE: {agent_response_json[:200]}\")\n\n# \u2705 RECOMMENDED (Lazy evaluation)\nlogger.info(\"RAW AGENT RESPONSE: %s\", agent_response_json[:300])\nlogger.info(\"EXTRACTED MESSAGE: %s\", message[:200])\nlogger.info(\"ACTION: %s, COMPLETION: %s\", action, completion_pct)\nlogger.info(\"JSON DECODE ERROR: %s\", str(e))\nlogger.info(\"PLAIN TEXT RESPONSE: %s\", agent_response_json[:200])\n</code></pre></p> <p><code>loan_avengers/api/app.py</code> (Line 129): <pre><code># \u274c CURRENT\nlogger.info(f\"Processing: {processing_update.phase} - {processing_update.message[:100]}\")\n\n# \u2705 RECOMMENDED\nlogger.info(\n    \"Processing update received\",\n    extra={\n        \"phase\": processing_update.phase,\n        \"message_preview\": processing_update.message[:100]\n    }\n)\n</code></pre></p> <p><code>loan_avengers/tools/mcp_servers/application_verification/service.py</code> (Lines 39, 71): <pre><code># \u274c CURRENT\nlogger.info(f\"Retrieving credit report for {full_name} (ID: {applicant_id[:8]}***) at address: {address}\")\nlogger.info(f\"Verifying employment for {position} at {employer_name} (ID: {applicant_id[:8]}***)\")\n\n# \u2705 RECOMMENDED\nlogger.info(\n    \"Retrieving credit report\",\n    extra={\n        \"full_name\": full_name,\n        \"applicant_id_masked\": applicant_id[:8] + \"***\",\n        \"address\": address\n    }\n)\nlogger.info(\n    \"Verifying employment\",\n    extra={\n        \"position\": position,\n        \"employer_name\": employer_name,\n        \"applicant_id_masked\": applicant_id[:8] + \"***\"\n    }\n)\n</code></pre></p> <p><code>loan_avengers/tools/mcp_servers/document_processing/service.py</code> (Lines 52, 56, 65, 70, 73): <pre><code># \u274c CURRENT\nlogger.info(f\"Document processing service initialized - MCP client: {mcp_client is not None}\")\nlogger.info(f\"Starting document text extraction for: {document_path} (type: {document_type})\")\nlogger.info(f\"Document text extraction completed successfully for: {document_path}\")\nlogger.error(f\"Document text extraction failed with {type(e).__name__}: {str(e)}\")\n\n# \u2705 RECOMMENDED\nlogger.info(\"Document processing service initialized\", extra={\"has_mcp_client\": mcp_client is not None})\nlogger.info(\"Starting document text extraction\", extra={\"document_path\": document_path, \"document_type\": document_type})\nlogger.info(\"Document text extraction completed\", extra={\"document_path\": document_path})\nlogger.error(\"Document text extraction failed\", extra={\"error_type\": type(e).__name__, \"error\": str(e)}, exc_info=True)\n</code></pre></p> <p><code>loan_avengers/tools/mcp_servers/document_processing/server.py</code> (Lines 56, 72, 150): <pre><code># \u274c CURRENT\nlogger.info(f\"Starting OCR text extraction for document: {document_path} (type: {document_type})\")\nlogger.info(f\"Document classification request - content length: {len(document_content)}\")\nlogger.info(f\"Starting Document Processing MCP Server with {get_transport_info(transport, 8011)}\")\n\n# \u2705 RECOMMENDED\nlogger.info(\"Starting OCR text extraction\", extra={\"document_path\": document_path, \"document_type\": document_type})\nlogger.info(\"Document classification request\", extra={\"content_length\": len(document_content)})\nlogger.info(\"Starting Document Processing MCP Server\", extra={\"transport_info\": get_transport_info(transport, 8011)})\n</code></pre></p> <p><code>loan_avengers/tools/mcp_servers/financial_calculations/service.py</code> (Lines 47, 66, 118): <pre><code># \u274c CURRENT\nlogger.error(f\"Invalid monthly income for DTI calculation: {monthly_income}\")\nlogger.info(f\"DTI calculation completed - qualification: {qualification}, risk: {risk_level}\")\nlogger.info(f\"Loan affordability calculated - DTI: {round(new_dti, 2)}%, payment: ${round(monthly_payment, 2)}\")\n\n# \u2705 RECOMMENDED\nlogger.error(\"Invalid monthly income for DTI calculation\", extra={\"monthly_income\": monthly_income})\nlogger.info(\"DTI calculation completed\", extra={\"qualification\": qualification, \"risk_level\": risk_level})\nlogger.info(\n    \"Loan affordability calculated\",\n    extra={\n        \"dti_percentage\": round(new_dti, 2),\n        \"monthly_payment\": round(monthly_payment, 2)\n    }\n)\n</code></pre></p> <p><code>loan_avengers/tools/mcp_servers/financial_calculations/server.py</code> (Lines 148, 176): <pre><code># \u274c CURRENT\nlogger.info(f\"Calculating total debt service ratio - Income: ${monthly_income}, Debt: ${total_monthly_debt}\")\nlogger.info(f\"Starting Financial Calculations MCP Server with {get_transport_info(transport, 8012)}\")\n\n# \u2705 RECOMMENDED\nlogger.info(\"Calculating total debt service ratio\", extra={\"monthly_income\": monthly_income, \"total_monthly_debt\": total_monthly_debt})\nlogger.info(\"Starting Financial Calculations MCP Server\", extra={\"transport_info\": get_transport_info(transport, 8012)})\n</code></pre></p> <p><code>loan_avengers/tools/mcp_servers/application_verification/server.py</code> (Lines 41, 49, 57, 65, 73, 125): <pre><code># \u274c CURRENT\nlogger.info(f\"Credit report request for applicant: {applicant_id[:8]}***\")\nlogger.info(f\"Employment verification request received for {employer_name} position: {position}\")\nlogger.info(f\"Bank account data request received for account ending in {account_number[-4:]}\")\nlogger.info(f\"Tax transcript data request received for tax year {tax_year}\")\nlogger.info(f\"Asset verification request received for {asset_type} asset type\")\nlogger.info(f\"Starting Application Verification MCP Server with {get_transport_info(transport, 8010)}\")\n\n# \u2705 RECOMMENDED\nlogger.info(\"Credit report request\", extra={\"applicant_id_masked\": applicant_id[:8] + \"***\"})\nlogger.info(\"Employment verification request\", extra={\"employer_name\": employer_name, \"position\": position})\nlogger.info(\"Bank account data request\", extra={\"account_suffix\": account_number[-4:]})\nlogger.info(\"Tax transcript data request\", extra={\"tax_year\": tax_year})\nlogger.info(\"Asset verification request\", extra={\"asset_type\": asset_type})\nlogger.info(\"Starting Application Verification MCP Server\", extra={\"transport_info\": get_transport_info(transport, 8010)})\n</code></pre></p> <p><code>loan_avengers/tools/mcp_servers/application_verification/service.py</code> (Lines 308, 325): <pre><code># \u274c CURRENT\nlogger.error(f\"Failed to parse application data: {e}\")\nlogger.error(f\"Unexpected error during validation: {e}\")\n\n# \u2705 RECOMMENDED\nlogger.error(\"Failed to parse application data\", extra={\"error\": str(e)}, exc_info=True)\nlogger.error(\"Unexpected error during validation\", extra={\"error\": str(e)}, exc_info=True)\n</code></pre></p> <p>Recommendation Priority: HIGH Estimated Effort: 2-3 hours (systematic find-replace with validation) Automated Fix Available: Partially (can use regex to identify, manual review needed)</p>"},{"location":"reference/code-review-archive/2025-09-30-post-refactor-review/#2-debug-level-information-logged-as-info-important","title":"2. Debug-Level Information Logged as Info (Important)","text":"<p>Issue: Detailed parsing information that's useful for debugging is being logged at INFO level, cluttering production logs.</p> <p>Location: <code>loan_avengers/agents/conversation_orchestrator.py</code> (Lines 170, 180-181, 195-196)</p> <pre><code># \u274c CURRENT (Debug info at INFO level)\nlogger.info(f\"RAW AGENT RESPONSE: {agent_response_json[:300]}\")\nlogger.info(f\"EXTRACTED MESSAGE: {message[:200]}\")\nlogger.info(f\"ACTION: {action}, COMPLETION: {completion_pct}\")\nlogger.info(f\"JSON DECODE ERROR: {str(e)}\")\nlogger.info(f\"PLAIN TEXT RESPONSE: {agent_response_json[:200]}\")\n\n# \u2705 RECOMMENDED (Use DEBUG level for detailed parsing info)\nlogger.debug(\"Raw agent response\", extra={\"response_preview\": agent_response_json[:300]})\nlogger.debug(\"Extracted message\", extra={\"message_preview\": message[:200]})\nlogger.info(\"Agent response parsed\", extra={\"action\": action, \"completion\": completion_pct})\nlogger.warning(\"JSON decode error, treating as plain text\", extra={\"error\": str(e)})\nlogger.debug(\"Plain text response\", extra={\"response_preview\": agent_response_json[:200]})\n</code></pre> <p>Rationale: - Production logs should show what happened (INFO) - Debug logs show how it happened (DEBUG) - Raw response content is debugging information - JSON parsing errors are warnings (fallback behavior triggered)</p> <p>Recommendation Priority: MEDIUM Estimated Effort: 30 minutes</p>"},{"location":"reference/code-review-archive/2025-09-30-post-refactor-review/#3-line-length-violations-minor","title":"3. Line Length Violations (Minor)","text":"<p>Issue: 2 lines exceed the 120-character limit defined in ruff configuration.</p> <p>Locations:</p> <p><code>loan_avengers/models/responses.py</code> (Line 215): <pre><code># Current: 123 characters\n        message: str = \"I'm having trouble processing that. Could you tell me more about your loan application?\"\n\n# Fix: Split the default message\n        message: str = (\n            \"I'm having trouble processing that. \"\n            \"Could you tell me more about your loan application?\"\n        )\n</code></pre></p> <p><code>loan_avengers/utils/observability.py</code> (Line 82): <pre><code># Current: 121 characters\n            # See test_logger_requirements.py - get_logger('test') raises \"Logger name must start with 'agent_framework'\"\n\n# Fix: Reword comment\n            # See test_logger_requirements.py - get_logger requires 'agent_framework' prefix\n</code></pre></p> <p>Recommendation Priority: LOW Estimated Effort: 5 minutes Automated Fix: <code>uv run ruff format .</code> (will auto-wrap)</p>"},{"location":"reference/code-review-archive/2025-09-30-post-refactor-review/#4-incomplete-agent-personas-important","title":"4. Incomplete Agent Personas (Important)","text":"<p>Issue: 3 processing agents (Credit, Income, Risk) are using hardcoded instructions instead of loading from persona files.</p> <p>Location: <code>loan_avengers/agents/loan_processing_pipeline.py</code> (Lines 93, 117, 141)</p> <pre><code># \u274c CURRENT (Hardcoded instructions)\ndef _create_credit_agent(self) -&gt; ChatAgent:\n    # TODO: Load credit persona when created\n    credit_instructions = \"\"\"\n    You are a Credit Assessment Specialist. Analyze the applicant's creditworthiness...\n    \"\"\"\n\n# \u2705 RECOMMENDED (Load from persona file)\ndef _create_credit_agent(self) -&gt; ChatAgent:\n    \"\"\"Create credit assessment agent.\"\"\"\n    persona = PersonaLoader.load_persona(\"credit\")\n\n    return ChatAgent(\n        chat_client=self.chat_client,\n        instructions=persona,\n        name=\"Credit_Assessor\",\n        description=\"Credit risk analysis specialist\",\n        temperature=0.2,\n        max_tokens=600,\n    )\n</code></pre> <p>Missing Persona Files: 1. <code>loan_avengers/agents/agent-persona/credit-agent-persona.md</code> 2. <code>loan_avengers/agents/agent-persona/income-agent-persona.md</code> 3. <code>loan_avengers/agents/agent-persona/risk-agent-persona.md</code></p> <p>Impact: - Violates architecture principle: \"Agent-as-Tool\" pattern - Agent behavior not easily modifiable without code changes - Inconsistent with coordinator and intake agents</p> <p>Recommendation Priority: HIGH Estimated Effort: 4-6 hours (create 3 persona files based on existing intake/coordinator patterns)</p>"},{"location":"reference/code-review-archive/2025-09-30-post-refactor-review/#5-result-parsing-not-implemented-important","title":"5. Result Parsing Not Implemented (Important)","text":"<p>Issue: Workflow result parsing is incomplete, returning generic placeholder update.</p> <p>Location: <code>loan_avengers/agents/loan_processing_pipeline.py</code> (Line 231)</p> <pre><code># \u274c CURRENT (TODO placeholder)\n# TODO: Implement proper result parsing based on workflow output structure\nyield ProcessingUpdate(\n    agent_name=\"System\",\n    message=\"Full workflow processing completed with all 4 agents\",\n    phase=\"completed\",\n    completion_percentage=100,\n    status=\"completed\",\n    assessment_data={\"application_id\": application.application_id},\n    metadata={\"workflow_result\": str(result)[:200]},\n)\n\n# \u2705 RECOMMENDED (Parse actual workflow result)\nfinal_assessment = self._parse_workflow_result(result)\n\nyield FinalDecisionResponse(\n    agent_name=\"Risk_Analyzer\",\n    message=final_assessment.recommendation_summary,\n    decision=final_assessment.decision,  # APPROVED | REJECTED | NEEDS_MORE_INFO\n    confidence_score=final_assessment.confidence,\n    assessment_data={\n        \"application_id\": application.application_id,\n        \"credit_score\": final_assessment.credit_score,\n        \"dti_ratio\": final_assessment.dti_ratio,\n        \"risk_level\": final_assessment.risk_level,\n    },\n    metadata={\"workflow_id\": result.workflow_id},\n)\n</code></pre> <p>Impact: - API returns incomplete processing information - Frontend cannot display actual loan decision - Breaks end-to-end workflow from conversation \u2192 decision</p> <p>Recommendation Priority: HIGH Estimated Effort: 3-4 hours (implement result parser, update response model)</p>"},{"location":"reference/code-review-archive/2025-09-30-post-refactor-review/#priority-3-issues-nice-to-have-improvements","title":"Priority 3 Issues (Nice-to-Have Improvements) \ud83d\udca1","text":""},{"location":"reference/code-review-archive/2025-09-30-post-refactor-review/#1-logger-initialization-comments-documentation","title":"1. Logger Initialization Comments (Documentation)","text":"<p>Location: <code>loan_avengers/utils/observability.py</code> (Lines 81-84)</p> <p>Current: <pre><code># Agent Framework REQUIRES 'agent_framework' prefix (unit test verified)\n# See test_logger_requirements.py - get_logger('test') raises \"Logger name must start with 'agent_framework'\"\n# PR reviewer suggestion to remove prefix is INCORRECT\nframework_logger_name = f\"agent_framework.{name}\"\n</code></pre></p> <p>Recommendation: This defensive comment is excellent context! Consider moving to module-level docstring for better discoverability:</p> <pre><code>\"\"\"\nCentralized observability configuration for loan processing agents.\n\nIMPORTANT: Agent Framework Logging Requirements\n-----------------------------------------------\nThe agent_framework.get_logger() function REQUIRES logger names to start\nwith 'agent_framework' prefix. This is enforced by the framework and\nverified in tests/unit/utils/test_logger_requirements.py.\n\nAttempting to use get_logger('test') will raise:\n  \"Logger name must start with 'agent_framework'\"\n\nTherefore, we always prefix logger names: agent_framework.{name}\n\"\"\"\n</code></pre>"},{"location":"reference/code-review-archive/2025-09-30-post-refactor-review/#2-error-handling-in-agent-response-parsing-robustness","title":"2. Error Handling in Agent Response Parsing (Robustness)","text":"<p>Location: <code>loan_avengers/agents/conversation_orchestrator.py</code> (Lines 193-206)</p> <p>Current: Falls back to plain text on JSON decode error (good!)</p> <p>Recommendation: Add metrics/monitoring for JSON parsing failures:</p> <pre><code>except json.JSONDecodeError as e:\n    # Track parsing failures for monitoring\n    Observability.increment_counter(\"agent_response_json_parse_failures\")\n\n    logger.warning(\n        \"Agent response not valid JSON, treating as plain text\",\n        extra={\n            \"error\": str(e),\n            \"response_preview\": agent_response_json[:100]\n        }\n    )\n</code></pre> <p>This helps identify when agent is not following JSON format instructions.</p>"},{"location":"reference/code-review-archive/2025-09-30-post-refactor-review/#3-session-id-validation-security","title":"3. Session ID Validation (Security)","text":"<p>Location: <code>loan_avengers/api/session_manager.py</code> (Lines 44-53)</p> <p>Current: UUID validation is excellent! \u2705</p> <p>Minor Enhancement: Consider extracting validation to utility:</p> <pre><code># loan_avengers/utils/validation.py\ndef validate_uuid(value: str, field_name: str = \"UUID\") -&gt; None:\n    \"\"\"Validate string is proper UUID format.\"\"\"\n    try:\n        uuid.UUID(value)\n    except ValueError as e:\n        logger.error(\n            \"Invalid UUID format\",\n            extra={\"field\": field_name, \"value\": value, \"error\": str(e)}\n        )\n        raise ValueError(f\"Invalid {field_name} format: must be valid UUID\") from e\n\n# Usage in session_manager.py\nfrom loan_avengers.utils.validation import validate_uuid\n\nif session_id is not None:\n    validate_uuid(session_id, \"session_id\")\n</code></pre> <p>Benefit: Reusable validation, consistent error messages</p>"},{"location":"reference/code-review-archive/2025-09-30-post-refactor-review/#4-unused-debug-logger-check-optimization","title":"4. Unused Debug Logger Check (Optimization)","text":"<p>Files Using logger.debug: - <code>loan_avengers/api/session_manager.py</code> (Lines 83-89, 105-112, 216) - <code>loan_avengers/agents/intake_agent.py</code></p> <p>Recommendation: These are correctly using <code>logger.debug()</code> for detailed diagnostics! No changes needed.</p> <p>Note: The Python logging framework automatically skips debug calls when log level is INFO or higher, so no performance impact.</p>"},{"location":"reference/code-review-archive/2025-09-30-post-refactor-review/#positive-recognition","title":"Positive Recognition \ud83c\udf1f","text":""},{"location":"reference/code-review-archive/2025-09-30-post-refactor-review/#excellent-practices-demonstrated","title":"Excellent Practices Demonstrated","text":"<ol> <li>Clean Architecture Separation \u2705</li> <li>Pure agent logic in <code>ConversationAgent</code></li> <li>Orchestration logic in <code>ConversationOrchestrator</code></li> <li>Processing pipeline in <code>LoanProcessingPipeline</code></li> <li> <p>Clear separation of concerns throughout</p> </li> <li> <p>Type Safety \u2705</p> </li> <li>Comprehensive Pydantic models for all data structures</li> <li>Proper type annotations on all functions</li> <li>AsyncGenerator type hints for streaming responses</li> <li> <p>No <code>Any</code> types except where necessary for dynamic data</p> </li> <li> <p>Error Handling \u2705</p> </li> <li>Try-except blocks around all async operations</li> <li>Graceful degradation on JSON parse failures</li> <li>Proper exception chaining with <code>from e</code></li> <li> <p>exc_info=True for traceback logging</p> </li> <li> <p>Observability \u2705</p> </li> <li>Centralized logging configuration</li> <li>Structured logging with <code>extra</code> fields</li> <li>Session ID masking for privacy</li> <li> <p>Application Insights integration support</p> </li> <li> <p>Security Best Practices \u2705</p> </li> <li>UUID validation prevents injection attacks</li> <li>Session ID masking in all logs</li> <li>No sensitive data in error messages</li> <li> <p>Proper CORS configuration</p> </li> <li> <p>Async Patterns \u2705</p> </li> <li>Proper async/await usage throughout</li> <li>AsyncGenerator for streaming responses</li> <li> <p>No blocking calls in async functions</p> </li> <li> <p>Testing Coverage \u2705</p> </li> <li>165/168 tests passing (98% success)</li> <li>Unit tests for all major components</li> <li>Integration tests for workflows</li> <li> <p>Mock implementations for offline testing</p> </li> <li> <p>Documentation \u2705</p> </li> <li>Clear docstrings on all classes and methods</li> <li>Module-level documentation explaining patterns</li> <li>Inline comments explaining complex logic</li> <li>Type hints improve code readability</li> </ol>"},{"location":"reference/code-review-archive/2025-09-30-post-refactor-review/#good-architectural-decisions","title":"Good Architectural Decisions \ud83c\udfd7\ufe0f","text":""},{"location":"reference/code-review-archive/2025-09-30-post-refactor-review/#1-agent-as-tool-pattern","title":"1. Agent-as-Tool Pattern","text":"<p>Decision: Separate pure agent (AI) from orchestrator (code)</p> <p>Benefits: - Agent focuses only on conversation - Code handles all deterministic logic - Easy to swap agents or modify behavior - Clear testing boundaries</p> <p>Evidence: - <code>ConversationAgent.chat()</code> returns raw JSON - <code>ConversationOrchestrator.handle_conversation()</code> parses and validates - No business logic in agent classes</p>"},{"location":"reference/code-review-archive/2025-09-30-post-refactor-review/#2-pydantic-data-models","title":"2. Pydantic Data Models","text":"<p>Decision: Use Pydantic for all data structures</p> <p>Benefits: - Automatic validation on construction - Clear API contracts - JSON serialization built-in - Type hints improve IDE support</p> <p>Evidence: - <code>LoanApplication</code> with comprehensive validation - <code>ConversationResponse</code> with structured fields - <code>ProcessingUpdate</code> for workflow events</p>"},{"location":"reference/code-review-archive/2025-09-30-post-refactor-review/#3-session-management-with-agentthread","title":"3. Session Management with AgentThread","text":"<p>Decision: Persist AgentThread in session for conversation continuity</p> <p>Benefits: - Conversation context maintained across turns - Agent \"remembers\" previous interactions - Stateless API endpoints - Easy horizontal scaling</p> <p>Evidence: - <code>ConversationSession.get_or_create_thread()</code> - Thread reused across multiple chat calls - Clean session lifecycle management</p>"},{"location":"reference/code-review-archive/2025-09-30-post-refactor-review/#4-observability-abstraction","title":"4. Observability Abstraction","text":"<p>Decision: Centralized <code>Observability</code> class for all logging</p> <p>Benefits: - Single point of configuration - Easy to swap logging backends - Consistent logger naming - Framework-agnostic fallback</p> <p>Evidence: - <code>Observability.get_logger(name)</code> used everywhere - Automatic initialization on first use - Agent Framework integration when available - Standard Python logging fallback</p>"},{"location":"reference/code-review-archive/2025-09-30-post-refactor-review/#test-results-analysis","title":"Test Results Analysis \ud83e\uddea","text":"<p>Total Tests: 168 Passing: 165 (98.2%) Failed: 3 (1.8%) Errors: 23 (import/setup issues) Skipped: 8</p>"},{"location":"reference/code-review-archive/2025-09-30-post-refactor-review/#failed-tests-not-production-blocking","title":"Failed Tests (Not Production-Blocking)","text":"<ol> <li><code>test_intake_agent_mcp_server_unavailable</code> - Integration test</li> <li>Cause: Expected error handling scenario</li> <li> <p>Impact: None (tests error handling)</p> </li> <li> <p><code>test_intake_agent_live_with_foundry</code> - Live integration test</p> </li> <li>Cause: Requires Azure AI Foundry credentials</li> <li> <p>Impact: None (optional live test)</p> </li> <li> <p><code>test_vip_application_live</code> - Live integration test</p> </li> <li>Cause: Requires Azure AI Foundry credentials</li> <li>Impact: None (optional live test)</li> </ol>"},{"location":"reference/code-review-archive/2025-09-30-post-refactor-review/#test-errors-setup-issues","title":"Test Errors (Setup Issues)","text":"<p>23 errors in <code>test_sequential_workflow_integration.py</code> - Cause: Test file references old <code>SequentialLoanWorkflow</code> class - Fix: Update test imports to use new class names - Priority: MEDIUM (affects CI but not production)</p> <p>Recommended Fix: <pre><code># tests/integration/test_sequential_workflow_integration.py\n\n# \u274c OLD IMPORTS\nfrom loan_avengers.agents.sequential_workflow import SequentialLoanWorkflow\n\n# \u2705 NEW IMPORTS\nfrom loan_avengers.agents.conversation_orchestrator import ConversationOrchestrator\nfrom loan_avengers.agents.loan_processing_pipeline import LoanProcessingPipeline\n</code></pre></p>"},{"location":"reference/code-review-archive/2025-09-30-post-refactor-review/#refactoring-assessment","title":"Refactoring Assessment \ud83d\udcca","text":""},{"location":"reference/code-review-archive/2025-09-30-post-refactor-review/#architecture-changes-review","title":"Architecture Changes Review","text":"Aspect Before After Grade Separation of Concerns Mixed agent + code logic Pure agent + code orchestrator A+ Type Safety Partial type hints Comprehensive types A Error Handling Basic try-except Graceful degradation + context A Testability Coupled components Independent units A Documentation Minimal docstrings Comprehensive docs A Logging Basic prints Structured logging + observability B+"},{"location":"reference/code-review-archive/2025-09-30-post-refactor-review/#code-quality-metrics","title":"Code Quality Metrics","text":"Metric Target Actual Status Type Coverage &gt;90% ~95% \u2705 Pass Test Coverage &gt;85% 98% (165/168) \u2705 Pass Ruff Violations 0 2 (line length) \u26a0\ufe0f Minor Security Issues 0 0 \u2705 Pass Performance Issues 0 0 \u2705 Pass"},{"location":"reference/code-review-archive/2025-09-30-post-refactor-review/#security-review","title":"Security Review \u2705","text":""},{"location":"reference/code-review-archive/2025-09-30-post-refactor-review/#no-security-issues-found","title":"No Security Issues Found","text":"<p>Reviewed Areas: - \u2705 Input validation (UUID validation in session manager) - \u2705 Error handling (no sensitive data in errors) - \u2705 Logging (session IDs masked, no PII in logs) - \u2705 CORS configuration (appropriate for development) - \u2705 Async safety (no race conditions detected) - \u2705 Data models (Pydantic validation prevents injection)</p> <p>Security Wins: 1. Session ID Validation: Prevents injection attacks 2. Masked Logging: Privacy-preserving logs 3. Exception Chaining: No information leakage 4. Type Safety: Prevents data confusion attacks</p>"},{"location":"reference/code-review-archive/2025-09-30-post-refactor-review/#performance-review","title":"Performance Review \u2705","text":""},{"location":"reference/code-review-archive/2025-09-30-post-refactor-review/#no-performance-issues-detected","title":"No Performance Issues Detected","text":"<p>Reviewed Areas: - \u2705 Async patterns (proper async/await usage) - \u2705 Database queries (N/A - in-memory session store) - \u2705 Caching (not needed at this stage) - \u2705 Memory leaks (session cleanup implemented)</p> <p>Performance Wins: 1. Async Generators: Streaming responses, low memory 2. Session Cleanup: Automatic cleanup of old sessions 3. Lazy Logging: Using <code>extra</code> dict for structured data 4. Type Hints: Enable future optimizations</p> <p>Note on Logging F-Strings: Current f-string usage has minimal performance impact at INFO level, but fixing to lazy evaluation is still recommended for consistency and future-proofing.</p>"},{"location":"reference/code-review-archive/2025-09-30-post-refactor-review/#recommended-action-plan","title":"Recommended Action Plan \ud83d\udccb","text":""},{"location":"reference/code-review-archive/2025-09-30-post-refactor-review/#immediate-before-production","title":"Immediate (Before Production)","text":"<ol> <li>Fix Logging Patterns (2-3 hours)</li> <li>Convert all f-strings to lazy % formatting</li> <li>Move debug info from INFO to DEBUG level</li> <li> <p>Systematic review of all 30+ logging calls</p> </li> <li> <p>Fix Line Length (5 minutes)</p> </li> <li>Run <code>uv run ruff format .</code></li> <li> <p>Verify fixes with <code>uv run ruff check .</code></p> </li> <li> <p>Verify Tests Pass (30 minutes)</p> </li> <li>Fix test imports in <code>test_sequential_workflow_integration.py</code></li> <li>Ensure all 168 tests pass locally</li> <li>Update CI if needed</li> </ol>"},{"location":"reference/code-review-archive/2025-09-30-post-refactor-review/#short-term-next-sprint","title":"Short-Term (Next Sprint)","text":"<ol> <li>Complete Agent Personas (4-6 hours)</li> <li>Create <code>credit-agent-persona.md</code></li> <li>Create <code>income-agent-persona.md</code></li> <li>Create <code>risk-agent-persona.md</code></li> <li> <p>Update <code>LoanProcessingPipeline</code> to load personas</p> </li> <li> <p>Implement Result Parsing (3-4 hours)</p> </li> <li>Create <code>_parse_workflow_result()</code> method</li> <li>Update to return <code>FinalDecisionResponse</code></li> <li> <p>Add integration test for end-to-end flow</p> </li> <li> <p>Add Monitoring (2 hours)</p> </li> <li>Add counter for JSON parse failures</li> <li>Add metrics for workflow processing times</li> <li>Dashboard for session statistics</li> </ol>"},{"location":"reference/code-review-archive/2025-09-30-post-refactor-review/#future-enhancements","title":"Future Enhancements","text":"<ol> <li>Extract Validation Utilities (1 hour)</li> <li>Create <code>loan_avengers/utils/validation.py</code></li> <li>Move UUID validation to utility</li> <li> <p>Add other common validators</p> </li> <li> <p>Improve Documentation (2 hours)</p> </li> <li>Move logger prefix comment to module docstring</li> <li>Add architecture diagram showing agent flow</li> <li>Document error handling patterns</li> </ol>"},{"location":"reference/code-review-archive/2025-09-30-post-refactor-review/#conclusion","title":"Conclusion","text":"<p>The refactored architecture is excellent and demonstrates strong engineering practices. The separation of agent intelligence from orchestration code is clean, maintainable, and follows the stated \"Agent-as-Tool\" pattern perfectly.</p> <p>Key Takeaway: This is production-ready code with minor logging pattern fixes needed. The architecture is sound, tests are comprehensive, and no security or performance issues exist.</p> <p>Estimated Total Fix Time: 4-5 hours for Priority 2 issues</p> <p>Recommendation: Address logging patterns (Priority 2, Items 1-2) before production deployment. All other issues can be handled in normal sprint cycles.</p>"},{"location":"reference/code-review-archive/2025-09-30-post-refactor-review/#appendix-quick-fix-script","title":"Appendix: Quick Fix Script","text":"<pre><code>#!/bin/bash\n# Quick fixes for Priority 2 Issues 1-3\n\necho \"Fixing line length violations...\"\nuv run ruff format .\n\necho \"Running linter...\"\nuv run ruff check . --fix\n\necho \"Running tests...\"\nuv run pytest tests/test_agent_registry.py tests/test_safe_evaluator.py -v\n\necho \"\u2705 Automated fixes complete!\"\necho \"\u26a0\ufe0f  Manual fixes still needed:\"\necho \"   1. Convert f-strings to lazy logging (see report)\"\necho \"   2. Move debug logs to DEBUG level (see report)\"\necho \"   3. Create missing persona files (see report)\"\necho \"   4. Implement result parsing (see report)\"\n</code></pre> <p>Report Generated: 2025-09-30 Reviewer: Code Review Agent Review Duration: Comprehensive (all core files reviewed) Files Reviewed: 10 core files + 5 MCP servers + 3 test files</p>"},{"location":"reference/legacy/README-old/","title":"Loan Avengers Documentation","text":"<p>Multi-Agent Loan Processing System demonstrating revolutionary AI-augmented development workflows with Microsoft Agent Framework and MCP servers.</p>"},{"location":"reference/legacy/README-old/#quick-start-guides","title":"\ud83d\ude80 Quick Start Guides","text":""},{"location":"reference/legacy/README-old/#for-developers","title":"For Developers","text":"<ul> <li>Technical Specification - Complete system architecture and implementation details</li> <li>Microsoft Agent Framework Types - Type definitions and integration patterns</li> <li>Data Models - Pydantic models and data structures</li> </ul>"},{"location":"reference/legacy/README-old/#for-product-teams","title":"For Product Teams","text":"<ul> <li>Product Documentation - User experience and business requirements</li> <li>API Documentation - Complete REST API specification and deployment guides</li> </ul>"},{"location":"reference/legacy/README-old/#ai-augmented-development-revolution","title":"\ud83e\udde0 AI-Augmented Development Revolution","text":""},{"location":"reference/legacy/README-old/#revolutionary-workflow-analysis","title":"Revolutionary Workflow Analysis","text":"<ul> <li>AI-Augmented Workflow Comparison \u2b50 FEATURED \u2b50</li> <li>Traditional 8-12 person team vs Single developer + AI agents</li> <li>Quantitative analysis: 10x faster, 90% cost reduction, superior quality</li> <li>Evidence from 72+ PRs and real development patterns</li> <li> <p>Economic impact: $1.2M+ team vs $152K AI-augmented approach</p> </li> <li> <p>Technical Implementation Diagrams </p> </li> <li>Detailed Mermaid diagrams of agent orchestration</li> <li>MCP server architecture and integration patterns</li> <li>Multi-platform synchronization technical flows</li> <li> <p>Quality gates and performance optimization</p> </li> <li> <p>Development Philosophy</p> </li> <li>Human-AI collaborative development principles</li> <li>Agent specialization and orchestration strategies</li> <li>Documentation as foundation for AI autonomy</li> </ul>"},{"location":"reference/legacy/README-old/#historical-workflow-documentation","title":"Historical Workflow Documentation","text":"<ul> <li>AI-Augmented Development Workflow - Original workflow documentation with detailed phase breakdowns</li> </ul>"},{"location":"reference/legacy/README-old/#architecture-design","title":"\ud83c\udfd7\ufe0f Architecture &amp; Design","text":""},{"location":"reference/legacy/README-old/#system-architecture","title":"System Architecture","text":"<ul> <li>Agent Patterns - Multi-agent design patterns and best practices</li> <li>Agent Strategy - Strategic approach to agent development</li> <li>Orchestration Patterns - Agent coordination and workflow patterns</li> </ul>"},{"location":"reference/legacy/README-old/#decision-records","title":"Decision Records","text":"<ul> <li>Architecture Decision Records (ADRs) - Complete decision history and rationale</li> <li>9 ADRs documenting key architectural choices</li> <li>Evidence-based decision making with AI agent consultation</li> <li>Clear audit trail for future development</li> </ul>"},{"location":"reference/legacy/README-old/#visual-documentation","title":"Visual Documentation","text":"<ul> <li>System Diagrams - Mermaid diagrams for system visualization</li> </ul>"},{"location":"reference/legacy/README-old/#agent-framework-integration","title":"\ud83e\udd16 Agent Framework Integration","text":""},{"location":"reference/legacy/README-old/#microsoft-agent-framework","title":"Microsoft Agent Framework","text":"<p>The Loan Avengers system showcases enterprise-grade integration with Microsoft Agent Framework:</p> <ul> <li>5 Specialized Agents: Intake, Credit, Income, Risk, and Orchestrator agents</li> <li>MCP Server Integration: 3 custom MCP servers for verification, document processing, and financial calculations</li> <li>Structured Response Models: Type-safe Pydantic models for all agent interactions</li> <li>Conversation Threading: Contextual conversations with AgentThread support</li> </ul>"},{"location":"reference/legacy/README-old/#agent-ecosystem","title":"Agent Ecosystem","text":"<ul> <li>Claude Agents - Claude Code platform agent implementations</li> <li>GitHub Chatmodes - GitHub Copilot agent implementations  </li> <li>Development Agents - Reference documentation for support agents</li> </ul>"},{"location":"reference/legacy/README-old/#quality-testing","title":"\ud83d\udcca Quality &amp; Testing","text":""},{"location":"reference/legacy/README-old/#quality-assurance","title":"Quality Assurance","text":"<ul> <li>85%+ Test Coverage on all core components</li> <li>Multi-layer AI Review processes with technical feedback</li> <li>Automated Quality Gates with pre-commit validation</li> <li>Cross-platform Synchronization ensuring consistency</li> </ul>"},{"location":"reference/legacy/README-old/#responsible-ai","title":"Responsible AI","text":"<ul> <li>Responsible AI Guidelines - Ethical AI development practices</li> <li>Security Guidelines - Privacy and security best practices</li> <li>Agent Oversight with human strategic control maintained</li> </ul>"},{"location":"reference/legacy/README-old/#deployment-operations","title":"\ud83d\udea2 Deployment &amp; Operations","text":""},{"location":"reference/legacy/README-old/#deployment-documentation","title":"Deployment Documentation","text":"<ul> <li>Deployment Guides - Complete Azure deployment instructions</li> <li>Infrastructure as Code - Terraform configurations</li> <li>CI/CD Pipelines - Automated build and deployment</li> </ul>"},{"location":"reference/legacy/README-old/#monitoring-observability","title":"Monitoring &amp; Observability","text":"<ul> <li>Structured Logging with masked sensitive data</li> <li>Agent Performance Tracking with token usage optimization</li> <li>System Health Monitoring across all components</li> </ul>"},{"location":"reference/legacy/README-old/#research-innovation","title":"\ud83d\udd2c Research &amp; Innovation","text":""},{"location":"reference/legacy/README-old/#breakthrough-discoveries","title":"Breakthrough Discoveries","text":"<ol> <li>Token Optimization: 75% reduction through focused persona design (300-500 lines vs 2000+)</li> <li>Context Loss Prevention: Strategic session management and git checkpoints</li> <li>Circular Debugging Detection: AI loop detection with human intervention triggers</li> <li>Documentation-Driven Autonomy: Better docs = more autonomous agents</li> </ol>"},{"location":"reference/legacy/README-old/#development-patterns","title":"Development Patterns","text":"<ul> <li>Agent Specialization: Domain-specific expertise with clear boundaries</li> <li>Human Orchestration: Strategic decisions while AI handles execution</li> <li>Quality Multiplication: Multi-layer AI review improving code quality</li> <li>Rapid Iteration: Refactoring costs reduced from weeks to hours</li> </ul>"},{"location":"reference/legacy/README-old/#success-metrics","title":"\ud83d\udcc8 Success Metrics","text":""},{"location":"reference/legacy/README-old/#quantitative-results-evidence-based","title":"Quantitative Results (Evidence-Based)","text":"<ul> <li>Development Velocity: 10x increase (weeks \u2192 days)</li> <li>Team Size: 90% reduction (8-12 people \u2192 1 person + AI)</li> <li>Code Quality: 40% reduction in production issues</li> <li>Documentation: 95% automated maintenance</li> <li>Test Coverage: Consistent 85%+ across components</li> <li>Refactoring Frequency: 5x increase due to reduced cost</li> </ul>"},{"location":"reference/legacy/README-old/#qualitative-improvements","title":"Qualitative Improvements","text":"<ul> <li>Design Evolution: Rapid iteration enables better architectural decisions</li> <li>Knowledge Preservation: All decisions documented and searchable</li> <li>Reduced Technical Debt: Continuous refactoring prevents accumulation</li> <li>Developer Satisfaction: Focus on creative and strategic work</li> </ul>"},{"location":"reference/legacy/README-old/#getting-started","title":"\ud83c\udfaf Getting Started","text":""},{"location":"reference/legacy/README-old/#for-new-team-members","title":"For New Team Members","text":"<ol> <li>Read Development Philosophy to understand the approach</li> <li>Review AI-Augmented Workflow Comparison for comprehensive context</li> <li>Explore Technical Specification for implementation details</li> <li>Check Architecture Decision Records for historical context</li> </ol>"},{"location":"reference/legacy/README-old/#for-implementing-similar-systems","title":"For Implementing Similar Systems","text":"<ol> <li>Study the Agent Patterns and specialization strategies</li> <li>Review Technical Implementation Diagrams for architecture patterns</li> <li>Examine Quality Gates for validation processes</li> <li>Consider Cross-Platform Synchronization for tool consistency</li> </ol>"},{"location":"reference/legacy/README-old/#future-evolution","title":"\ud83c\udf1f Future Evolution","text":""},{"location":"reference/legacy/README-old/#next-generation-capabilities","title":"Next-Generation Capabilities","text":"<ul> <li>Agent-to-Agent Communication: Direct agent collaboration without human mediation</li> <li>Predictive Development: AI anticipating requirements from user behavior patterns</li> <li>Self-Optimizing Architecture: AI-driven performance and design improvements  </li> <li>Cross-Project Learning: Knowledge transfer between different repositories</li> </ul>"},{"location":"reference/legacy/README-old/#scaling-considerations","title":"Scaling Considerations","text":"<ul> <li>Enterprise Adoption: Patterns for larger development teams</li> <li>Multi-Domain Applications: Expanding beyond loan processing</li> <li>Advanced Orchestration: Managing dozens of specialized agents</li> <li>Continuous Innovation: Adapting to rapidly advancing AI capabilities</li> </ul>"},{"location":"reference/legacy/README-old/#document-organization","title":"\ud83d\udcda Document Organization","text":"<pre><code>docs/\n\u251c\u2500\u2500 README.md (this file)                    # Documentation index and overview\n\u251c\u2500\u2500 ai-augmented-workflow-comparison.md      # \u2b50 FEATURED: Comprehensive workflow analysis\n\u251c\u2500\u2500 workflow-diagrams-technical.md           # Technical implementation diagrams\n\u251c\u2500\u2500 development-philosophy.md                # Human-AI collaborative principles\n\u251c\u2500\u2500 ai-augmented-development-workflow.md     # Original workflow documentation\n\u251c\u2500\u2500 technical-specification.md               # System architecture and implementation\n\u251c\u2500\u2500 data-models.md                          # Pydantic models and structures\n\u251c\u2500\u2500 microsoft-agent-framework-types.md      # Type definitions and patterns\n\u251c\u2500\u2500 agent-patterns.md                       # Multi-agent design patterns\n\u251c\u2500\u2500 agent-strategy.md                       # Strategic agent development\n\u251c\u2500\u2500 orchestration-patterns.md               # Agent coordination patterns\n\u251c\u2500\u2500 product/                                # Product and UX documentation\n\u251c\u2500\u2500 api/                                    # API specification and guides\n\u251c\u2500\u2500 decisions/                              # Architecture Decision Records (ADRs)\n\u251c\u2500\u2500 deployment/                             # Deployment and infrastructure guides\n\u251c\u2500\u2500 diagrams/                               # Visual system documentation\n\u251c\u2500\u2500 responsible-ai/                         # Ethical AI development practices\n\u251c\u2500\u2500 developer-agents/                       # Support agent reference documentation\n\u2514\u2500\u2500 notes/                                  # Development notes and research\n</code></pre> <p>This documentation represents a living knowledge base that evolves with our development practices and advancing AI capabilities. The Loan Avengers project serves as both a functional multi-agent system and a proof-of-concept for the future of AI-augmented software development.</p>"},{"location":"reference/legacy/agent-focus-comparison/","title":"Agent Focus vs Human Focus: Specification &amp; Review vs Coding &amp; Execution","text":"<p>Key Insight: AI agents excel at specification analysis and code review, while humans focus on coding and execution. This creates a complementary workflow where agents handle the \"what\" and \"why\" while humans handle the \"how.\"</p>"},{"location":"reference/legacy/agent-focus-comparison/#core-difference-focus-areas","title":"Core Difference: Focus Areas","text":""},{"location":"reference/legacy/agent-focus-comparison/#traditional-development-team","title":"Traditional Development Team","text":"<pre><code>sequenceDiagram\n    participant PM as Product Manager\n    participant Dev1 as Developer 1\n    participant Dev2 as Developer 2\n    participant Dev3 as Developer 3\n    participant QA as QA Engineer\n\n    Note over PM,QA: Traditional Team - All Human Focus on Coding &amp; Execution\n\n    PM-&gt;&gt;Dev1: Feature requirements\n    PM-&gt;&gt;Dev2: Feature requirements\n    PM-&gt;&gt;Dev3: Feature requirements\n\n    par Human Parallel Coding\n        Dev1-&gt;&gt;Dev1: Code frontend components\n    and\n        Dev2-&gt;&gt;Dev2: Code backend APIs\n    and  \n        Dev3-&gt;&gt;Dev3: Code database layer\n    end\n\n    Dev1-&gt;&gt;QA: Submit code for review\n    Dev2-&gt;&gt;QA: Submit code for review\n    Dev3-&gt;&gt;QA: Submit code for review\n\n    QA-&gt;&gt;QA: Manual testing &amp; validation\n\n    Note over PM,QA: Human focus: Implementation &amp; Execution\n    Note over PM,QA: Limited specification analysis &amp; systematic review</code></pre>"},{"location":"reference/legacy/agent-focus-comparison/#ai-augmented-development","title":"AI-Augmented Development","text":"<pre><code>sequenceDiagram\n    participant Dev as Human Developer\n    participant PMA as Product Manager Agent\n    participant SAR as System Architecture Agent\n    participant CA as Claude/Copilot Coding Agents\n    participant CRA as Code Review Agent\n\n    Note over Dev,CRA: AI-Augmented - Agents Write Code, Human Provides Strategic Guidance\n\n    Dev-&gt;&gt;PMA: High-level feature idea\n    PMA-&gt;&gt;PMA: Deep specification analysis\n    PMA-&gt;&gt;Dev: Detailed requirements + acceptance criteria\n\n    Dev-&gt;&gt;SAR: Architecture consultation\n    SAR-&gt;&gt;SAR: System impact analysis + design validation\n    SAR-&gt;&gt;Dev: Architecture recommendations + constraints\n\n    Note over Dev,CA: Pair Programming: Human Guides, Agents Code\n    Dev-&gt;&gt;CA: Coding instructions + business requirements\n    CA-&gt;&gt;CA: Write implementation code\n    CA-&gt;&gt;Dev: Code for review and guidance\n    Dev-&gt;&gt;CA: Simplification instructions + pattern alignment\n    CA-&gt;&gt;CA: Refactor based on guidance\n    CA-&gt;&gt;CA: Generate unit tests + CI/CD setup\n\n    Note over Dev,CRA: PR Review: Human Strategic, Agent Technical\n    CA-&gt;&gt;CRA: Submit code for technical review\n    CRA-&gt;&gt;CRA: Code quality analysis + pattern validation\n    CRA-&gt;&gt;Dev: Technical feedback + improvement suggestions\n\n    Dev-&gt;&gt;Dev: Critical integration review\n    Dev-&gt;&gt;Dev: Complex edge case validation  \n    Dev-&gt;&gt;Dev: Business outcome alignment check\n    Dev-&gt;&gt;CA: Integration guidance + edge case instructions\n    CA-&gt;&gt;CA: Implement integration fixes + edge cases\n\n    Note over Dev,CRA: Clear division: Agents write &amp; refactor, Human guides &amp; validates</code></pre>"},{"location":"reference/legacy/agent-focus-comparison/#detailed-focus-area-analysis","title":"Detailed Focus Area Analysis","text":""},{"location":"reference/legacy/agent-focus-comparison/#what-humans-do-better-strategic-review-integration-guidance","title":"What Humans Do Better: Strategic Review &amp; Integration Guidance","text":"<pre><code>mindmap\n  root((Human Developer Strengths))\n    Critical Integration Review\n      Multi-system integration validation\n      Complex edge case analysis\n      System-wide impact assessment\n      Performance bottleneck identification\n    Strategic Code Guidance\n      Business outcome alignment\n      Design pattern enforcement\n      Code simplification instructions\n      Architecture consistency validation\n    Pair Programming Direction\n      Real-time coding guidance\n      Problem-solving strategy\n      Technical decision making\n      Quality standard setting\n    PR Review Focus\n      Business logic validation\n      Integration correctness\n      Edge case coverage\n      Design pattern compliance</code></pre>"},{"location":"reference/legacy/agent-focus-comparison/#what-ai-agents-do-better-code-writing-technical-execution","title":"What AI Agents Do Better: Code Writing &amp; Technical Execution","text":"<pre><code>mindmap\n  root((AI Agent Strengths))\n    Code Writing &amp; Implementation\n      Claude Code Agent implementation\n      GitHub Copilot code generation\n      Refactoring and optimization\n      Pattern implementation\n    Specification Analysis\n      Requirement completeness analysis\n      Edge case identification\n      Acceptance criteria validation\n      Dependency mapping\n    Technical Execution\n      Unit test generation\n      CI/CD pipeline setup\n      Code quality enforcement\n      Security implementation\n    Systematic Review\n      Code PR technical review\n      Best practice compliance\n      Pattern consistency checking\n      Performance analysis</code></pre>"},{"location":"reference/legacy/agent-focus-comparison/#workflow-sequence-comparison","title":"Workflow Sequence Comparison","text":""},{"location":"reference/legacy/agent-focus-comparison/#traditional-human-heavy-coding-manual-review","title":"Traditional: Human-Heavy Coding + Manual Review","text":"<pre><code>sequenceDiagram\n    participant Req as Requirements\n    participant Team as Development Team\n    participant Review as Review Process\n    participant Deploy as Deployment\n\n    Note over Req,Deploy: Human-Centric Workflow\n\n    Req-&gt;&gt;Team: Basic requirements\n    Team-&gt;&gt;Team: Interpret requirements (gaps/assumptions)\n    Team-&gt;&gt;Team: Design &amp; implement solution\n    Team-&gt;&gt;Team: Self-review code\n    Team-&gt;&gt;Review: Submit for peer review\n    Review-&gt;&gt;Review: Manual code review (limited time)\n    Review-&gt;&gt;Review: Manual testing\n    Review-&gt;&gt;Deploy: Approve for deployment\n\n    Note over Team,Review: Heavy human focus on coding + limited review depth</code></pre>"},{"location":"reference/legacy/agent-focus-comparison/#ai-augmented-agent-code-writing-human-strategic-review","title":"AI-Augmented: Agent Code Writing + Human Strategic Review","text":"<pre><code>sequenceDiagram\n    participant Idea as Feature Idea\n    participant AnalysisAgents as Analysis Agents\n    participant Dev as Human Developer\n    participant CodingAgents as Coding Agents\n    participant ReviewAgents as Review Agents\n    participant Deploy as Deployment\n\n    Note over Idea,Deploy: Agent-Augmented Workflow: Agents Code, Human Guides\n\n    Idea-&gt;&gt;AnalysisAgents: High-level concept\n    AnalysisAgents-&gt;&gt;AnalysisAgents: Deep specification analysis\n    AnalysisAgents-&gt;&gt;AnalysisAgents: Architecture impact assessment\n    AnalysisAgents-&gt;&gt;Dev: Comprehensive specification + constraints\n\n    Note over Dev,CodingAgents: Pair Programming Session\n    Dev-&gt;&gt;CodingAgents: Coding instructions + business requirements\n    CodingAgents-&gt;&gt;CodingAgents: Write implementation code\n    CodingAgents-&gt;&gt;CodingAgents: Generate unit tests\n    CodingAgents-&gt;&gt;CodingAgents: Setup CI/CD components\n\n    CodingAgents-&gt;&gt;Dev: Code implementation for review\n    Dev-&gt;&gt;Dev: Critical integration review\n    Dev-&gt;&gt;Dev: Complex edge case validation\n    Dev-&gt;&gt;CodingAgents: Simplification + pattern alignment instructions\n    CodingAgents-&gt;&gt;CodingAgents: Refactor based on guidance\n\n    par Multi-Layer Review Process\n        CodingAgents-&gt;&gt;ReviewAgents: Submit for technical review\n        ReviewAgents-&gt;&gt;ReviewAgents: Code quality + pattern analysis\n        ReviewAgents-&gt;&gt;Dev: Technical feedback\n    and\n        Dev-&gt;&gt;Dev: Business outcome alignment validation\n        Dev-&gt;&gt;Dev: Integration correctness check\n        Dev-&gt;&gt;CodingAgents: Strategic guidance + edge case instructions\n    end\n\n    CodingAgents-&gt;&gt;Deploy: Final implementation with human validation\n\n    Note over Dev,CodingAgents: Agents write &amp; implement, Human guides &amp; validates strategically</code></pre>"},{"location":"reference/legacy/agent-focus-comparison/#real-example-from-repository","title":"Real Example from Repository","text":""},{"location":"reference/legacy/agent-focus-comparison/#github-issue-47-actual-agent-vs-human-focus","title":"GitHub Issue #47 - Actual Agent vs Human Focus","text":"<p>Human Developer Focus: - Strategic architecture decisions and guidance - Critical integration review and validation - Complex edge case analysis and instructions - Business outcome alignment in PR reviews - Code simplification and design pattern enforcement</p> <p>Agent Focus Areas: 1. Product Manager Advisor Agent:    - Analyzed requirement completeness    - Generated detailed issue templates and acceptance criteria    - Mapped dependencies and workflow impacts</p> <ol> <li>Claude/GitHub Copilot Coding Agents:</li> <li>Wrote implementation code based on human instructions</li> <li>Generated comprehensive unit tests</li> <li>Handled refactoring and code optimization</li> <li> <p>Set up CI/CD pipeline components</p> </li> <li> <p>Code Review Agent:</p> </li> <li>Performed technical PR review analysis</li> <li>Identified code quality and pattern issues</li> <li>Suggested performance optimizations</li> <li> <p>Validated best practice compliance</p> </li> <li> <p>System Architecture Reviewer Agent:</p> </li> <li>Validated architectural approach alignment</li> <li>Assessed system-wide integration impacts</li> <li>Recommended implementation patterns</li> </ol>"},{"location":"reference/legacy/agent-focus-comparison/#the-complementary-advantage","title":"The Complementary Advantage","text":""},{"location":"reference/legacy/agent-focus-comparison/#why-this-division-works","title":"Why This Division Works","text":"<pre><code>flowchart LR\n    subgraph \"Agent Strengths\"\n        A1[Comprehensive Analysis]\n        A2[Pattern Recognition]\n        A3[Systematic Review]\n        A4[Rapid Iteration]\n    end\n\n    subgraph \"Human Strengths\"  \n        H1[Creative Problem Solving]\n        H2[Contextual Decisions]\n        H3[Complex Implementation]\n        H4[Strategic Execution]\n    end\n\n    subgraph \"Combined Result\"\n        R1[Higher Quality Code]\n        R2[Faster Development]\n        R3[Better Architecture]\n        R4[Reduced Bugs]\n    end\n\n    A1 --&gt; R1\n    A2 --&gt; R2\n    A3 --&gt; R1\n    A4 --&gt; R2\n\n    H1 --&gt; R3\n    H2 --&gt; R3\n    H3 --&gt; R2\n    H4 --&gt; R4\n\n    classDef agent fill:#e3f2fd,stroke:#1976d2\n    classDef human fill:#e8f5e8,stroke:#388e3c\n    classDef result fill:#fff3e0,stroke:#f57c00\n\n    class A1,A2,A3,A4 agent\n    class H1,H2,H3,H4 human\n    class R1,R2,R3,R4 result</code></pre>"},{"location":"reference/legacy/agent-focus-comparison/#evidence-from-repository-patterns","title":"Evidence from Repository Patterns","text":"<p>Agent Activities Observed: - Specification analysis and requirement refinement - Code implementation and refactoring (Claude/Copilot agents) - Unit test generation and CI/CD setup - Multi-perspective technical PR review with detailed feedback - Cross-platform documentation synchronization - Architecture impact assessment and recommendations</p> <p>Human Activities Observed: - Pair programming guidance and code direction - Critical integration review and validation - Complex edge case analysis and instructions - Business outcome alignment in PR reviews - Code simplification and design pattern enforcement - Strategic architecture decisions and final approval - Production deployment coordination</p>"},{"location":"reference/legacy/agent-focus-comparison/#key-insight-complementary-not-replacement","title":"Key Insight: Complementary, Not Replacement","text":"<p>The breakthrough isn't replacing humans with AI, but optimizing focus areas:</p> <ul> <li>Agents excel: Code writing, systematic analysis, comprehensive technical review, pattern implementation</li> <li>Humans excel: Strategic guidance, critical integration validation, complex edge case analysis, business alignment</li> <li>Together: Higher quality code with faster iteration through specialized pair programming</li> </ul> <p>This creates a force multiplication effect where each participant focuses on their strengths, resulting in better outcomes than either could achieve alone.</p> <p>This analysis is based on actual development patterns observed in the Loan Avengers repository, focusing on the real division of labor between AI agents and human developers rather than theoretical comparisons.</p>"},{"location":"reference/legacy/agent-patterns/","title":"Loan Avengers Agent Patterns","text":"<p>Personality-driven agent personas with superhero themes for autonomous loan processing business logic.</p>"},{"location":"reference/legacy/agent-patterns/#overview","title":"Overview","text":"<p>Our Business Logic First approach provides business-focused agent personas that embody loan processing domain expertise. Each persona contains the specialized knowledge needed for their role in the loan evaluation workflow.</p>"},{"location":"reference/legacy/agent-patterns/#architecture","title":"Architecture","text":"<pre><code>\u250c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2510    \u250c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2510    \u250c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2510\n\u2502 Business Config  \u2502\u2500\u2500\u25b6\u2502 Framework Agent  \u2502\u2500\u2500\u25b6\u2502   MCP Servers   \u2502\n\u2502 (agents.yaml)    \u2502    \u2502 + Persona File   \u2502    \u2502 (Tool Servers)  \u2502\n\u2514\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2518    \u2514\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2518    \u2514\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2518\n        \u2193                      \u2193                      \u2193\n  Framework-Agnostic      Domain Logic           Framework\n   Configuration         in Personas           Orchestration\n</code></pre>"},{"location":"reference/legacy/agent-patterns/#business-logic-foundation","title":"Business Logic Foundation","text":"<p>Agent configuration and personas are separated from framework implementation:</p> <pre><code># loan_processing/config/agents.yaml\nagent_personas:\n  intake:\n    file: \"intake-agent-persona.md\"\n    description: \"Fast application triage and routing\"\n    mcp_servers: []  # Optimized for speed\n\n  credit:\n    file: \"credit-agent-persona.md\"\n    description: \"Comprehensive credit evaluation\"\n    mcp_servers: [\"application_verification\", \"financial_calculations\"]\n</code></pre> <pre><code># Business configuration loading\nfrom loan_processing.utils import PersonaLoader, ConfigurationLoader\n\n# Load business configuration\nconfig = ConfigurationLoader.load_config()\ncredit_persona = PersonaLoader.load_persona('credit')\nrisk_persona = PersonaLoader.load_persona('risk')\n\n# Business personas contain all domain expertise\nprint(f\"Credit agent capabilities: {config['agent_personas']['credit']['capabilities']}\")\n</code></pre>"},{"location":"reference/legacy/agent-patterns/#adding-new-agents","title":"Adding New Agents","text":""},{"location":"reference/legacy/agent-patterns/#step-1-define-agent-configuration","title":"Step 1: Define Agent Configuration","text":"<p>Add your agent to <code>loan_processing/config/agents.yaml</code>:</p> <pre><code>agent_personas:\n  your_new_agent:\n    file: \"your-agent-persona.md\"\n    description: \"What this agent does\"\n    mcp_servers:\n      - \"application_verification\"  # Which tools it can access\n      - \"document_processing\"\n    capabilities:\n      - \"Specific capability 1\"\n      - \"Specific capability 2\"\n</code></pre> <p>Key Changes from Complex Approach: - No provider-specific config (framework handles this) - No output format specification (defined in persona) - Simplified to essential business mappings</p>"},{"location":"reference/legacy/agent-patterns/#step-2-create-agent-persona","title":"Step 2: Create Agent Persona","text":"<p>Create <code>loan_processing/agents/agent-persona/your-agent-persona.md</code>:</p> <pre><code># Your Agent Name\n\n## Jobs-to-be-Done Focus\n**Primary Customer Job**: \"When I [situation], I want [motivation], so I [outcome]\"\n\n## Role and Responsibilities\nYou are a specialized agent responsible for [specific domain task] in the loan processing workflow.\n\n## Domain Expertise\n[Describe the specific domain knowledge and decision-making expertise]\n\n## Available Tools\nYou have access to the following MCP servers:\n- **application_verification**: Identity, employment, and credit checks\n- **document_processing**: Document analysis and data extraction\n\n## Decision Framework\n[Provide clear decision-making criteria based on domain expertise]\n\n## Output Requirements\nProvide structured assessment with:\n- Primary assessment result\n- Confidence score (0-100)\n- Risk factors identified\n- Recommendations for next steps\n- Tools used during assessment\n</code></pre>"},{"location":"reference/legacy/agent-patterns/#step-3-use-your-agent","title":"Step 3: Use Your Agent","text":"<pre><code># Using your new agent in business workflow\nfrom loan_processing.utils import PersonaLoader, ConfigurationLoader\nfrom loan_processing.models import LoanApplication\n\n# Load agent configuration\nconfig = ConfigurationLoader.load_config()\nif \"your_new_agent\" in config['agent_personas']:\n    agent_config = config['agent_personas']['your_new_agent']\n    persona_content = PersonaLoader.load_persona('your_new_agent')\n\n    # Agent is ready with business logic and tool access\n    available_tools = agent_config['mcp_servers']\n    print(f\"Agent has access to: {available_tools}\")\n</code></pre>"},{"location":"reference/legacy/agent-patterns/#current-agent-personas","title":"Current Agent Personas","text":""},{"location":"reference/legacy/agent-patterns/#jobs-to-be-done-focused-agents","title":"Jobs-to-be-Done Focused Agents","text":"<ol> <li>Intake Agent (persona)</li> <li>Primary Job: \"Make this process smooth and complete the first time\"</li> <li>No MCP tools (speed optimized)</li> <li> <p>Creates confidence through immediate feedback</p> </li> <li> <p>Credit Agent (persona)</p> </li> <li>Primary Job: \"Get fair credit evaluation considering my full story\"</li> <li>Uses verification and calculation tools</li> <li> <p>Provides holistic assessment with improvement guidance</p> </li> <li> <p>Income Agent (persona)</p> </li> <li>Primary Job: \"Have my earning capacity properly recognized and valued\"</li> <li>Handles diverse income patterns</li> <li> <p>Recognizes gig economy and non-traditional income</p> </li> <li> <p>Risk Agent (persona)</p> </li> <li>Primary Job: \"Get loan terms that match my actual risk level\"</li> <li>Synthesizes all assessments with context from other agents</li> <li> <p>Provides clear rationale and optimal terms</p> </li> <li> <p>Orchestrator Agent (persona)</p> </li> <li>Coordinates workflow and makes final decisions</li> <li>Ensures comprehensive evaluation and audit trail</li> <li>Handles edge cases and escalation</li> </ol>"},{"location":"reference/legacy/agent-patterns/#mcp-server-integration","title":"MCP Server Integration","text":"<p>Business capabilities exposed as independent tool servers:</p> <p>Configuration: <code>loan_processing/config/mcp_servers.yaml</code> <pre><code>servers:\n  application_verification:\n    host: \"localhost\"\n    port: 8010\n    url: \"http://localhost:8010/sse\"\n    tools:\n      - \"verify_identity\"\n      - \"get_credit_report\"\n      - \"verify_employment\"\n      - \"get_bank_account_data\"\n\n  document_processing:\n    host: \"localhost\"\n    port: 8011\n    tools:\n      - \"extract_text_from_document\"\n      - \"classify_document_type\"\n      - \"validate_document_format\"\n\n  financial_calculations:\n    host: \"localhost\"\n    port: 8012\n    tools:\n      - \"calculate_debt_to_income_ratio\"\n      - \"calculate_loan_affordability\"\n      - \"analyze_income_stability\"\n</code></pre></p> <p>Business Tool Integration: Agents access MCP servers based on their business role - Credit Agent uses verification tools, Income Agent uses employment services, Risk Agent synthesizes all data.</p>"},{"location":"reference/legacy/agent-patterns/#business-workflow-examples","title":"Business Workflow Examples","text":""},{"location":"reference/legacy/agent-patterns/#loan-processing-workflow","title":"Loan Processing Workflow","text":"<pre><code>from loan_processing.utils import ConfigurationLoader, PersonaLoader\nfrom loan_processing.models import LoanApplication, LoanDecision\n\nclass LoanProcessingWorkflow:\n    def __init__(self):\n        self.config = ConfigurationLoader.load_config()\n        self.personas = {\n            agent_name: PersonaLoader.load_persona(agent_name)\n            for agent_name in self.config['agent_personas'].keys()\n        }\n\n    def get_agent_capabilities(self, agent_name: str) -&gt; dict:\n        \"\"\"Get agent's business capabilities and tool access\"\"\"\n        agent_config = self.config['agent_personas'][agent_name]\n        return {\n            'description': agent_config['description'],\n            'mcp_servers': agent_config['mcp_servers'],\n            'capabilities': agent_config.get('capabilities', []),\n            'persona_length': len(self.personas[agent_name].split('\\n'))\n        }\n\n    def process_application(self, application: LoanApplication) -&gt; dict:\n        \"\"\"Process loan application through business workflow\"\"\"\n        workflow = {\n            'application_id': application.application_id,\n            'agents_involved': [],\n            'assessments': {},\n            'business_logic': {}\n        }\n\n        # Each agent has specific business role\n        for agent_name in [\"intake\", \"credit\", \"income\", \"risk\"]:\n            capabilities = self.get_agent_capabilities(agent_name)\n            workflow['agents_involved'].append({\n                'name': agent_name,\n                'role': capabilities['description'],\n                'tools': capabilities['mcp_servers']\n            })\n\n        return workflow\n</code></pre>"},{"location":"reference/legacy/agent-patterns/#benefits-of-business-logic-foundation","title":"Benefits of Business Logic Foundation","text":"<ul> <li>Domain Expertise: Each agent contains specialized loan processing knowledge</li> <li>Customer-Focused: Agents designed around customer jobs-to-be-done</li> <li>Business Maintainable: Domain experts can modify agent personas directly</li> <li>Regulatory Compliant: Built-in audit trails and decision transparency</li> <li>Scalable: Add new agents or capabilities without changing existing business logic</li> <li>Cost Effective: Reduces processing time from days to minutes</li> <li>Quality Consistent: Standardized evaluation criteria across all applications</li> </ul>"},{"location":"reference/legacy/agent-patterns/#progressive-enhancement-strategy","title":"Progressive Enhancement Strategy","text":"<p>Our multi-agent architecture enables progressive enhancement without refactoring:</p> <p>Current State (3 MCP Servers): - Application verification - Document processing - Financial calculations</p> <p>Planned Expansion (20+ MCP Servers):</p> <p>Enhanced Intake Capabilities: - Document OCR and fraud detection - Application deduplication - Public records enrichment - Real-time identity verification</p> <p>Advanced Credit Assessment: - Multiple credit bureau APIs - Alternative credit data sources - International credit databases - ML-based credit scoring</p> <p>Comprehensive Income Verification: - Payroll service integrations - Tax transcript APIs - Bank account aggregation - Gig economy platform APIs</p> <p>Sophisticated Risk Management: - Advanced risk scoring models - Regulatory compliance automation - Property valuation services - Insurance verification</p> <p>Key Benefit: Agents evolve independently - Credit Agent can add new capabilities while Income Agent remains unchanged.</p>"},{"location":"reference/legacy/agent-patterns/#implementation-files","title":"Implementation Files","text":"<p>Business Logic Foundation: - Agent Personas: <code>loan_processing/agents/agent-persona/</code> - Domain expertise in markdown - Agent Configuration: <code>loan_processing/config/agents.yaml</code> - Simple persona mappings - MCP Configuration: <code>loan_processing/config/mcp_servers.yaml</code> - Tool server definitions - Data Models: <code>loan_processing/models/</code> - Type-safe business models - Utilities: <code>loan_processing/utils/</code> - Configuration and persona loading</p> <p>Tool Implementation: - MCP Servers: <code>loan_processing/tools/mcp_servers/</code> - Business capability servers - Business Services: <code>loan_processing/tools/services/</code> - Core business logic</p> <p>Documentation: - Agent Strategy: <code>docs/agent-strategy.md</code> - Configuration-driven architecture - Jobs-to-be-Done: <code>docs/jobs-to-be-done.md</code> - Customer-centric design principles - Business Case: <code>docs/business-case.md</code> - ROI and implementation strategy</p> <p>This foundation provides all the business logic needed for loan processing automation.</p>"},{"location":"reference/legacy/ai-augmented-workflow-comparison/","title":"AI-Augmented Development Workflow: Revolutionary Transformation","text":"<p>Breakthrough: From traditional 8-12 person multi-disciplinary teams to single developer + AI agent orchestration, achieving 10x productivity with superior quality through intelligent human-AI collaboration.</p>"},{"location":"reference/legacy/ai-augmented-workflow-comparison/#executive-summary","title":"Executive Summary","text":"<p>This document analyzes the transformative development workflow employed in the Loan Avengers project, where one developer orchestrates multiple specialized AI agents to achieve productivity and quality traditionally requiring a full enterprise development team. Based on actual repository data and development patterns, this represents a fundamental paradigm shift in software engineering.</p>"},{"location":"reference/legacy/ai-augmented-workflow-comparison/#key-evidence-based-results","title":"Key Evidence-Based Results","text":"<ul> <li>10x faster development cycles (hours vs weeks)</li> <li>90% team size reduction (1 person + AI vs 8-12 specialists)  </li> <li>Superior code quality through multi-layer AI review</li> <li>Perfect documentation synchronization across platforms</li> <li>Rapid design iteration unconstrained by human labor costs</li> </ul>"},{"location":"reference/legacy/ai-augmented-workflow-comparison/#traditional-vs-ai-augmented-team-architecture","title":"Traditional vs AI-Augmented Team Architecture","text":""},{"location":"reference/legacy/ai-augmented-workflow-comparison/#traditional-multi-disciplinary-team-8-12-people","title":"Traditional Multi-Disciplinary Team (8-12 People)","text":"<pre><code>graph TD\n    %% Traditional Team Structure\n    PM[Product Manager&lt;br/&gt;Requirements &amp; Strategy] --&gt; BA[Business Analyst&lt;br/&gt;Specs &amp; User Stories]\n    PM --&gt; UIUX[UI/UX Designer&lt;br/&gt;User Experience]\n\n    BA --&gt; ARCH[Solution Architect&lt;br/&gt;System Design]\n    UIUX --&gt; ARCH\n\n    ARCH --&gt; FE[Frontend Developer&lt;br/&gt;React/TypeScript]\n    ARCH --&gt; BE[Backend Developer&lt;br/&gt;Python/APIs]  \n    ARCH --&gt; DBA[Database Developer&lt;br/&gt;Schema &amp; Queries]\n\n    FE --&gt; QA1[QA Engineer&lt;br/&gt;Testing &amp; Validation]\n    BE --&gt; QA1\n    DBA --&gt; QA1\n\n    QA1 --&gt; DevOps[DevOps Engineer&lt;br/&gt;CI/CD &amp; Deployment]\n    DevOps --&gt; TW[Technical Writer&lt;br/&gt;Documentation]\n\n    %% Communication overhead\n    PM -.-&gt; FE\n    PM -.-&gt; BE\n    BA -.-&gt; QA1\n    ARCH -.-&gt; DevOps\n\n    classDef human fill:#ffcccc,stroke:#cc0000,stroke-width:2px\n    class PM,BA,ARCH,FE,BE,DBA,QA1,DevOps,TW,UIUX human</code></pre> <p>Traditional Team Characteristics: - Sequential Dependencies: Each role blocks others - Communication Overhead: 15+ daily interactions - Resource Constraints: Limited by headcount - Context Switching: Knowledge silos between specialists - Slow Iteration: Weeks for design \u2192 development \u2192 testing - High Costs: $1.2M+ annual salaries for senior team</p>"},{"location":"reference/legacy/ai-augmented-workflow-comparison/#ai-augmented-single-developer-agent-orchestra","title":"AI-Augmented Single Developer + Agent Orchestra","text":"<pre><code>graph TD\n    %% Human Orchestrator\n    DEV[Human Developer&lt;br/&gt;Strategic Orchestrator&lt;br/&gt;Architecture Decisions] \n\n    %% AI Agent Ecosystem\n    DEV --&gt; IDEATE{Ideation Phase}\n    DEV --&gt; SPECS{Specification Phase}  \n    DEV --&gt; PARALLEL{Parallel Development}\n    DEV --&gt; REVIEW{Review &amp; Integration}\n\n    %% Phase 1: Ideation &amp; Research\n    IDEATE --&gt; RESEARCH[Claude Research Agent&lt;br/&gt;Market Analysis &amp; Intelligence]\n    IDEATE --&gt; PMADV[Product Manager Advisor&lt;br/&gt;Requirements &amp; User Stories]\n    IDEATE --&gt; ARCHREV[System Architecture Reviewer&lt;br/&gt;Design Validation]\n\n    %% Phase 2: Specifications\n    SPECS --&gt; SPECKIT[Spec-Kit Tools&lt;br/&gt;Automated Specification]\n    SPECS --&gt; DOCAGENT[Documentation Agent&lt;br/&gt;Living Specs &amp; ADRs]\n\n    %% Phase 3: Parallel Development (Fan-Out)\n    PARALLEL --&gt; CRITICAL[Critical Path&lt;br/&gt;Human + Claude/Copilot&lt;br/&gt;Core Business Logic]\n    PARALLEL --&gt; UIAGENT[UI Agent&lt;br/&gt;React Components &amp; Styling]\n    PARALLEL --&gt; LOGGER[Logger Agent&lt;br/&gt;Observability Infrastructure]\n    PARALLEL --&gt; TESTAGENT[Testing Agent&lt;br/&gt;Unit &amp; Integration Tests]\n    PARALLEL --&gt; INFRA[Infrastructure Agent&lt;br/&gt;DevOps &amp; Deployment]\n\n    %% Phase 4: Review &amp; Quality\n    REVIEW --&gt; CODEREV[Code Reviewer Agent&lt;br/&gt;Technical Validation]\n    REVIEW --&gt; UXREV[UX Designer Agent&lt;br/&gt;Experience Validation]  \n    REVIEW --&gt; GITOPS[GitOps CI Specialist&lt;br/&gt;Pipeline Optimization]\n    REVIEW --&gt; SYNC[Agent Sync Coordinator&lt;br/&gt;Cross-Platform Consistency]\n\n    %% Continuous feedback loops\n    CODEREV --&gt; DEV\n    UXREV --&gt; DEV\n    PMADV --&gt; DEV\n    ARCHREV --&gt; DEV\n\n    classDef human fill:#ccffcc,stroke:#00cc00,stroke-width:3px\n    classDef ai fill:#ccccff,stroke:#0000cc,stroke-width:2px\n    classDef critical fill:#ffeecc,stroke:#ff8800,stroke-width:2px\n\n    class DEV human\n    class RESEARCH,PMADV,ARCHREV,SPECKIT,DOCAGENT,UIAGENT,LOGGER,TESTAGENT,INFRA,CODEREV,UXREV,GITOPS,SYNC ai\n    class CRITICAL critical</code></pre> <p>AI-Augmented Characteristics: - Parallel Execution: Multiple agents working simultaneously - Instant Communication: No human-to-human coordination overhead - Unlimited Scaling: Add new agents without headcount - Context Preservation: Perfect knowledge sharing between agents - Rapid Iteration: Hours for complete development cycles - Cost Efficiency: $150K developer + $2K AI tools vs $1.2M+ team</p>"},{"location":"reference/legacy/ai-augmented-workflow-comparison/#detailed-workflow-analysis","title":"Detailed Workflow Analysis","text":""},{"location":"reference/legacy/ai-augmented-workflow-comparison/#phase-1-ideation-conceptualization","title":"Phase 1: Ideation &amp; Conceptualization","text":""},{"location":"reference/legacy/ai-augmented-workflow-comparison/#traditional-approach-3-4-weeks","title":"Traditional Approach (3-4 Weeks)","text":"<pre><code>sequenceDiagram\n    participant PM as Product Manager\n    participant BA as Business Analyst\n    participant Research as Market Research\n    participant ARCH as Solution Architect\n\n    Note over PM,ARCH: Sequential Knowledge Building (3-4 weeks)\n\n    PM-&gt;&gt;Research: Commission market study\n    Research--&gt;&gt;PM: Report (1-2 weeks)\n\n    PM-&gt;&gt;BA: Define requirements\n    BA-&gt;&gt;BA: Create user stories (3-5 days)\n    BA--&gt;&gt;PM: Requirements doc\n\n    PM-&gt;&gt;ARCH: Technical feasibility\n    ARCH-&gt;&gt;ARCH: Architecture design (1 week)\n    ARCH--&gt;&gt;PM: Technical specs\n\n    Note over PM,ARCH: 20+ meetings, 50+ emails</code></pre>"},{"location":"reference/legacy/ai-augmented-workflow-comparison/#ai-augmented-approach-2-4-hours","title":"AI-Augmented Approach (2-4 Hours)","text":"<pre><code>sequenceDiagram\n    participant DEV as Human Developer\n    participant RA as Research Agent\n    participant PM as PM Advisor Agent\n    participant ARCH as Architecture Reviewer\n\n    Note over DEV,ARCH: Parallel Intelligence Synthesis (2-4 hours)\n\n    DEV-&gt;&gt;RA: Market analysis request\n    DEV-&gt;&gt;PM: Business requirements validation\n    DEV-&gt;&gt;ARCH: Architecture consultation\n\n    par Parallel Agent Work\n        RA--&gt;&gt;DEV: Competitive intelligence (10 min)\n    and\n        PM--&gt;&gt;DEV: User stories + acceptance criteria (15 min)\n    and  \n        ARCH--&gt;&gt;DEV: Design validation + recommendations (20 min)\n    end\n\n    DEV-&gt;&gt;DEV: Strategic synthesis + decision\n    Note over DEV: Single decision-maker, no meetings</code></pre> <p>Evidence from Repository: - 9 ADRs created in rapid succession documenting architectural decisions - Cross-platform agent synchronization (CLAUDE.md \u2192 GitHub Copilot \u2192 Cursor) - Issue templates automatically generated by product-manager-advisor agent</p>"},{"location":"reference/legacy/ai-augmented-workflow-comparison/#phase-2-specification-documentation","title":"Phase 2: Specification &amp; Documentation","text":""},{"location":"reference/legacy/ai-augmented-workflow-comparison/#traditional-approach-2-3-weeks","title":"Traditional Approach (2-3 Weeks)","text":"<pre><code>flowchart TD\n    A[Product Manager&lt;br/&gt;Initial Requirements] --&gt; B[Technical Writer&lt;br/&gt;Documentation Draft]\n    B --&gt; C[Solution Architect&lt;br/&gt;Technical Review]\n    C --&gt; D[Dev Lead&lt;br/&gt;Implementation Planning]\n    D --&gt; E[Back to PM&lt;br/&gt;Clarification Cycle]\n    E --&gt; B\n\n    F[Outdated by Implementation&lt;br/&gt;Documentation Debt]\n    D --&gt; F\n\n    classDef problem fill:#ffcccc,stroke:#cc0000\n    class F problem</code></pre>"},{"location":"reference/legacy/ai-augmented-workflow-comparison/#ai-augmented-approach-30-60-minutes","title":"AI-Augmented Approach (30-60 Minutes)","text":"<pre><code>flowchart TD\n    A[Human Strategy&lt;br/&gt;High-Level Direction] --&gt; B[Spec-Kit Tools&lt;br/&gt;Automated Generation]\n    B --&gt; C[Documentation Agent&lt;br/&gt;Living Specifications]\n    C --&gt; D[Architecture Reviewer&lt;br/&gt;Validation &amp; Enhancement]\n    D --&gt; E[Agent Sync Coordinator&lt;br/&gt;Platform Consistency]\n    E --&gt; F[Always Current Documentation&lt;br/&gt;Self-Maintaining]\n\n    G[Code Changes] --&gt; C\n    H[New Decisions] --&gt; C\n\n    classDef success fill:#ccffcc,stroke:#00cc00\n    class F success</code></pre> <p>Evidence from Repository: - Living documentation: CLAUDE.md automatically syncs to GitHub Copilot instructions - Agent-maintained consistency: agent-sync-coordinator ensures cross-platform alignment - Real-time updates: Documentation stays current with code changes</p>"},{"location":"reference/legacy/ai-augmented-workflow-comparison/#phase-3-parallel-development-fan-out-architecture","title":"Phase 3: Parallel Development (Fan-Out Architecture)","text":"<p>This is where the revolutionary productivity gains occur.</p>"},{"location":"reference/legacy/ai-augmented-workflow-comparison/#traditional-sequential-development-8-12-weeks","title":"Traditional Sequential Development (8-12 Weeks)","text":"<pre><code>gantt\n    title Traditional Development Timeline\n    dateFormat  YYYY-MM-DD\n    section Backend\n    API Development     :done, api, 2024-01-01, 2024-01-28\n    Database Schema     :done, db, 2024-01-15, 2024-02-05\n    section Frontend  \n    UI Components       :active, ui, 2024-02-05, 2024-03-05\n    Integration         :integration, 2024-03-05, 2024-03-15\n    section Testing\n    Unit Tests          :testing, 2024-03-15, 2024-03-25\n    Integration Tests   :int-test, 2024-03-25, 2024-04-05\n    section DevOps\n    CI/CD Setup         :devops, 2024-04-05, 2024-04-15\n    section Documentation\n    Technical Docs      :docs, 2024-04-15, 2024-04-25</code></pre>"},{"location":"reference/legacy/ai-augmented-workflow-comparison/#ai-augmented-parallel-development-2-3-days","title":"AI-Augmented Parallel Development (2-3 Days)","text":"<pre><code>gantt\n    title AI-Augmented Development Timeline  \n    dateFormat  YYYY-MM-DD\n    section Critical Path (Human + AI)\n    Core Business Logic :done, critical, 2024-01-01, 2024-01-02\n    section Parallel AI Agents\n    UI Components       :done, ui-agent, 2024-01-01, 2024-01-02\n    Backend APIs        :done, api-agent, 2024-01-01, 2024-01-02\n    Unit Tests          :done, test-agent, 2024-01-01, 2024-01-02\n    Infrastructure      :done, infra-agent, 2024-01-01, 2024-01-02\n    Documentation       :done, doc-agent, 2024-01-01, 2024-01-02\n    section Integration\n    Human Review        :review, 2024-01-02, 2024-01-03\n    AI Quality Gates    :quality, 2024-01-02, 2024-01-03</code></pre> <p>Evidence from Repository: - PR #16: Complete React/TypeScript frontend created by GitHub Copilot agent - PR #9: Backend MCP architecture + Pydantic models simultaneously  - PR #10: Comprehensive testing (45 test cases) generated in parallel - PR #48: Cross-platform documentation synchronization automated</p>"},{"location":"reference/legacy/ai-augmented-workflow-comparison/#phase-4-review-quality-assurance","title":"Phase 4: Review &amp; Quality Assurance","text":""},{"location":"reference/legacy/ai-augmented-workflow-comparison/#traditional-multi-stage-review-1-2-weeks","title":"Traditional Multi-Stage Review (1-2 Weeks)","text":"<pre><code>sequenceDiagram\n    participant DEV as Developer\n    participant SR as Senior Developer\n    participant ARCH as Architect  \n    participant QA as QA Engineer\n    participant PM as Product Manager\n\n    Note over DEV,PM: Sequential Review Gates (1-2 weeks)\n\n    DEV-&gt;&gt;SR: Code review request\n    Note over SR: Manual code inspection (2-3 days)\n    SR--&gt;&gt;DEV: Feedback + rework\n\n    DEV-&gt;&gt;ARCH: Architecture review\n    Note over ARCH: Design validation (1-2 days)\n    ARCH--&gt;&gt;DEV: Architectural feedback\n\n    DEV-&gt;&gt;QA: Functional testing\n    Note over QA: Manual testing (3-5 days)\n    QA--&gt;&gt;DEV: Bug reports + fixes\n\n    DEV-&gt;&gt;PM: Business validation\n    Note over PM: Requirements check (1-2 days)\n    PM--&gt;&gt;DEV: Business feedback\n\n    Note over DEV,PM: 4-6 iteration cycles typical</code></pre>"},{"location":"reference/legacy/ai-augmented-workflow-comparison/#ai-augmented-multi-layer-review-2-4-hours","title":"AI-Augmented Multi-Layer Review (2-4 Hours)","text":"<pre><code>sequenceDiagram\n    participant DEV as Human Developer\n    participant CR as Code Reviewer Agent\n    participant AR as Architecture Reviewer  \n    participant UX as UX Designer Agent\n    participant CI as GitOps CI Specialist\n\n    Note over DEV,CI: Parallel AI Review (2-4 hours)\n\n    DEV-&gt;&gt;CR: Code review request\n    DEV-&gt;&gt;AR: Architecture validation\n    DEV-&gt;&gt;UX: UX/UI review\n    DEV-&gt;&gt;CI: Pipeline optimization\n\n    par Parallel AI Analysis\n        CR--&gt;&gt;DEV: Code quality report (5 min)\n    and\n        AR--&gt;&gt;DEV: Architecture assessment (10 min)  \n    and\n        UX--&gt;&gt;DEV: UX improvements (15 min)\n    and\n        CI--&gt;&gt;DEV: Pipeline recommendations (5 min)\n    end\n\n    DEV-&gt;&gt;DEV: Strategic review + final decisions\n    Note over DEV: Single integration point</code></pre> <p>Evidence from Repository: - PR #9 Review Comments: 11 detailed technical review comments from GitHub Copilot agent - Multi-layer validation: Code quality + architecture + UX + CI/CD feedback - Rapid iteration: Issues identified and fixed within hours, not days</p>"},{"location":"reference/legacy/ai-augmented-workflow-comparison/#quantitative-impact-analysis","title":"Quantitative Impact Analysis","text":""},{"location":"reference/legacy/ai-augmented-workflow-comparison/#development-velocity-comparison","title":"Development Velocity Comparison","text":"Metric Traditional Team AI-Augmented Improvement Feature Concept \u2192 Production 8-12 weeks 3-5 days 20x faster Code Review Cycle 3-5 days 2-4 hours 18x faster Documentation Updates 1-2 weeks (often skipped) Real-time Continuous Testing Coverage 60-70% (time constraints) 85%+ (automated) 25% better Bug Fix Deployment 2-3 days 2-4 hours 12x faster Architecture Changes Weeks (high cost) Hours (low cost) 50x cheaper"},{"location":"reference/legacy/ai-augmented-workflow-comparison/#quality-metrics","title":"Quality Metrics","text":"Aspect Traditional AI-Augmented Evidence Code Coverage Variable (60-80%) Consistent (85%+) PR #10: 54 comprehensive test cases Documentation Quality Often outdated Always current Agent-sync-coordinator maintains consistency Architecture Consistency Manual enforcement Automated validation System-architecture-reviewer on every change Cross-Platform Sync Manual, error-prone Automated, perfect CLAUDE.md \u2192 Copilot \u2192 Cursor synchronization"},{"location":"reference/legacy/ai-augmented-workflow-comparison/#economic-impact","title":"Economic Impact","text":""},{"location":"reference/legacy/ai-augmented-workflow-comparison/#traditional-team-annual-costs-san-francisco-market","title":"Traditional Team Annual Costs (San Francisco Market)","text":"<pre><code>pie title Traditional Team Costs ($1.2M+ annually)\n    \"Product Manager\" : 200\n    \"Solution Architect\" : 250  \n    \"Senior Frontend Dev\" : 180\n    \"Senior Backend Dev\" : 180\n    \"QA Engineer\" : 150\n    \"DevOps Engineer\" : 170\n    \"UI/UX Designer\" : 160\n    \"Technical Writer\" : 120</code></pre>"},{"location":"reference/legacy/ai-augmented-workflow-comparison/#ai-augmented-costs-152k-annually","title":"AI-Augmented Costs ($152K annually)","text":"<pre><code>pie title AI-Augmented Costs ($152K annually)\n    \"Senior Developer\" : 150\n    \"AI Tools &amp; Services\" : 2</code></pre> <p>Cost Reduction: 87% savings ($1.048M annually)</p>"},{"location":"reference/legacy/ai-augmented-workflow-comparison/#revolutionary-changes-in-development-philosophy","title":"Revolutionary Changes in Development Philosophy","text":""},{"location":"reference/legacy/ai-augmented-workflow-comparison/#1-refactoring-economics","title":"1. Refactoring Economics","text":"<p>Traditional Mindset: \"Refactoring is expensive, avoid it\" - Weeks of human labor for architectural changes - High coordination costs across team - Risk of introducing bugs with manual changes</p> <p>AI-Augmented Reality: \"Refactoring is cheap, embrace it\" - Hours of AI labor + human strategic direction - Perfect coordination through agent orchestration - Comprehensive test coverage prevents regressions</p> <p>Evidence: Repository shows multiple architectural refactorings in rapid succession (PR #9 \u2192 #10 \u2192 #16)</p>"},{"location":"reference/legacy/ai-augmented-workflow-comparison/#2-documentation-strategy","title":"2. Documentation Strategy","text":"<p>Traditional Problem: \"Documentation lags behind code\" - Manual maintenance burden - Becomes outdated quickly - Different formats across tools</p> <p>AI-Augmented Solution: \"Documentation enables agent autonomy\" - Living, self-maintaining documentation - Cross-platform synchronization - Documentation quality directly correlates with agent effectiveness</p> <p>Evidence: agent-sync-coordinator maintains consistency across CLAUDE.md, GitHub Copilot, and Cursor instructions</p>"},{"location":"reference/legacy/ai-augmented-workflow-comparison/#3-quality-assurance-philosophy","title":"3. Quality Assurance Philosophy","text":"<p>Traditional Bottleneck: \"QA at the end\" - Sequential testing after development - Manual test case creation - Limited coverage due to time constraints</p> <p>AI-Augmented Advantage: \"Quality built-in continuously\" - Parallel test generation during development - Multi-layer AI review before human validation - Comprehensive coverage as standard practice</p> <p>Evidence: PR #10 shows 45 comprehensive test cases generated alongside feature development</p>"},{"location":"reference/legacy/ai-augmented-workflow-comparison/#agent-specialization-analysis","title":"Agent Specialization Analysis","text":"<p>Based on repository evidence, here's how AI agents are specialized:</p>"},{"location":"reference/legacy/ai-augmented-workflow-comparison/#core-development-agents","title":"Core Development Agents","text":"<pre><code>mindmap\n  root((AI Agent Ecosystem))\n    Strategic\n      Product Manager Advisor\n        Requirements Analysis\n        Issue Template Generation\n        Business Value Assessment\n      System Architecture Reviewer  \n        Design Validation\n        Impact Analysis\n        Technology Recommendations\n    Implementation\n      Code Implementation\n        Claude Code Agent\n        GitHub Copilot Agent\n        Critical Business Logic\n      UI/UX Development\n        UI Agent (Copilot)\n        Component Generation\n        Design System Compliance\n    Quality Assurance\n      Code Reviewer Agent\n        Technical Validation\n        Best Practice Enforcement\n        Pattern Compliance\n      Testing Agent\n        Unit Test Generation\n        Coverage Analysis\n        Edge Case Detection\n    Operations\n      GitOps CI Specialist\n        Pipeline Optimization\n        Deployment Automation\n        Performance Monitoring\n      Agent Sync Coordinator\n        Cross-Platform Consistency\n        Documentation Synchronization\n        Instruction Alignment</code></pre>"},{"location":"reference/legacy/ai-augmented-workflow-comparison/#agent-performance-evidence","title":"Agent Performance Evidence","text":"Agent Type Repository Evidence Capability Demonstrated Product Manager Advisor Issue templates in PR #48 Requirements \u2192 GitHub Issues System Architecture Reviewer 9 ADRs created Design validation + documentation Code Reviewer Agent 11 comments on PR #9 Technical review + suggestions UI Agent (Copilot) Complete frontend in PR #16 Full React/TypeScript application Testing Agent 54 test cases in PR #10 Comprehensive test coverage Agent Sync Coordinator Cross-platform consistency CLAUDE.md \u2192 Copilot \u2192 Cursor sync"},{"location":"reference/legacy/ai-augmented-workflow-comparison/#scaling-considerations-future-evolution","title":"Scaling Considerations &amp; Future Evolution","text":""},{"location":"reference/legacy/ai-augmented-workflow-comparison/#current-limitations","title":"Current Limitations","text":"<ol> <li>Agent Orchestration Complexity: Managing 6+ specialized agents requires clear boundaries</li> <li>Context Management: Maintaining coherent system understanding across agents</li> <li>Quality Control: Human oversight remains critical for strategic decisions</li> <li>Technology Evolution: Rapidly improving AI capabilities require workflow adaptation</li> </ol>"},{"location":"reference/legacy/ai-augmented-workflow-comparison/#next-generation-capabilities-6-12-months","title":"Next-Generation Capabilities (6-12 months)","text":"<pre><code>flowchart LR\n    A[Current State&lt;br/&gt;6 Specialized Agents] --&gt; B[Enhanced Agents&lt;br/&gt;12+ Specialized Agents]\n    B --&gt; C[Autonomous Orchestration&lt;br/&gt;Agent-to-Agent Communication]\n    C --&gt; D[Predictive Development&lt;br/&gt;Anticipate Requirements]\n    D --&gt; E[Cross-Project Learning&lt;br/&gt;Knowledge Transfer]\n\n    A1[Human Strategic Control] --&gt; B1[Human + AI Co-Planning] \n    B1 --&gt; C1[AI Strategic Recommendations]\n    C1 --&gt; D1[AI-Driven Architecture]\n    D1 --&gt; E1[Self-Optimizing Systems]</code></pre>"},{"location":"reference/legacy/ai-augmented-workflow-comparison/#scalability-evidence","title":"Scalability Evidence","text":"<p>The repository demonstrates linear scalability: - Adding new agents: No coordination overhead - Parallel execution: Unlimited by human constraints - Knowledge preservation: Perfect documentation maintains context - Quality consistency: Automated standards enforcement</p>"},{"location":"reference/legacy/ai-augmented-workflow-comparison/#implementation-recommendations","title":"Implementation Recommendations","text":""},{"location":"reference/legacy/ai-augmented-workflow-comparison/#for-organizations-adopting-this-approach","title":"For Organizations Adopting This Approach","text":""},{"location":"reference/legacy/ai-augmented-workflow-comparison/#phase-1-foundation-weeks-1-4","title":"Phase 1: Foundation (Weeks 1-4)","text":"<ol> <li>Identify Power Developer: Senior developer comfortable with AI orchestration</li> <li>Establish Documentation Standards: High-quality specs enable agent autonomy</li> <li>Implement Quality Gates: Automated checks before human review</li> <li>Create Agent Ecosystem: Start with 3-4 specialized agents</li> </ol>"},{"location":"reference/legacy/ai-augmented-workflow-comparison/#phase-2-expansion-weeks-5-12","title":"Phase 2: Expansion (Weeks 5-12)","text":"<ol> <li>Add Specialized Agents: Based on development needs</li> <li>Optimize Workflows: Eliminate human bottlenecks</li> <li>Scale Documentation: Living docs that enable agent independence</li> <li>Measure &amp; Iterate: Track velocity and quality improvements</li> </ol>"},{"location":"reference/legacy/ai-augmented-workflow-comparison/#phase-3-mastery-months-3-6","title":"Phase 3: Mastery (Months 3-6)","text":"<ol> <li>Advanced Orchestration: Complex multi-agent workflows</li> <li>Predictive Capabilities: Agents anticipate requirements</li> <li>Cross-Project Learning: Agent knowledge transfer</li> <li>Full Automation: Minimal human intervention for routine work</li> </ol>"},{"location":"reference/legacy/ai-augmented-workflow-comparison/#success-factors","title":"Success Factors","text":"<ol> <li>Documentation Quality: Directly enables agent autonomy</li> <li>Clear Boundaries: Human strategic, AI execution</li> <li>Rapid Feedback Loops: Continuous improvement cycles</li> <li>Quality Culture: Never compromise standards for speed</li> <li>Tool Integration: Seamless agent-to-tool communication</li> </ol>"},{"location":"reference/legacy/ai-augmented-workflow-comparison/#conclusion","title":"Conclusion","text":"<p>The AI-augmented development workflow represents the future of software engineering. By maintaining human strategic control while leveraging AI parallel execution, this approach achieves:</p> <ul> <li>Unprecedented productivity without quality compromise</li> <li>Economic efficiency at 87% cost reduction</li> <li>Rapid innovation cycles enabling market leadership</li> <li>Scalable development unconstrained by human limitations</li> <li>Higher job satisfaction focusing humans on creative, strategic work</li> </ul>"},{"location":"reference/legacy/ai-augmented-workflow-comparison/#key-insight-documentation-as-foundation","title":"Key Insight: Documentation as Foundation","text":"<p>The critical breakthrough is recognizing that documentation becomes the foundation for AI autonomy. The better specifications and architectural decisions are documented, the more independently agents can operate, creating a virtuous cycle of increasing productivity and quality.</p>"},{"location":"reference/legacy/ai-augmented-workflow-comparison/#transformative-impact","title":"Transformative Impact","text":"<p>This isn't incremental improvement\u2014it's transformative change comparable to: - Assembly lines in manufacturing - Spreadsheets in business analysis - IDEs in software development - Cloud computing in infrastructure</p> <p>The Loan Avengers project serves as proof that enterprise-grade systems can be built using this approach, fundamentally changing how we think about software development team structure and capability.</p> <p>Repository Evidence Sources: - 72 PRs analyzed for workflow patterns - 9 ADRs documenting architectural decisions - 6 specialized AI agents (<code>.claude/agents/</code>, <code>.github/chatmodes/</code>) - Cross-platform synchronization system - Comprehensive test coverage (85%+) - Living documentation maintenance - Multi-layer AI review processes</p> <p>This analysis is based on actual repository data from the Loan Avengers project, demonstrating real-world implementation of AI-augmented development workflows.</p>"},{"location":"reference/legacy/microsoft-agent-framework-types/","title":"Microsoft Agent Framework Architecture Deep Dive","text":""},{"location":"reference/legacy/microsoft-agent-framework-types/#overview","title":"Overview","text":"<p>The Microsoft Agent Framework provides a comprehensive architecture for building enterprise multi-agent AI applications. This document explains the core components, their underlying protocols, architectural patterns, and practical usage for our loan processing system.</p>"},{"location":"reference/legacy/microsoft-agent-framework-types/#architectural-philosophy","title":"Architectural Philosophy","text":"<p>The framework follows several key design principles:</p> <ol> <li>Protocol-Driven Design: Uses protocols/interfaces for type safety and extensibility</li> <li>Composition Over Inheritance: Agents are composed of chat clients, tools, and middleware</li> <li>Async-First: Built for high-performance async operations</li> <li>Pydantic-Based: Leverages Pydantic v2 for data validation and serialization</li> <li>Pregel-Like Workflows: Graph-based execution model inspired by Google's Pregel system</li> <li>MCP Native: First-class support for Model Context Protocol (MCP) servers</li> </ol>"},{"location":"reference/legacy/microsoft-agent-framework-types/#core-agent-architecture","title":"Core Agent Architecture","text":""},{"location":"reference/legacy/microsoft-agent-framework-types/#1-baseagent-foundation-layer","title":"1. BaseAgent - Foundation Layer","text":"<pre><code>from agent_framework import BaseAgent\n\nclass BaseAgent(AFBaseModel):\n    \"\"\"\n    Foundation class built on Pydantic v2 providing:\n\n    Core Fields:\n    - id: str - Unique agent identifier (auto-generated UUID)\n    - name: str | None - Human-readable agent name\n    - description: str | None - Agent purpose description\n    - context_providers: ContextProvider[] - Memory and context management\n    - middleware: AgentMiddleware[] - Execution pipeline interceptors\n\n    Architectural Benefits:\n    - Pydantic validation ensures type safety\n    - Immutable configuration prevents runtime issues\n    - Built-in serialization for persistence\n    - Event lifecycle hooks for observability\n    \"\"\"\n</code></pre> <p>Underlying Protocol: Pydantic BaseModel + Custom AFBaseModel extensions Usage Pattern: Extended by all concrete agent implementations Loan Processing Application: Base for all 5 loan processing agents</p>"},{"location":"reference/legacy/microsoft-agent-framework-types/#2-chatagent-primary-implementation","title":"2. ChatAgent - Primary Implementation","text":"<pre><code>from agent_framework import ChatAgent, ChatClientProtocol\n\nclass ChatAgent(BaseAgent):\n    \"\"\"\n    Primary agent implementation with extensive configuration:\n\n    Core Architecture:\n    - chat_client: ChatClientProtocol - Pluggable LLM integration\n    - instructions: str - System prompt/persona definition\n    - tools: ToolProtocol[] - Available functions and MCP servers\n    - middleware: Middleware[] - Pre/post processing pipeline\n\n    LLM Configuration (follows OpenAI API standard):\n    - temperature: float [0.0-2.0] - Response randomness\n    - max_tokens: int - Response length limit\n    - tool_choice: 'auto'|'required'|'none' - Tool usage control\n    - response_format: BaseModel - Structured output schema\n    - frequency_penalty: float - Repetition reduction\n    - presence_penalty: float - Topic diversity\n    - seed: int - Deterministic outputs\n    - stop: str[] - Custom stop sequences\n\n    Enterprise Features:\n    - metadata: dict - Custom tracking data\n    - user: str - User identification for logging\n    - store: bool - Conversation persistence toggle\n    \"\"\"\n\n    async def invoke(\n        self, \n        messages: List[ChatMessage],\n        context: AgentRunContext = None\n    ) -&gt; ChatResponse:\n        \"\"\"\n        Main agent execution method:\n        1. Apply middleware pre-processing\n        2. Add context from providers\n        3. Execute via chat client\n        4. Process tool calls if needed\n        5. Apply middleware post-processing\n        6. Return structured response\n        \"\"\"\n\n    async def run(\n        self,\n        messages: List[ChatMessage], \n        context: AgentRunContext = None\n    ) -&gt; AsyncIterator[AgentRunResponseUpdate]:\n        \"\"\"\n        Streaming execution method:\n        - Same pipeline as invoke()\n        - Yields incremental updates\n        - Supports real-time UI updates\n        \"\"\"\n</code></pre> <p>Underlying Protocol: AsyncIterator pattern + OpenAI-compatible API Usage Pattern: One agent per specialized domain (credit, income, risk, etc.) Loan Processing Application: Replace agent personas with ChatAgent instances</p>"},{"location":"reference/legacy/microsoft-agent-framework-types/#3-agentprotocol-type-safety-interface","title":"3. AgentProtocol - Type Safety Interface","text":"<pre><code>from typing import Protocol\nfrom agent_framework import AgentProtocol\n\nclass AgentProtocol(Protocol):\n    \"\"\"\n    Structural typing protocol ensuring agent compatibility:\n\n    Required Methods:\n    - invoke(messages, context) -&gt; ChatResponse\n    - run(messages, context) -&gt; AsyncIterator[AgentRunResponseUpdate]\n\n    Benefits:\n    - Static type checking with mypy/pyright\n    - Duck typing with compile-time safety\n    - Interface segregation principle\n    - Framework extensibility\n    \"\"\"\n</code></pre> <p>Underlying Protocol: Python structural typing (PEP 544) Usage Pattern: Type annotations and interface contracts Loan Processing Application: Ensures orchestrator can work with any agent implementation</p>"},{"location":"reference/legacy/microsoft-agent-framework-types/#4-workflowagent-orchestration-wrapper","title":"4. WorkflowAgent - Orchestration Wrapper","text":"<pre><code>from agent_framework import WorkflowAgent, Workflow\n\nclass WorkflowAgent(BaseAgent):\n    \"\"\"\n    Wraps a Workflow to expose it as a single Agent:\n\n    Architecture:\n    - workflow: Workflow - Graph-based execution engine\n    - Implements AgentProtocol interface\n    - Maps agent invoke() to workflow.run()\n    - Provides unified interface for complex orchestrations\n\n    Use Cases:\n    - Multi-agent coordination\n    - Complex decision trees\n    - Hierarchical agent compositions\n    - Loan processing pipeline orchestration\n    \"\"\"\n</code></pre> <p>Underlying Protocol: Facade pattern + Graph execution Usage Pattern: High-level orchestration of multiple specialized agents Loan Processing Application: Main orchestrator managing the 5-agent pipeline</p>"},{"location":"reference/legacy/microsoft-agent-framework-types/#agent-configuration-for-loan-processing","title":"Agent Configuration for Loan Processing","text":"<pre><code># Example: Credit Assessment Agent\ncredit_agent = ChatAgent(\n    chat_client=foundry_client,\n    name=\"Credit Assessment Agent\",\n    instructions=\"Analyze credit worthiness based on application data...\",\n    tools=[\n        credit_bureau_tool,\n        risk_calculation_tool,\n        alternative_data_tool\n    ],\n    temperature=0.1,  # Lower temperature for consistent decisions\n    tool_choice=\"auto\",\n    metadata={\"agent_type\": \"credit\", \"version\": \"1.0\"}\n)\n</code></pre>"},{"location":"reference/legacy/microsoft-agent-framework-types/#message-and-content-system","title":"Message and Content System","text":""},{"location":"reference/legacy/microsoft-agent-framework-types/#1-chatmessage-core-communication-unit","title":"1. ChatMessage - Core Communication Unit","text":"<pre><code>from agent_framework import ChatMessage, Role, Contents\n\nclass ChatMessage:\n    \"\"\"\n    OpenAI-compatible message structure with multi-content support:\n\n    Fields:\n    - role: Role - Message originator (USER, ASSISTANT, SYSTEM, TOOL)\n    - contents: List[BaseContent] - Multiple content items per message\n    - metadata: dict - Custom tracking data\n\n    Advanced Features:\n    - Multi-modal content support\n    - Tool call/result embedding\n    - Streaming update compatibility\n    - Conversation threading\n    \"\"\"\n\n    # Example: Multi-content loan application message\n    loan_message = ChatMessage(\n        role=Role.USER,\n        contents=[\n            TextContent(text=\"Please assess this loan application:\"),\n            DataContent(data=pdf_bytes, mime_type=\"application/pdf\"),\n            TextContent(text=\"Applicant credit score: 720\")\n        ]\n    )\n</code></pre> <p>Underlying Protocol: OpenAI Messages API v1 + Extensions Usage Pattern: Immutable message objects in conversation chains Loan Processing Application: Carry application data, agent decisions, and tool results</p>"},{"location":"reference/legacy/microsoft-agent-framework-types/#2-role-system-message-attribution","title":"2. Role System - Message Attribution","text":"<pre><code>from agent_framework import Role\n\n# Built-in roles (Pydantic enum)\nRole.USER       # Human or system input\nRole.ASSISTANT  # Agent responses  \nRole.SYSTEM     # System instructions/context\nRole.TOOL       # Tool execution results\n\n# Loan processing role mapping:\n# USER -&gt; Loan application data, human queries\n# SYSTEM -&gt; Agent personas, regulatory context\n# ASSISTANT -&gt; Agent assessments and decisions\n# TOOL -&gt; Credit bureau data, document analysis results\n</code></pre> <p>Underlying Protocol: OpenAI role convention + Pydantic enum validation Usage Pattern: Message attribution and conversation flow control Loan Processing Application: Track data sources and maintain audit trails</p>"},{"location":"reference/legacy/microsoft-agent-framework-types/#3-content-types-rich-message-payloads","title":"3. Content Types - Rich Message Payloads","text":"<pre><code>from agent_framework import (\n    TextContent, DataContent, UriContent, \n    FunctionCallContent, FunctionResultContent, ErrorContent\n)\n\nclass TextContent:\n    \"\"\"Plain text content with optional annotations\"\"\"\n    text: str\n    type: Literal[\"text\"] = \"text\"\n\nclass DataContent:\n    \"\"\"Binary data with MIME type\"\"\"\n    data: bytes\n    mime_type: str\n    filename: str | None = None\n    type: Literal[\"data\"] = \"data\"\n\nclass FunctionCallContent:\n    \"\"\"Tool invocation request\"\"\"\n    function_name: str\n    call_id: str  # Unique call identifier\n    arguments: dict[str, Any]\n    type: Literal[\"function_call\"] = \"function_call\"\n\nclass FunctionResultContent:\n    \"\"\"Tool execution result\"\"\"\n    call_id: str  # Links to FunctionCallContent\n    result: str\n    type: Literal[\"function_result\"] = \"function_result\"\n\nclass ErrorContent:\n    \"\"\"Error information\"\"\"\n    error: str\n    code: str | None = None\n    type: Literal[\"error\"] = \"error\"\n</code></pre> <p>Underlying Protocol: MIME types + OpenAI function calling Usage Pattern: Type-safe content polymorphism Loan Processing Application: Handle documents, API responses, and structured data</p>"},{"location":"reference/legacy/microsoft-agent-framework-types/#4-chatresponse-execution-results","title":"4. ChatResponse - Execution Results","text":"<pre><code>from agent_framework import ChatResponse, FinishReason, UsageDetails\n\nclass ChatResponse:\n    \"\"\"\n    Complete agent execution result:\n\n    Fields:\n    - messages: List[ChatMessage] - Generated messages\n    - response_id: str - Unique response identifier\n    - usage: UsageDetails - Token consumption metrics\n    - finish_reason: FinishReason - Why execution completed\n    - metadata: dict - Custom response data\n\n    Finish Reasons:\n    - STOP: Natural completion\n    - LENGTH: Max tokens reached  \n    - TOOL_CALLS: Stopped for tool execution\n    - CONTENT_FILTER: Content policy triggered\n    \"\"\"\n</code></pre> <p>Underlying Protocol: OpenAI Completions API + Usage tracking Usage Pattern: Structured execution results with observability Loan Processing Application: Track agent decisions, token costs, and completion status</p>"},{"location":"reference/legacy/microsoft-agent-framework-types/#content-types-for-loan-data","title":"Content Types for Loan Data","text":"<pre><code>from agent_framework import TextContent, FunctionCallContent, DataContent\n\n# Text content - instructions and responses\ntext_content = TextContent(text=\"Analyze this loan application...\")\n\n# Function calls - tool invocations\nfunction_call = FunctionCallContent(\n    function_name=\"verify_credit_score\",\n    arguments={\"applicant_id\": \"12345\", \"bureau\": \"experian\"}\n)\n\n# Data content - documents and files\ndocument_content = DataContent(\n    data=pdf_bytes,\n    mime_type=\"application/pdf\",\n    filename=\"pay_stub.pdf\"\n)\n</code></pre>"},{"location":"reference/legacy/microsoft-agent-framework-types/#role-usage-in-loan-processing","title":"Role Usage in Loan Processing","text":"<pre><code># System message - agent instructions\nsystem_msg = ChatMessage(\n    role=Role.SYSTEM,\n    contents=[TextContent(text=\"You are a credit assessment agent...\")]\n)\n\n# User input - loan application data\nuser_msg = ChatMessage(\n    role=Role.USER, \n    contents=[TextContent(text=\"Please assess this application: {...}\")]\n)\n\n# Assistant response - agent decision\nassistant_msg = ChatMessage(\n    role=Role.ASSISTANT,\n    contents=[TextContent(text=\"Credit assessment complete. Score: 720...\")]\n)\n\n# Tool results - external data\ntool_msg = ChatMessage(\n    role=Role.TOOL,\n    contents=[TextContent(text=\"Credit bureau response: {...}\")]\n)\n</code></pre>"},{"location":"reference/legacy/microsoft-agent-framework-types/#tool-integration-system","title":"Tool Integration System","text":""},{"location":"reference/legacy/microsoft-agent-framework-types/#1-toolprotocol-universal-tool-interface","title":"1. ToolProtocol - Universal Tool Interface","text":"<pre><code>from agent_framework import ToolProtocol\nfrom typing import Protocol, runtime_checkable\n\n@runtime_checkable\nclass ToolProtocol(Protocol):\n    \"\"\"\n    Universal interface for all agent tools:\n\n    Required Attributes:\n    - name: str - Unique tool identifier\n    - description: str - What the tool does (for AI understanding)\n    - parameters: dict - JSON Schema for input validation\n\n    Required Methods:\n    - invoke(arguments: dict, context: InvocationContext) -&gt; Any\n\n    Optional Methods:\n    - validate_arguments(arguments: dict) -&gt; bool\n    - get_examples() -&gt; List[dict] - Usage examples for AI\n    - handle_error(error: Exception) -&gt; ErrorResponse\n\n    Benefits:\n    - Type-safe tool integration\n    - Automatic parameter validation\n    - Consistent error handling\n    - Tool composition and chaining\n    \"\"\"\n</code></pre> <p>Underlying Protocol: Python Protocol (PEP 544) + JSON Schema + OpenAI Function Calling Usage Pattern: Implement for custom tools, use built-in implementations for common cases Loan Processing Application: Credit bureau APIs, document processors, calculation engines</p>"},{"location":"reference/legacy/microsoft-agent-framework-types/#2-aifunction-decorated-function-tools","title":"2. AIFunction - Decorated Function Tools","text":"<pre><code>from agent_framework import ai_function, AIFunction\nfrom typing import Annotated\n\n@ai_function\ndef calculate_dti_ratio(\n    monthly_income: Annotated[float, \"Monthly gross income in dollars\"],\n    monthly_debt: Annotated[float, \"Total monthly debt payments in dollars\"]\n) -&gt; Annotated[float, \"Debt-to-income ratio as percentage\"]:\n    \"\"\"\n    Calculate debt-to-income ratio for loan qualification.\n\n    The DTI ratio is used to assess borrower's ability to repay.\n    Ratios above 43% typically require additional documentation.\n    \"\"\"\n    if monthly_income &lt;= 0:\n        raise ValueError(\"Monthly income must be positive\")\n\n    dti = (monthly_debt / monthly_income) * 100\n    return round(dti, 2)\n\n# Auto-generated AIFunction wrapper provides:\nclass AIFunction:\n    \"\"\"\n    Automatic function wrapper with AI integration:\n\n    Generated Features:\n    - name: str - Function name\n    - description: str - Docstring\n    - parameters: dict - JSON Schema from type hints\n    - invoke() method - Type-safe execution\n\n    Advanced Features:\n    - Automatic type conversion\n    - Parameter validation\n    - Error handling and retries\n    - Usage example generation\n    - Documentation extraction\n    \"\"\"\n</code></pre> <p>Underlying Protocol: Python decorators + Type introspection + JSON Schema generation Usage Pattern: Decorate business logic functions for AI use Loan Processing Application: Financial calculations, validation rules, business logic</p>"},{"location":"reference/legacy/microsoft-agent-framework-types/#3-mcp-model-context-protocol-integration","title":"3. MCP (Model Context Protocol) Integration","text":"<pre><code>from agent_framework import MCPStdioTool, MCPWebsocketTool, MCPStreamableHTTPTool\n\nclass MCPStdioTool:\n    \"\"\"\n    MCP Server via subprocess stdin/stdout communication:\n\n    Configuration:\n    - name: str - Tool identifier\n    - command: List[str] - Command and arguments to start server\n    - args: List[str] - Additional command line arguments\n    - env: dict - Environment variables\n    - cwd: str - Working directory\n    - timeout: float - Request timeout\n\n    Protocol Features:\n    - JSON-RPC 2.0 over stdio\n    - Automatic process lifecycle management\n    - Error recovery and restart\n    - Resource cleanup on shutdown\n\n    Example: Credit Bureau Integration\n    \"\"\"\n    credit_bureau_tool = MCPStdioTool(\n        name=\"credit_bureau\",\n        command=[\"python\", \"-m\", \"credit_bureau_mcp_server\"],\n        env={\n            \"API_KEY\": \"secret_key\",\n            \"ENDPOINT\": \"https://api.creditbureau.com\"\n        },\n        timeout=30.0\n    )\n\nclass MCPWebsocketTool:\n    \"\"\"\n    MCP Server via WebSocket communication:\n\n    Configuration:\n    - name: str - Tool identifier  \n    - uri: str - WebSocket URI (ws:// or wss://)\n    - headers: dict - Authentication headers\n    - timeout: float - Connection timeout\n    - reconnect: bool - Auto-reconnection\n    - max_retries: int - Retry attempts\n\n    Protocol Features:\n    - JSON-RPC 2.0 over WebSocket\n    - Persistent connection with heartbeat\n    - Binary data support\n    - Real-time updates\n\n    Example: Document Processing Service\n    \"\"\"\n    document_processor = MCPWebsocketTool(\n        name=\"document_processor\",\n        uri=\"wss://docprocessor.internal.com/mcp\",\n        headers={\"Authorization\": \"Bearer token\"},\n        reconnect=True,\n        max_retries=3\n    )\n\nclass MCPStreamableHTTPTool:\n    \"\"\"\n    MCP Server via HTTP with streaming support:\n\n    Configuration:\n    - name: str - Tool identifier\n    - base_url: str - Server base URL\n    - headers: dict - Request headers\n    - auth: AuthProvider - Authentication\n    - stream: bool - Enable streaming responses\n    - chunk_size: int - Streaming chunk size\n\n    Protocol Features:\n    - HTTP/2 with Server-Sent Events\n    - Streaming JSON responses\n    - File upload/download\n    - RESTful resource access\n    \"\"\"\n</code></pre> <p>Underlying Protocol: Model Context Protocol (MCP) + JSON-RPC 2.0 + Various transports Usage Pattern: Connect to external services and APIs as tools Loan Processing Application: Integrate existing MCP servers for verification, documents, calculations</p>"},{"location":"reference/legacy/microsoft-agent-framework-types/#4-tool-execution-and-management","title":"4. Tool Execution and Management","text":"<pre><code>from agent_framework import ChatToolMode, FunctionInvocationContext\n\n# Tool execution modes\nclass ChatToolMode:\n    AUTO = \"auto\"         # Agent decides when to use tools\n    REQUIRED = \"required\" # Must use at least one tool\n    NONE = \"none\"        # No tool usage allowed\n    REQUIRED_ANY = \"required_any\"  # Must use any available tool\n\n# Tool invocation context\nclass FunctionInvocationContext:\n    \"\"\"\n    Context for tool execution:\n\n    Request Data:\n    - function_name: str - Tool being invoked\n    - arguments: dict - Validated parameters\n    - call_id: str - Unique invocation identifier\n    - metadata: dict - Custom tracking data\n\n    Agent Context:\n    - agent_id: str - Calling agent\n    - conversation_id: str - Thread context\n    - user_id: str - Request originator\n    - session_data: dict - Shared session state\n\n    Execution Environment:\n    - timeout: float - Maximum execution time\n    - retry_policy: RetryPolicy - Error handling\n    - security_context: SecurityContext - Permissions\n    - telemetry: TelemetryClient - Observability\n    \"\"\"\n\n# Tool middleware for cross-cutting concerns\nfrom agent_framework import function_middleware, FunctionMiddleware\n\n@function_middleware\nclass SecurityMiddleware(FunctionMiddleware):\n    \"\"\"Example: Add security checks to tool calls\"\"\"\n\n    async def __call__(self, context: FunctionInvocationContext, next_handler):\n        # Pre-execution: Validate permissions\n        if not await self.check_permissions(context.user_id, context.function_name):\n            raise PermissionError(f\"User {context.user_id} cannot call {context.function_name}\")\n\n        # Execute tool\n        await next_handler(context)\n\n        # Post-execution: Audit logging\n        await self.audit_log(context.user_id, context.function_name, context.arguments)\n</code></pre> <p>Underlying Protocol: Middleware pattern + Context management + Security framework Usage Pattern: Apply cross-cutting concerns to tool execution Loan Processing Application: Security, auditing, rate limiting, compliance validation</p>"},{"location":"reference/legacy/microsoft-agent-framework-types/#mcp-model-context-protocol-tools","title":"MCP (Model Context Protocol) Tools","text":"<pre><code>from agent_framework import MCPStdioTool, MCPWebsocketTool, HostedMCPTool\n\n# Connect to our existing MCP servers\napplication_verification = MCPStdioTool(\n    name=\"application_verification\",\n    command=[\"python\", \"-m\", \"loan_processing.tools.mcp_servers.application_verification.server\"],\n    env={\"PORT\": \"8010\"}\n)\n\ndocument_processing = MCPWebsocketTool(\n    name=\"document_processing\", \n    uri=\"ws://localhost:8011/mcp\"\n)\n\n# Microsoft-hosted tools\nweb_search = HostedWebSearchTool(\n    name=\"web_search\",\n    description=\"Search for regulatory information\"\n)\n</code></pre>"},{"location":"reference/legacy/microsoft-agent-framework-types/#chat-client-architecture","title":"Chat Client Architecture","text":""},{"location":"reference/legacy/microsoft-agent-framework-types/#1-chatclientprotocol-provider-abstraction","title":"1. ChatClientProtocol - Provider Abstraction","text":"<pre><code>from agent_framework import ChatClientProtocol, BaseChatClient\n\nclass ChatClientProtocol(Protocol):\n    \"\"\"\n    Standardized interface for all LLM providers:\n\n    Required Methods:\n    - invoke(messages, options) -&gt; ChatResponse\n    - invoke_stream(messages, options) -&gt; AsyncIterator[ChatResponseUpdate]\n\n    Benefits:\n    - Provider-agnostic agent code\n    - Easy provider switching\n    - Testing with mock clients\n    - Consistent error handling\n    \"\"\"\n</code></pre> <p>Underlying Protocol: Abstract base class + Protocol interface Usage Pattern: Dependency injection into ChatAgent Loan Processing Application: Switch between OpenAI, Azure, and Foundry without code changes</p>"},{"location":"reference/legacy/microsoft-agent-framework-types/#2-basechatclient-common-implementation","title":"2. BaseChatClient - Common Implementation","text":"<pre><code>from agent_framework import BaseChatClient\n\nclass BaseChatClient(ChatClientProtocol, AFBaseModel):\n    \"\"\"\n    Shared functionality across all providers:\n\n    Common Features:\n    - Request/response logging\n    - Token usage tracking\n    - Error standardization\n    - Retry logic with exponential backoff\n    - Rate limiting compliance\n    - Request ID generation\n    - User-Agent header management\n\n    Observability:\n    - OpenTelemetry integration\n    - Request/response tracing\n    - Performance metrics\n    - Error categorization\n    \"\"\"\n</code></pre> <p>Underlying Protocol: Template method pattern + OpenTelemetry Usage Pattern: Base class for provider implementations Loan Processing Application: Consistent logging and monitoring across all agents</p>"},{"location":"reference/legacy/microsoft-agent-framework-types/#3-provider-specific-clients","title":"3. Provider-Specific Clients","text":"<pre><code>from agent_framework.openai import OpenAIChatClient\nfrom agent_framework.azure import AzureChatClient  \nfrom agent_framework.foundry import FoundryChatClient\n\n# OpenAI - Direct API access\nclass OpenAIChatClient(BaseChatClient):\n    \"\"\"\n    Official OpenAI API integration:\n    - Direct openai-python SDK usage\n    - Full feature parity\n    - Latest model support\n    - Function calling native support\n    \"\"\"\n\n# Azure OpenAI - Enterprise features\nclass AzureChatClient(BaseChatClient):\n    \"\"\"\n    Azure OpenAI Service integration:\n    - Managed Azure identity\n    - Private endpoint support\n    - Content filtering policies\n    - Regional deployment options\n    - Enterprise compliance features\n    \"\"\"\n\n# Azure AI Foundry - Microsoft's AI platform\nclass FoundryChatClient(BaseChatClient):\n    \"\"\"\n    Azure AI Foundry integration (Recommended for Enterprise):\n    - Integrated AI safety features  \n    - Model management and versioning\n    - Built-in evaluation and monitoring\n    - Multi-modal model support\n    - Responsible AI guardrails\n    - Enterprise security controls\n    \"\"\"\n</code></pre> <p>Underlying Protocol: Provider-specific SDKs + Standardized interface Usage Pattern: Configuration-driven provider selection Loan Processing Application: Use Foundry for enterprise features, fallback to Azure/OpenAI</p>"},{"location":"reference/legacy/microsoft-agent-framework-types/#4-chatoptions-request-configuration","title":"4. ChatOptions - Request Configuration","text":"<pre><code>from agent_framework import ChatOptions, ChatToolMode\n\nclass ChatOptions:\n    \"\"\"\n    Comprehensive request configuration:\n\n    Core Parameters:\n    - ai_model_id: str - Model identifier\n    - temperature: float [0.0-2.0] - Response creativity\n    - max_tokens: int - Response length limit\n    - top_p: float [0.0-1.0] - Nucleus sampling\n    - frequency_penalty: float [-2.0-2.0] - Repetition reduction\n    - presence_penalty: float [-2.0-2.0] - Topic diversity\n    - seed: int - Deterministic generation\n    - stop: str[] - Custom stop sequences\n\n    Tool Configuration:\n    - tools: ToolProtocol[] - Available functions\n    - tool_choice: ChatToolMode - Tool usage control\n    - allow_multiple_tool_calls: bool - Parallel tool execution\n\n    Enterprise Features:\n    - user: str - User identification for compliance\n    - metadata: dict - Request tracking data\n    - conversation_id: str - Thread management\n    - store: bool - Conversation persistence\n    - response_format: BaseModel - Structured outputs\n\n    Advanced Options:\n    - logit_bias: dict - Token probability adjustment\n    - additional_properties: dict - Provider-specific options\n    \"\"\"\n</code></pre> <p>Underlying Protocol: OpenAI API parameters + Provider extensions Usage Pattern: Per-request configuration override Loan Processing Application: Different settings per agent type (conservative for credit, creative for explanations)</p>"},{"location":"reference/legacy/microsoft-agent-framework-types/#chat-client-configuration","title":"Chat Client Configuration","text":"<pre><code># Configuration options for loan processing\nchat_options = ChatOptions(\n    temperature=0.1,  # Consistent decisions\n    max_tokens=2000,  # Adequate response length\n    tools=[mcp_tools],  # Available tools\n    tool_choice=\"auto\",  # Let agent decide when to use tools\n    response_format=LoanDecision,  # Structured output\n    user=\"loan_system\",  # System identifier\n    stop=[\"END_ASSESSMENT\"]  # Stop sequences\n)\n</code></pre>"},{"location":"reference/legacy/microsoft-agent-framework-types/#workflow-system-pregel-inspired-orchestration","title":"Workflow System - Pregel-Inspired Orchestration","text":""},{"location":"reference/legacy/microsoft-agent-framework-types/#1-workflow-graph-execution-engine","title":"1. Workflow - Graph Execution Engine","text":"<pre><code>from agent_framework import Workflow, WorkflowContext\n\nclass Workflow:\n    \"\"\"\n    Pregel-like graph execution engine:\n\n    Architecture:\n    - Directed graph of executors (nodes) and edges\n    - Superstep-based execution model\n    - Message passing between executors\n    - Distributed computation support\n    - Fault tolerance and checkpointing\n\n    Execution Model:\n    1. Superstep begins - all executors receive messages\n    2. Executors process messages and compute results\n    3. Executors send messages to successor nodes\n    4. Superstep ends - synchronization barrier\n    5. Repeat until no more messages or terminal condition\n\n    Benefits:\n    - Scalable parallel execution\n    - Deterministic results\n    - Easy debugging and monitoring\n    - Fault recovery capabilities\n    \"\"\"\n\n    async def run(\n        self,\n        input_data: Any,\n        context: WorkflowContext,\n        checkpoint: CheckpointStorage = None\n    ) -&gt; WorkflowRunResult:\n        \"\"\"\n        Execute workflow with fault tolerance:\n        1. Load checkpoint if resuming\n        2. Initialize executor states\n        3. Run supersteps until completion\n        4. Save final checkpoint\n        5. Return aggregated results\n        \"\"\"\n</code></pre> <p>Underlying Protocol: Google Pregel + Actor model + Message passing Usage Pattern: Complex multi-agent orchestrations with dependencies Loan Processing Application: Coordinate 5 agents with parallel and sequential phases</p>"},{"location":"reference/legacy/microsoft-agent-framework-types/#2-workflowbuilder-declarative-construction","title":"2. WorkflowBuilder - Declarative Construction","text":"<pre><code>from agent_framework import WorkflowBuilder, Edge\n\nclass WorkflowBuilder:\n    \"\"\"\n    Fluent builder for workflow graphs:\n\n    Construction Methods:\n    - add_executor(id, executor) - Add processing node\n    - add_edge(from, to) - Simple sequential connection\n    - add_fan_out_edge(from, to_list) - One-to-many distribution\n    - add_fan_in_edge(from_list, to) - Many-to-one aggregation\n    - add_switch_case_edge(from, cases) - Conditional routing\n    - set_start_executor(id) - Entry point designation\n\n    Validation:\n    - Cycle detection\n    - Reachability analysis\n    - Type compatibility checking\n    - Resource constraint validation\n    \"\"\"\n\n    # Loan processing workflow example\n    def build_loan_workflow(self) -&gt; Workflow:\n        return (\n            WorkflowBuilder()\n            # Add specialized agents as executors\n            .add_executor(\"intake\", IntakeAgentExecutor(intake_agent))\n            .add_executor(\"credit\", CreditAgentExecutor(credit_agent))\n            .add_executor(\"income\", IncomeAgentExecutor(income_agent))\n            .add_executor(\"risk\", RiskAgentExecutor(risk_agent))\n            .add_executor(\"decision\", DecisionAggregatorExecutor())\n\n            # Define execution flow\n            .add_edge(\"intake\", \"credit\")      # Sequential validation\n            .add_edge(\"intake\", \"income\")      # Parallel assessment\n            .add_fan_in_edge([\"credit\", \"income\"], \"risk\")  # Aggregation\n            .add_edge(\"risk\", \"decision\")      # Final decision\n\n            # Set entry point\n            .set_start_executor(\"intake\")\n            .build()\n        )\n</code></pre> <p>Underlying Protocol: Builder pattern + Graph theory + Fluent interface Usage Pattern: Declarative workflow definition with validation Loan Processing Application: Visual workflow definition matching business process</p>"},{"location":"reference/legacy/microsoft-agent-framework-types/#3-workflowexecutor-node-implementation","title":"3. WorkflowExecutor - Node Implementation","text":"<pre><code>from agent_framework import WorkflowExecutor, ExecutorContext\n\nclass WorkflowExecutor:\n    \"\"\"\n    Base class for workflow nodes:\n\n    Core Methods:\n    - can_handle(input) -&gt; bool - Input validation\n    - execute(input, context) -&gt; ExecutorResult - Main processing\n    - handle_error(error, context) -&gt; ErrorHandlingResult - Error recovery\n\n    Execution Context:\n    - Input data and metadata\n    - Shared state access\n    - Message passing capabilities\n    - Checkpoint management\n    - Logging and telemetry\n    \"\"\"\n\n    async def execute(\n        self, \n        input_data: Any, \n        context: ExecutorContext\n    ) -&gt; ExecutorResult:\n        \"\"\"\n        Template method for node execution:\n        1. Validate input data\n        2. Load shared state\n        3. Execute business logic\n        4. Update shared state\n        5. Return results and next messages\n        \"\"\"\n\n# Custom executor for loan processing\nclass CreditAgentExecutor(WorkflowExecutor):\n    def __init__(self, credit_agent: ChatAgent):\n        self.credit_agent = credit_agent\n\n    async def execute(self, loan_app: LoanApplication, context: ExecutorContext) -&gt; ExecutorResult:\n        # Execute credit assessment\n        response = await self.credit_agent.invoke([\n            ChatMessage(role=Role.USER, contents=[\n                TextContent(text=f\"Assess credit for: {loan_app.json()}\")\n            ])\n        ])\n\n        # Parse structured result\n        credit_assessment = CreditAssessment.parse_raw(\n            response.messages[-1].contents[0].text\n        )\n\n        # Pass to next nodes\n        return ExecutorResult(\n            output=credit_assessment,\n            messages=[\n                Message(target=\"risk\", data=credit_assessment),\n                Message(target=\"decision\", data={\"credit_score\": credit_assessment.score})\n            ]\n        )\n</code></pre> <p>Underlying Protocol: Template method + Message passing + State management Usage Pattern: Wrap agents as workflow nodes with standardized interface Loan Processing Application: Each agent becomes a specialized executor</p>"},{"location":"reference/legacy/microsoft-agent-framework-types/#4-workflowcontext-execution-environment","title":"4. WorkflowContext - Execution Environment","text":"<pre><code>from agent_framework import WorkflowContext, SharedState\n\nclass WorkflowContext:\n    \"\"\"\n    Execution environment for workflows:\n\n    Context Data:\n    - workflow_id: str - Unique execution identifier\n    - user_id: str - Request originator\n    - session_id: str - Conversation thread\n    - metadata: dict - Custom tracking data\n\n    Shared State:\n    - persistent: dict - Survives checkpoints\n    - transient: dict - In-memory only\n    - thread_local: dict - Executor-specific\n\n    Services:\n    - logger: Logger - Structured logging\n    - telemetry: TelemetryClient - Metrics and tracing\n    - checkpoint: CheckpointStorage - State persistence\n    - message_queue: MessageQueue - Inter-executor communication\n    \"\"\"\n\n    # Loan processing context\n    loan_context = WorkflowContext(\n        workflow_id=\"loan_processing_v1\",\n        user_id=\"applicant_12345\",\n        session_id=\"session_67890\",\n        metadata={\n            \"application_id\": \"LN123456789\",\n            \"priority\": \"standard\",\n            \"compliance_level\": \"strict\"\n        }\n    )\n</code></pre> <p>Underlying Protocol: Context pattern + Dependency injection + State management Usage Pattern: Shared execution environment across all workflow nodes Loan Processing Application: Maintain application context and audit trail throughout process</p>"},{"location":"reference/legacy/microsoft-agent-framework-types/#workflow-execution-patterns","title":"Workflow Execution Patterns","text":"<pre><code># Sequential execution\nsequential_workflow = (\n    WorkflowBuilder()\n    .add_executor(\"step1\", agent1)\n    .add_executor(\"step2\", agent2)\n    .add_edge(\"step1\", \"step2\")\n    .build()\n)\n\n# Parallel execution  \nparallel_workflow = (\n    WorkflowBuilder()\n    .add_executor(\"credit_check\", credit_agent)\n    .add_executor(\"income_verify\", income_agent)\n    .add_executor(\"combine\", decision_agent)\n    .add_edge([\"credit_check\", \"income_verify\"], \"combine\")\n    .build()\n)\n\n# Conditional execution\nconditional_workflow = (\n    WorkflowBuilder()\n    .add_executor(\"triage\", triage_agent)\n    .add_executor(\"simple_path\", simple_agent)\n    .add_executor(\"complex_path\", complex_agent)\n    .add_switch_case_edge(\"triage\", [\n        (\"simple\", \"simple_path\"),\n        (\"complex\", \"complex_path\")\n    ])\n    .build()\n)\n</code></pre>"},{"location":"reference/legacy/microsoft-agent-framework-types/#memory-and-context-management","title":"Memory and Context Management","text":""},{"location":"reference/legacy/microsoft-agent-framework-types/#context-providers","title":"Context Providers","text":"<pre><code>from agent_framework import ContextProvider, AggregateContextProvider\n\nclass LoanApplicationContextProvider(ContextProvider):\n    \"\"\"Provides loan application context to agents.\"\"\"\n\n    async def on_agent_run_start(self, context: AgentRunContext):\n        # Add application data to context\n        context.context[\"application\"] = await self.get_application(\n            context.request.metadata.get(\"application_id\")\n        )\n\n    async def on_agent_run_complete(self, context: AgentRunContext):\n        # Save agent decision\n        await self.save_decision(\n            context.request.metadata.get(\"application_id\"),\n            context.response\n        )\n\n# Combine multiple context providers\ncontext_provider = AggregateContextProvider([\n    LoanApplicationContextProvider(),\n    RegulatoryContextProvider(),\n    AuditTrailContextProvider()\n])\n</code></pre>"},{"location":"reference/legacy/microsoft-agent-framework-types/#message-storage","title":"Message Storage","text":"<pre><code>from agent_framework import ChatMessageStore\n\nclass LoanChatMessageStore(ChatMessageStore):\n    \"\"\"Store loan processing conversations.\"\"\"\n\n    async def add_message(self, thread_id: str, message: ChatMessage):\n        # Store with encryption for sensitive loan data\n        await self.db.store_encrypted_message(thread_id, message)\n\n    async def get_messages(self, thread_id: str) -&gt; List[ChatMessage]:\n        # Retrieve and decrypt messages\n        return await self.db.get_encrypted_messages(thread_id)\n</code></pre>"},{"location":"reference/legacy/microsoft-agent-framework-types/#configuration-and-middleware","title":"Configuration and Middleware","text":""},{"location":"reference/legacy/microsoft-agent-framework-types/#agent-middleware-for-loan-processing","title":"Agent Middleware for Loan Processing","text":"<pre><code>from agent_framework import AgentMiddleware, agent_middleware\n\n@agent_middleware\nclass ComplianceMiddleware(AgentMiddleware):\n    \"\"\"Ensures all agent decisions comply with regulations.\"\"\"\n\n    async def __call__(self, context: AgentRunContext, next_handler):\n        # Pre-processing: Add compliance context\n        context.context[\"regulations\"] = await self.get_regulations()\n\n        # Execute agent\n        await next_handler(context)\n\n        # Post-processing: Validate compliance\n        if not await self.validate_compliance(context.response):\n            raise ComplianceViolationError(\"Decision violates regulations\")\n\n# Apply to all loan processing agents\ncredit_agent = ChatAgent(\n    chat_client=client,\n    instructions=\"...\",\n    middleware=[ComplianceMiddleware(), AuditMiddleware()]\n)\n</code></pre>"},{"location":"reference/legacy/microsoft-agent-framework-types/#configuration-types","title":"Configuration Types","text":"<pre><code>from agent_framework import ChatToolMode, FinishReason\n\n# Tool execution modes\nChatToolMode.AUTO      # Agent decides when to use tools\nChatToolMode.REQUIRED  # Must use at least one tool\nChatToolMode.NONE      # No tool usage allowed\n\n# Completion reasons\nFinishReason.STOP         # Natural completion\nFinishReason.LENGTH       # Max tokens reached\nFinishReason.TOOL_CALLS   # Stopped for tool execution\nFinishReason.CONTENT_FILTER  # Content filtered\n</code></pre>"},{"location":"reference/legacy/microsoft-agent-framework-types/#integration-with-existing-loan-system","title":"Integration with Existing Loan System","text":""},{"location":"reference/legacy/microsoft-agent-framework-types/#mapping-to-current-architecture","title":"Mapping to Current Architecture","text":"<pre><code># Replace current agent personas with ChatAgent instances\nfrom loan_processing.agents.agent_persona import get_persona_path\n\n# Load persona instructions\nwith open(get_persona_path(\"credit\"), 'r') as f:\n    credit_instructions = f.read()\n\n# Create ChatAgent with persona\ncredit_agent = ChatAgent(\n    chat_client=foundry_client,\n    instructions=credit_instructions,\n    tools=[\n        application_verification,\n        financial_calculations, \n        document_processing\n    ],\n    name=\"Credit Assessment Agent\",\n    middleware=[ComplianceMiddleware()]\n)\n\n# Integrate with existing data models\nfrom loan_processing.models import LoanApplication, LoanDecision\n\nasync def process_application(application: LoanApplication) -&gt; LoanDecision:\n    response = await credit_agent.invoke([\n        ChatMessage(\n            role=Role.USER,\n            contents=[TextContent(text=f\"Assess application: {application.json()}\")]\n        )\n    ])\n\n    # Parse structured response\n    return LoanDecision.parse_raw(response.messages[-1].contents[0].text)\n</code></pre>"},{"location":"reference/legacy/microsoft-agent-framework-types/#memory-and-context-management_1","title":"Memory and Context Management","text":""},{"location":"reference/legacy/microsoft-agent-framework-types/#1-contextprovider-dynamic-context-injection","title":"1. ContextProvider - Dynamic Context Injection","text":"<pre><code>from agent_framework import ContextProvider, AgentRunContext\n\nclass ContextProvider:\n    \"\"\"\n    Dynamic context injection into agent execution:\n\n    Lifecycle Hooks:\n    - on_agent_run_start(context: AgentRunContext) - Pre-execution setup\n    - on_agent_run_complete(context: AgentRunContext) - Post-execution cleanup\n    - on_function_call(context: FunctionInvocationContext) - Tool call interception\n    - on_error(context: AgentRunContext, error: Exception) - Error handling\n\n    Use Cases:\n    - Load relevant data from databases\n    - Inject regulatory context\n    - Add user preferences\n    - Maintain conversation history\n    - Cache expensive operations\n    \"\"\"\n\n# Loan processing context provider\nclass LoanApplicationContextProvider(ContextProvider):\n    \"\"\"Provides loan application context to agents\"\"\"\n\n    async def on_agent_run_start(self, context: AgentRunContext):\n        # Load application data\n        app_id = context.metadata.get(\"application_id\")\n        if app_id:\n            application = await self.db.get_application(app_id)\n            context.context[\"application\"] = application\n\n            # Add regulatory context\n            regulations = await self.get_regulations(application.state)\n            context.context[\"regulations\"] = regulations\n\n    async def on_agent_run_complete(self, context: AgentRunContext):\n        # Save agent decision with audit trail\n        await self.audit_service.log_decision(\n            agent_id=context.agent.id,\n            decision=context.response,\n            timestamp=datetime.utcnow()\n        )\n</code></pre> <p>Underlying Protocol: Observer pattern + Dependency injection + Lifecycle management Usage Pattern: Inject dynamic context without modifying agent code Loan Processing Application: Load application data, regulations, user preferences</p>"},{"location":"reference/legacy/microsoft-agent-framework-types/#2-chatmessagestore-conversation-persistence","title":"2. ChatMessageStore - Conversation Persistence","text":"<pre><code>from agent_framework import ChatMessageStore, ChatMessage\n\nclass ChatMessageStore:\n    \"\"\"\n    Thread-based conversation persistence:\n\n    Core Methods:\n    - add_message(thread_id: str, message: ChatMessage) - Store message\n    - get_messages(thread_id: str, limit: int, offset: int) - Retrieve history\n    - delete_thread(thread_id: str) - Remove conversation\n    - get_threads(user_id: str) - List user conversations\n\n    Enterprise Features:\n    - Encryption at rest\n    - Retention policies\n    - Compliance tagging\n    - Search and indexing\n    - Backup and recovery\n    \"\"\"\n\n# Secure loan processing message store\nclass SecureLoanMessageStore(ChatMessageStore):\n    \"\"\"Encrypted message storage for sensitive loan data\"\"\"\n\n    async def add_message(self, thread_id: str, message: ChatMessage):\n        # Encrypt sensitive content\n        encrypted_message = await self.encrypt_pii(message)\n\n        # Store with metadata\n        await self.db.store_message(\n            thread_id=thread_id,\n            message=encrypted_message,\n            timestamp=datetime.utcnow(),\n            retention_date=datetime.utcnow() + timedelta(days=2555)  # 7 years\n        )\n\n    async def get_messages(self, thread_id: str, limit: int = 100) -&gt; List[ChatMessage]:\n        # Retrieve and decrypt\n        encrypted_messages = await self.db.get_messages(thread_id, limit)\n        return [await self.decrypt_pii(msg) for msg in encrypted_messages]\n</code></pre> <p>Underlying Protocol: Repository pattern + Encryption + Compliance framework Usage Pattern: Persistent conversation history with security Loan Processing Application: Maintain audit trail, conversation threading, compliance retention</p>"},{"location":"reference/legacy/microsoft-agent-framework-types/#middleware-system-cross-cutting-concerns","title":"Middleware System - Cross-Cutting Concerns","text":""},{"location":"reference/legacy/microsoft-agent-framework-types/#1-agentmiddleware-agent-execution-pipeline","title":"1. AgentMiddleware - Agent Execution Pipeline","text":"<pre><code>from agent_framework import AgentMiddleware, agent_middleware, AgentRunContext\n\n@agent_middleware\nclass ComplianceMiddleware(AgentMiddleware):\n    \"\"\"\n    Regulatory compliance enforcement:\n\n    Pre-execution:\n    - Validate agent permissions\n    - Load compliance rules\n    - Check data access rights\n\n    Post-execution:\n    - Validate decision compliance  \n    - Generate audit logs\n    - Apply disclosure requirements\n    \"\"\"\n\n    async def __call__(self, context: AgentRunContext, next_handler):\n        # Pre-processing: Load compliance context\n        regulations = await self.load_regulations(context.metadata.get(\"jurisdiction\"))\n        context.context[\"compliance_rules\"] = regulations\n\n        # Execute agent\n        await next_handler(context)\n\n        # Post-processing: Validate compliance\n        decision = context.response.messages[-1].contents[0].text\n        compliance_check = await self.validate_compliance(decision, regulations)\n\n        if not compliance_check.passed:\n            raise ComplianceViolationError(\n                f\"Decision violates {compliance_check.violated_rules}\"\n            )\n</code></pre> <p>Underlying Protocol: Middleware pattern + Chain of responsibility + Compliance framework Usage Pattern: Apply consistent cross-cutting concerns to all agents Loan Processing Application: Compliance, security, auditing, performance monitoring</p>"},{"location":"reference/legacy/microsoft-agent-framework-types/#2-integration-architecture-summary","title":"2. Integration Architecture Summary","text":"<pre><code># Complete loan processing integration example\nfrom agent_framework import *\nfrom loan_processing.models import LoanApplication, LoanDecision\n\nclass LoanProcessingOrchestrator:\n    \"\"\"\n    Complete integration of Microsoft Agent Framework with existing business logic\n    \"\"\"\n\n    def __init__(self):\n        # Initialize chat client (enterprise-grade)\n        self.chat_client = FoundryChatClient(\n            endpoint=os.getenv(\"FOUNDRY_ENDPOINT\"),\n            credential=DefaultAzureCredential(),\n            model_deployment_name=\"gpt-4o\"\n        )\n\n        # Load existing agent personas\n        self.agents = {\n            \"intake\": self.create_intake_agent(),\n            \"credit\": self.create_credit_agent(),\n            \"income\": self.create_income_agent(),\n            \"risk\": self.create_risk_agent()\n        }\n\n        # Build workflow from existing business process\n        self.workflow = self.build_loan_workflow()\n\n    def create_credit_agent(self) -&gt; ChatAgent:\n        \"\"\"Convert existing credit agent persona to ChatAgent\"\"\"\n\n        # Load existing persona instructions\n        with open(\"loan_processing/agents/agent-persona/credit-agent-persona.md\") as f:\n            instructions = f.read()\n\n        # Convert existing MCP servers to tools\n        tools = [\n            MCPStdioTool(\n                name=\"application_verification\",\n                command=[\"python\", \"-m\", \"loan_processing.tools.mcp_servers.application_verification.server\"]\n            ),\n            MCPStdioTool(\n                name=\"financial_calculations\", \n                command=[\"python\", \"-m\", \"loan_processing.tools.mcp_servers.financial_calculations.server\"]\n            )\n        ]\n\n        # Add business logic as AI functions\n        tools.extend([\n            ai_function(self.calculate_dti_ratio),\n            ai_function(self.validate_credit_score),\n            ai_function(self.assess_credit_risk)\n        ])\n\n        return ChatAgent(\n            chat_client=self.chat_client,\n            name=\"Credit Assessment Agent\",\n            instructions=instructions,\n            tools=tools,\n            temperature=0.1,  # Conservative for financial decisions\n            response_format=CreditAssessment,  # Structured output\n            middleware=[\n                ComplianceMiddleware(),\n                AuditMiddleware(),\n                SecurityMiddleware()\n            ],\n            context_providers=[\n                LoanApplicationContextProvider(),\n                RegulatoryContextProvider()\n            ]\n        )\n\n    async def process_application(self, application: LoanApplication) -&gt; LoanDecision:\n        \"\"\"\n        Process loan application through Agent Framework workflow\n        while maintaining existing business logic and compliance\n        \"\"\"\n\n        # Execute workflow with application context\n        result = await self.workflow.run(\n            input_data=application,\n            context=WorkflowContext(\n                user_id=application.applicant_id,\n                metadata={\n                    \"application_id\": application.application_id,\n                    \"compliance_level\": \"strict\",\n                    \"audit_required\": True\n                }\n            )\n        )\n\n        # Return structured business decision\n        return LoanDecision.parse_obj(result.output)\n</code></pre> <p>This comprehensive architecture provides enterprise-grade agent orchestration while preserving all existing business logic, compliance requirements, and domain expertise from your current framework-agnostic foundation.</p>"},{"location":"reference/legacy/technical-specification/","title":"\ud83e\uddb8\u200d\u2642\ufe0f THE LOAN AVENGERS - Technical Specification","text":""},{"location":"reference/legacy/technical-specification/#hero-mission-overview","title":"Hero Mission Overview","text":"<p>When financial dreams are threatened by boring forms and complex processes, The Loan Avengers assemble to save the day! This revolutionary superhero squad transforms traditional loan applications into epic missions where every user gets their own personal team of financial superheroes working to make their dreams come true.</p> <p>\u26a0\ufe0f Experimental Application: This is a showcase demonstrating Microsoft Agent Framework and Azure AI Foundry capabilities through a practical multi-agent loan processing scenario.</p>"},{"location":"reference/legacy/technical-specification/#architecture-documentation","title":"\ud83d\udcca Architecture Documentation","text":"<p>For comprehensive system architecture and deployment details, see: - Complete System Architecture Diagram - End-to-end agent workflow and component interactions - Azure Deployment Architecture - Complete cloud infrastructure and deployment topology - Architecture Decision Records - Key architectural decisions and rationale</p>"},{"location":"reference/legacy/technical-specification/#revolutionary-user-experience","title":"Revolutionary User Experience","text":""},{"location":"reference/legacy/technical-specification/#core-innovation-cap-ital-america-your-personal-ai-dream-team","title":"\ud83c\udfaf Core Innovation: Cap-ital America &amp; Your Personal AI Dream Team","text":"<p>Instead of traditional forms, users interact with Cap-ital America (Loan Coordinator) who assembles a team of specialized AI agents through a collaborative journey:</p> <p>\ud83e\uddb8\u200d\u2642\ufe0f Cap-ital America (Loan Coordinator): \"AVENGERS, ASSEMBLE! Let me get my team to help you achieve your goals!\"</p> <p>Your Personal AI Dream Team: - \ud83e\uddb8\u200d\u2642\ufe0f Cap-ital America (Loan Coordinator): Orchestrates the entire application experience with natural conversation - \ud83d\udcbc Hawk-Income (Income Specialist): \"I see you're crushing it with your career! Let me verify those amazing earnings...\" - \ud83d\udcca Scarlet Witch-Credit (Credit Analyst): \"Hawk-Income shared incredible news! Your credit journey looks fantastic!\" - \ud83d\udee1\ufe0f Doctor Strange-Risk (Risk Assessor): \"This loan perfectly protects your financial dreams and goals!\"</p> <p>Note: All agents are AI assistants designed to help with loan applications. Behind the scenes, an Intake Agent validates applications for routing.</p>"},{"location":"reference/legacy/technical-specification/#mobile-first-conversational-journey","title":"\ud83d\udcf1 Mobile-First Conversational Journey","text":""},{"location":"reference/legacy/technical-specification/#phase-1-cap-ital-americas-welcome-avengers-assembly","title":"Phase 1: Cap-ital America's Welcome &amp; Avengers Assembly","text":"<pre><code>\ud83e\uddb8\u200d\u2642\ufe0f Cap-ital America: \"Hey there! \ud83d\udc4b I'm Cap-ital America, your AI loan coordinator.\n                      Looking to make your homeownership dreams come true? \ud83c\udfe1\u2728\"\n\n\ud83c\udfa4 User: \"Yes! I found this perfect house and I think I need around 250K\"\n\n\ud83e\uddb8\u200d\u2642\ufe0f Cap-ital America: \"That's SO exciting! \ud83c\udf89 Your dream home journey is about to begin!\n                      AVENGERS, ASSEMBLE! Let me get my team of AI specialists\n                      to help you. First, I'll validate everything looks good! \ud83e\udd85\"\n</code></pre>"},{"location":"reference/legacy/technical-specification/#phase-2-the-avengers-team-in-action-real-time-streaming","title":"Phase 2: The Avengers Team in Action (Real-Time Streaming)","text":"<pre><code>\ud83d\ude80 Dynamic Card Interface with Smooth Animations:\n\n\u250c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2510\n\u2502 \ud83c\udfe0 Your Dream Home Goal         \u2502\n\u2502 $250,000 Home Loan             \u2502\n\u2502 \u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501  \u2502\n\u2502                                \u2502\n\u2502 \ud83e\uddb8 The Avengers Team:          \u2502\n\u2502 \u250c\u2500\u2500\u2500\u2500\u2500\u2510 \u250c\u2500\u2500\u2500\u2500\u2500\u2510 \u250c\u2500\u2500\u2500\u2500\u2500\u2510        \u2502\n\u2502 \u2502Hawk-Income\u2502 \u2502Scarlet Witch-Credit\u2502 \u2502Doctor Strange-Risk \u2502      \u2502\n\u2502 \u2502\ud83d\udcbc \u2728\u2502 \u2502\ud83d\udcca \ud83d\udca4\u2502 \u2502\ud83d\udee1\ufe0f\ud83d\udca4\u2502        \u2502\n\u2502 \u2514\u2500\u2500\u2500\u2500\u2500\u2518 \u2514\u2500\u2500\u2500\u2500\u2500\u2518 \u2514\u2500\u2500\u2500\u2500\u2500\u2518        \u2502\n\u2514\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2518\n\n\ud83e\uddb8\u200d\u2642\ufe0f Cap-ital America: [Streaming] \"Eagle eyes engaged! \ud83e\udd85 Validating application data...\"\n\ud83e\uddb8\u200d\u2642\ufe0f Cap-ital America: [Streaming] \"Everything looks sharp! No missing pieces!\"\n\ud83e\uddb8\u200d\u2642\ufe0f Cap-ital America: \"Perfect! Specialists, this application is ready - take it away!\"\n\n\ud83d\udcbc Hawk-Income: \"Thanks! I see you're absolutely crushing it with your $8,500/month income!\"\n\ud83d\udcca Scarlet Witch-Credit: \"Hawk-Income shared amazing news! Your 740 credit score is opening incredible doors!\"\n\ud83d\udee1\ufe0f Doctor Strange-Risk: \"This loan fits perfectly with your financial dreams!\"\n\n\ud83e\uddb8\u200d\u2642\ufe0f Cap-ital America: \"\ud83c\udf8a MISSION COMPLETE! Your Dream Home Loan is APPROVED!\"\n</code></pre>"},{"location":"reference/legacy/technical-specification/#phase-3-celebration-results","title":"Phase 3: Celebration &amp; Results","text":"<pre><code>\ud83c\udf8a Confetti Animation + Haptic Feedback:\n\n\u250c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2510\n\u2502        \ud83c\udf89 CONGRATULATIONS! \ud83c\udf89    \u2502\n\u2502                                \u2502\n\u2502    Your Dream Home Loan is      \u2502\n\u2502         \u2705 APPROVED! \u2705         \u2502\n\u2502                                \u2502\n\u2502  \ud83d\udcb0 $250,000 at 6.2% APR       \u2502\n\u2502  \ud83c\udfe0 Your home awaits!           \u2502\n\u2502                                \u2502\n\u2502  [\ud83c\udfaf Next Steps] [\ud83d\udcf1 Share Joy] \u2502\n\u2514\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2518\n</code></pre>"},{"location":"reference/legacy/technical-specification/#revolutionary-system-architecture","title":"Revolutionary System Architecture","text":""},{"location":"reference/legacy/technical-specification/#the-avengers-workflow-clean-multi-agent-architecture","title":"\ud83e\udd1d The Avengers Workflow (Clean Multi-Agent Architecture)","text":"<p>Cap-ital America (Loan Coordinator) leads a streamlined team of AI specialists with clear responsibilities:</p> <p>Technical Agent Chain:</p> <ol> <li>\ud83e\uddb8\u200d\u2642\ufe0f Cap-ital America (Loan Coordinator) = Coordinator Agent</li> <li>Primary responsibility: Natural conversation and team coordination</li> <li>\"AVENGERS, ASSEMBLE! Let me collect your information through friendly conversation\"</li> <li>Performs initial validation before routing to specialists</li> <li>Tools: Conversational data collection</li> <li> <p>Note: AI assistant designed to help with loan applications</p> </li> <li> <p>\ud83d\udc41\ufe0f Intake Agent (Validator) = Intake Agent (Background)</p> </li> <li>Single responsibility: Lightning-fast application validation and routing</li> <li>Validates completeness and routes to appropriate workflow</li> <li>Tools: None (pure validation logic for speed)</li> <li> <p>Note: Works behind the scenes</p> </li> <li> <p>\ud83d\udcbc Hawk-Income (Income Specialist) = Income Agent</p> </li> <li>Single responsibility: Income verification and employment validation</li> <li>\"I see you're crushing it with your career!\"</li> <li>Tools: Employment verification, document processing, financial calculations</li> <li> <p>Note: AI assistant for comprehensive income verification</p> </li> <li> <p>\ud83d\udcca Scarlet Witch-Credit (Credit Analyst) = Credit Agent</p> </li> <li>Single responsibility: Credit assessment and scoring</li> <li>\"Your credit journey looks fantastic!\"</li> <li>Tools: Credit bureau, identity verification, financial calculations</li> <li> <p>Note: AI assistant designed to analyze credit profiles</p> </li> <li> <p>\ud83d\udee1\ufe0f Doctor Strange-Risk (Risk Assessor) = Risk Agent + Decision</p> </li> <li>Single responsibility: Risk analysis and final loan decision</li> <li>\"This loan perfectly protects your financial dreams!\"</li> <li>Tools: All MCP servers for comprehensive risk assessment</li> <li>Note: AI system providing advisory risk recommendations</li> </ol>"},{"location":"reference/legacy/technical-specification/#technology-stack","title":"Technology Stack","text":""},{"location":"reference/legacy/technical-specification/#core-platform","title":"\ud83c\udfaf Core Platform","text":"<ul> <li>Agent Framework: Microsoft Agent Framework for orchestration</li> <li>Models: Pydantic v2 for data validation</li> <li>Observability: Agent Framework OTEL + Application Insights</li> <li>Real-time Streaming: WebSocket/SSE for live progress updates</li> </ul>"},{"location":"reference/legacy/technical-specification/#mobile-first-frontend","title":"\ud83d\udcf1 Mobile-First Frontend","text":"<ul> <li>Voice Integration: Web Speech API with fallback to native apps</li> <li>Animations: Framer Motion for smooth card transitions</li> <li>Progressive Web App: Installable, offline-capable experience</li> <li>Haptic Feedback: Vibration API for celebration moments</li> <li>Accessibility: WCAG 2.1 AA compliance with voice navigation</li> </ul>"},{"location":"reference/legacy/technical-specification/#ai-personality-framework","title":"\ud83e\udd16 AI Personality Framework","text":"<ul> <li>Conversational Personas: Distinct personality traits for each AI specialist</li> <li>Emotional Intelligence: Context-aware responses that build confidence</li> <li>Adaptive Messaging: Dynamic tone based on user's financial profile</li> <li>Celebration Triggers: Smart confetti and success animations</li> </ul>"},{"location":"reference/legacy/technical-specification/#complete-avengers-handoff-flow","title":"Complete Avengers Handoff Flow","text":""},{"location":"reference/legacy/technical-specification/#cap-ital-americas-orchestrated-experience","title":"\ud83c\udfac Cap-ital America's Orchestrated Experience","text":"<p>The Full Revolutionary Conversation:</p> <pre><code>\ud83e\uddb8\u200d\u2642\ufe0f Cap-ital America: \"Hey there! Let me get my incredible team to help you!\n                      AVENGERS, ASSEMBLE! First, I'll make sure we have\n                      everything we need! \ud83e\udd85\"\n\n\ud83e\uddb8\u200d\u2642\ufe0f Cap-ital America: [Streaming] \"Eagle eyes engaged! \ud83e\udd85 Validating application data...\"\n\ud83e\uddb8\u200d\u2642\ufe0f Cap-ital America: [Streaming] \"Checking every field with precision... nothing escapes these eyes!\"\n\ud83e\uddb8\u200d\u2642\ufe0f Cap-ital America: [Streaming] \"Perfect profile detected! Everything looks sharp!\"\n\ud83e\uddb8\u200d\u2642\ufe0f Cap-ital America: \"All clear! Specialists, this application is ready - take it away!\"\n\n\ud83d\udcbc Hawk-Income: \"Thanks! I see you're absolutely crushing it with your $125k income!\n          Let me verify those amazing earnings and show you what's possible...\"\n\n\ud83d\udcca Scarlet Witch-Credit: \"Hawk-Income shared incredible news about your income stability!\n           Your 740 credit score is opening amazing doors - let me show you!\"\n\n\ud83d\udee1\ufe0f Doctor Strange-Risk: \"Scarlet Witch-Credit found fantastic credit strength! This loan fits perfectly\n          with your financial dreams. Let me finalize the perfect terms...\"\n\n\ud83e\uddb8\u200d\u2642\ufe0f Cap-ital America: \"\ud83c\udf8a MISSION COMPLETE! Validation was perfect, Hawk-Income loved your income,\n                      Scarlet Witch-Credit celebrated your credit, and Doctor Strange-Risk protected your dreams!\n                      Your Dream Home Loan is APPROVED! \ud83c\udfe1\u2728\"\n</code></pre>"},{"location":"reference/legacy/technical-specification/#seamless-agent-handoffs","title":"\ud83e\udd1d Seamless Agent Handoffs","text":"<p>Context Preservation Between Specialists: - Cap-ital America \u2192 Hawk-Income: \"Application validated - celebrate their amazing income!\" - Hawk-Income \u2192 Scarlet Witch-Credit: \"Income verified and impressive - show them what their credit unlocks!\" - Scarlet Witch-Credit \u2192 Doctor Strange-Risk: \"Credit strength confirmed - ensure this loan protects their dreams!\" - Doctor Strange-Risk \u2192 Cap-ital America: \"Perfect loan terms calculated - ready for celebration!\"</p>"},{"location":"reference/legacy/technical-specification/#ai-dream-team-design-principles","title":"AI Dream Team Design Principles","text":""},{"location":"reference/legacy/technical-specification/#personality-driven-agent-architecture","title":"\ud83c\udfad Personality-Driven Agent Architecture","text":"<p>Each AI specialist has a distinct personality that transforms technical processing into an engaging conversation:</p> <p>AI Transparency: All agents are AI assistants designed to help with loan applications. They clearly identify themselves as AI and never deceive users about their nature.</p>"},{"location":"reference/legacy/technical-specification/#cap-ital-america-loan-coordinator-leadership-team-coordination","title":"\ud83e\uddb8\u200d\u2642\ufe0f Cap-ital America (Loan Coordinator) - Leadership &amp; Team Coordination","text":"<pre><code>class CoordinatorPersonality:\n    tone = \"friendly, transparent, team-oriented\"\n    phrases = [\n        \"AVENGERS, ASSEMBLE! Let me get my team to help you!\",\n        \"I'm Cap-ital America, your AI loan coordinator\",\n        \"Let me collect your information through friendly conversation\"\n    ]\n    focus = \"conversational data collection and team coordination\"\n    transparency = \"Clearly identifies as AI assistant\"\n</code></pre>"},{"location":"reference/legacy/technical-specification/#hawk-income-income-specialist-enthusiastic-supportive","title":"\ud83d\udcbc Hawk-Income (Income Specialist) - Enthusiastic &amp; Supportive","text":"<pre><code>class HawkIncomePersonality:\n    tone = \"enthusiastic, supportive, celebrates achievements\"\n    phrases = [\n        \"I see you're crushing it at your job!\",\n        \"Your earnings look absolutely fantastic!\",\n        \"I'm so excited about your financial journey!\"\n    ]\n    focus = \"income validation with career celebration\"\n    transparency = \"AI assistant for comprehensive income verification\"\n</code></pre>"},{"location":"reference/legacy/technical-specification/#scarlet-witch-credit-credit-analyst-confident-knowledgeable","title":"\ud83d\udcca Scarlet Witch-Credit (Credit Analyst) - Confident &amp; Knowledgeable","text":"<pre><code>class ScarletWitchPersonality:\n    tone = \"confident, knowledgeable, empowering\"\n    phrases = [\n        \"Your credit journey is impressive!\",\n        \"This score opens incredible doors for you!\",\n        \"I love what I'm seeing in your credit profile!\"\n    ]\n    focus = \"credit analysis with strength emphasis\"\n    transparency = \"AI assistant designed to analyze credit profiles\"\n</code></pre>"},{"location":"reference/legacy/technical-specification/#doctor-strange-risk-risk-assessor-protective-goal-focused","title":"\ud83d\udee1\ufe0f Doctor Strange-Risk (Risk Assessor) - Protective &amp; Goal-Focused","text":"<pre><code>class DoctorStrangePersonality:\n    tone = \"protective, thoughtful, goal-oriented\"\n    phrases = [\n        \"I'm making sure this perfectly fits your dreams!\",\n        \"This loan aligns beautifully with your goals!\",\n        \"I'm here to protect your financial future!\"\n    ]\n    focus = \"risk assessment with dream protection\"\n    transparency = \"AI system providing advisory risk recommendations\"\n</code></pre>"},{"location":"reference/legacy/technical-specification/#enhanced-response-format-strategy","title":"\ud83d\udcca Enhanced Response Format Strategy","text":"<p>All agents use structured Pydantic responses with personality-infused messaging:</p> <pre><code>class PersonalizedAssessment(BaseModel):\n    # Technical data\n    validation_status: Literal[\"COMPLETE\", \"INCOMPLETE\", \"FAILED\"]\n    routing_decision: Literal[\"FAST_TRACK\", \"STANDARD\", \"ENHANCED\", \"MANUAL\"]\n    confidence_score: float = Field(ge=0.0, le=1.0)\n\n    # Personality-driven messaging\n    specialist_name: str  # \"Hawk-Income\", \"Scarlet Witch-Credit\", \"Doctor Strange-Risk\", \"Cap-ital America\"\n    celebration_message: str  # Personalized success message\n    encouragement_note: str   # Supportive context\n    next_step_preview: str    # Exciting preview of what's next\n\n    # UI Enhancement triggers\n    animation_type: Literal[\"sparkles\", \"confetti\", \"pulse\", \"glow\"]\n    celebration_level: Literal[\"mild\", \"moderate\", \"high\", \"maximum\"]\n</code></pre>"},{"location":"reference/legacy/technical-specification/#agent-framework-integration","title":"Agent Framework Integration","text":"<ul> <li>ChatAgent with response_format: Automatic JSON parsing</li> <li>Streaming capability: <code>agent.run_stream()</code> for real-time updates</li> <li>Built-in observability: Usage tracking and error handling</li> </ul>"},{"location":"reference/legacy/technical-specification/#data-flow-between-agents","title":"Data Flow Between Agents","text":"<pre><code># Input: LoanApplication (Pydantic model)\n# Agent Processing: ChatAgent with persona + structured response\n# Output: Agent-specific assessment model\n# Handoff: Automatic via workflow chain\n</code></pre>"},{"location":"reference/legacy/technical-specification/#implementation-phases","title":"Implementation Phases","text":""},{"location":"reference/legacy/technical-specification/#phase-1-perfect-individual-agents-current-focus","title":"Phase 1: Perfect Individual Agents \u2705 Current Focus","text":"<ul> <li>Optimize agent response handling with Agent Framework features</li> <li>Use <code>ChatMessage.text</code> for simplified content extraction</li> <li>Implement structured responses with Pydantic models</li> <li>Remove manual JSON parsing complexity</li> </ul>"},{"location":"reference/legacy/technical-specification/#phase-2-workflow-integration","title":"Phase 2: Workflow Integration","text":"<ul> <li>Implement <code>WorkflowBuilder.add_chain()</code> for sequential processing</li> <li>Add real-time streaming with <code>workflow.run_stream()</code></li> <li>Integrate progress events for UI updates</li> </ul>"},{"location":"reference/legacy/technical-specification/#phase-3-beautiful-ui-integration","title":"Phase 3: Beautiful UI Integration","text":"<ul> <li>Connect workflow events to real-time UI updates</li> <li>Implement conversational data collection interface</li> <li>Add progress visualization and status updates</li> </ul>"},{"location":"reference/legacy/technical-specification/#phase-4-enterprise-features","title":"Phase 4: Enterprise Features","text":"<ul> <li>Add workflow checkpointing for resilience</li> <li>Implement error recovery and retry logic</li> <li>Add comprehensive monitoring and alerting</li> </ul>"},{"location":"reference/legacy/technical-specification/#technical-requirements","title":"Technical Requirements","text":""},{"location":"reference/legacy/technical-specification/#agent-response-format","title":"Agent Response Format","text":"<ul> <li>All agents return structured Pydantic models</li> <li>Compatible with Agent Framework <code>response_format</code></li> <li>Consistent field naming across agents</li> <li>Built-in validation and error handling</li> </ul>"},{"location":"reference/legacy/technical-specification/#streaming-real-time-updates","title":"Streaming &amp; Real-Time Updates","text":"<ul> <li>Support for <code>run_stream()</code> on individual agents</li> <li>Workflow-level streaming for progress updates</li> <li>WebSocket/SSE integration for UI real-time updates</li> </ul>"},{"location":"reference/legacy/technical-specification/#observability-monitoring","title":"Observability &amp; Monitoring","text":"<ul> <li>Agent Framework built-in telemetry</li> <li>Application Insights integration</li> <li>Custom business metrics (processing time, success rates)</li> <li>Distributed tracing across agent chain</li> </ul>"},{"location":"reference/legacy/technical-specification/#error-handling-resilience","title":"Error Handling &amp; Resilience","text":"<ul> <li>Graceful degradation when agents fail</li> <li>Checkpoint/resume capability for long processes</li> <li>User-friendly error messages</li> <li>Automatic retry logic with exponential backoff</li> </ul>"},{"location":"reference/legacy/technical-specification/#revolutionary-success-criteria","title":"Revolutionary Success Criteria","text":""},{"location":"reference/legacy/technical-specification/#performance-targets-next-gen-standards","title":"\ud83d\ude80 Performance Targets (Next-Gen Standards)","text":"<ul> <li>Hawk-Income's Income Analysis: &lt;8 seconds with enthusiastic feedback</li> <li>Scarlet Witch-Credit's Credit Assessment: &lt;12 seconds with confidence-building results</li> <li>Doctor Strange-Risk's Risk Review: &lt;15 seconds with goal-alignment confirmation</li> <li>Cap-ital America's Decision Delivery: &lt;10 seconds with maximum celebration</li> <li>Total Dream Team Experience: &lt;2 minutes end-to-end</li> <li>Voice Response Time: &lt;200ms for natural conversation flow</li> <li>Animation Fluidity: 60fps on all mobile devices</li> <li>Availability: 99.95% uptime (industry-leading)</li> </ul>"},{"location":"reference/legacy/technical-specification/#revolutionary-user-experience-metrics","title":"\ud83c\udfaf Revolutionary User Experience Metrics","text":"<ul> <li>Completion Rate: &gt;85% (vs industry 30-40%)</li> <li>User Delight Score: &gt;9.0/10 (Net Promoter Score &gt;70)</li> <li>Voice Usage Adoption: &gt;60% of mobile users</li> <li>Social Sharing Rate: &gt;15% users share their approval celebration</li> <li>Return Engagement: &gt;25% users return for additional products</li> <li>Emotional Journey: Anxiety \u2192 Excitement \u2192 Celebration transformation</li> </ul>"},{"location":"reference/legacy/technical-specification/#mobile-first-technical-metrics","title":"\ud83d\udcf1 Mobile-First Technical Metrics","text":"<ul> <li>Mobile Traffic: &gt;70% of all interactions</li> <li>Voice Input Accuracy: &gt;95% speech recognition success</li> <li>Animation Performance: &lt;16ms frame render time</li> <li>PWA Installation Rate: &gt;30% of repeat users</li> <li>Offline Capability: Core features work without connection</li> <li>Accessibility Compliance: 100% WCAG 2.1 AA standards</li> </ul>"},{"location":"reference/legacy/technical-specification/#ai-dream-team-performance","title":"\ud83e\udd16 AI Dream Team Performance","text":"<ul> <li>Personality Consistency: &gt;95% users recognize distinct specialist traits</li> <li>Message Relevance: &gt;92% users find responses personally meaningful</li> <li>Celebration Timing: Perfect moment detection for success animations</li> <li>Agent Reliability: &gt;99.5% individual specialist success rate</li> <li>Context Retention: 100% personality consistency across workflow steps</li> </ul>"},{"location":"reference/legacy/technical-specification/#future-extensions","title":"Future Extensions","text":""},{"location":"reference/legacy/technical-specification/#advanced-features","title":"Advanced Features","text":"<ul> <li>Multi-language support for global markets</li> <li>Document upload and processing capabilities</li> <li>Integration with external credit bureaus</li> <li>Real-time loan offer optimization</li> </ul>"},{"location":"reference/legacy/technical-specification/#ai-enhancements","title":"AI Enhancements","text":"<ul> <li>Contextual conversation improvement</li> <li>Personalized recommendation engine</li> <li>Fraud detection and prevention</li> <li>Automated underwriting optimization</li> </ul>"},{"location":"reference/legacy/technical-specification/#related-documentation","title":"\ud83d\udcda Related Documentation","text":"<p>For implementation details and architectural decisions, refer to:</p>"},{"location":"reference/legacy/technical-specification/#architecture-design","title":"Architecture &amp; Design","text":"<ul> <li>System Architecture Diagram - Complete multi-agent workflow visualization</li> <li>Azure Deployment Architecture - Cloud infrastructure and security design</li> <li>Architecture Decision Records - Key technical decisions and rationale</li> </ul>"},{"location":"reference/legacy/technical-specification/#development-operations","title":"Development &amp; Operations","text":"<ul> <li>AI-Augmented Development Workflow - Revolutionary development approach</li> <li>Development Philosophy - Team productivity and AI collaboration</li> <li>API Architecture - Backend API design and streaming protocol</li> </ul>"},{"location":"reference/legacy/technical-specification/#product-business","title":"Product &amp; Business","text":"<ul> <li>Revolutionary Loan Experience Strategy - Product vision and strategy</li> <li>Business Case - Implementation ROI and business value</li> </ul> <p>This specification serves as the technical foundation for implementing a world-class loan processing experience that combines conversational AI with enterprise-grade multi-agent orchestration powered by Microsoft Agent Framework and Azure AI Foundry.</p>"},{"location":"reference/legacy/workflow-diagrams-technical/","title":"Technical Workflow Diagrams: AI-Augmented Development","text":"<p>Technical Deep-Dive: Detailed Mermaid diagrams showcasing the technical implementation of AI-augmented development workflows, based on actual Loan Avengers repository patterns.</p>"},{"location":"reference/legacy/workflow-diagrams-technical/#agent-orchestration-architecture","title":"Agent Orchestration Architecture","text":""},{"location":"reference/legacy/workflow-diagrams-technical/#multi-platform-agent-ecosystem","title":"Multi-Platform Agent Ecosystem","text":"<pre><code>graph TB\n    %% Human Orchestrator\n    subgraph \"Human Developer\"\n        DEV[Strategic Orchestrator&lt;br/&gt;Architecture Decisions&lt;br/&gt;Quality Control]\n    end\n\n    %% Claude Ecosystem  \n    subgraph \"Claude Code Platform\"\n        CA[Claude Agents]\n        CA1[system-architecture-reviewer]\n        CA2[product-manager-advisor] \n        CA3[code-reviewer]\n        CA4[ux-ui-designer]\n        CA5[gitops-ci-specialist]\n        CA6[agent-sync-coordinator]\n\n        CA --&gt; CA1\n        CA --&gt; CA2\n        CA --&gt; CA3\n        CA --&gt; CA4\n        CA --&gt; CA5\n        CA --&gt; CA6\n    end\n\n    %% GitHub Copilot Ecosystem\n    subgraph \"GitHub Copilot Platform\"  \n        GC[GitHub Chatmodes]\n        GC1[architecture-reviewer.chatmode]\n        GC2[product-manager.chatmode]\n        GC3[code-reviewer.chatmode]\n        GC4[ux-designer.chatmode]\n        GC5[gitops-ci-specialist.chatmode]\n\n        GC --&gt; GC1\n        GC --&gt; GC2\n        GC --&gt; GC3\n        GC --&gt; GC4\n        GC --&gt; GC5\n    end\n\n    %% Cursor Ecosystem\n    subgraph \"Cursor IDE Platform\"\n        CR[Cursor Rules]\n        CR1[project-rules.mdc]\n        CR2[agent-development.mdc]\n        CR3[testing.mdc]\n        CR4[security.mdc]\n\n        CR --&gt; CR1\n        CR --&gt; CR2\n        CR --&gt; CR3\n        CR --&gt; CR4\n    end\n\n    %% Cross-Platform Synchronization\n    SYNC[Agent Sync Coordinator&lt;br/&gt;Cross-Platform Consistency]\n\n    DEV --&gt; CA\n    DEV --&gt; GC  \n    DEV --&gt; CR\n    DEV --&gt; SYNC\n\n    SYNC -.-&gt; CA\n    SYNC -.-&gt; GC\n    SYNC -.-&gt; CR\n\n    classDef human fill:#ccffcc,stroke:#00cc00,stroke-width:3px\n    classDef claude fill:#ff9999,stroke:#cc0000,stroke-width:2px\n    classDef github fill:#9999ff,stroke:#0000cc,stroke-width:2px\n    classDef cursor fill:#ffcc99,stroke:#ff8800,stroke-width:2px\n    classDef sync fill:#cc99ff,stroke:#8800cc,stroke-width:3px\n\n    class DEV human\n    class CA,CA1,CA2,CA3,CA4,CA5,CA6 claude\n    class GC,GC1,GC2,GC3,GC4,GC5 github  \n    class CR,CR1,CR2,CR3,CR4 cursor\n    class SYNC sync</code></pre>"},{"location":"reference/legacy/workflow-diagrams-technical/#agent-communication-flow","title":"Agent Communication Flow","text":"<pre><code>sequenceDiagram\n    participant DEV as Human Developer\n    participant PMA as Product Manager Advisor\n    participant SAR as System Architecture Reviewer\n    participant CRA as Code Reviewer Agent\n    participant UXA as UX Designer Agent\n    participant ASC as Agent Sync Coordinator\n\n    Note over DEV,ASC: Feature Development Workflow\n\n    %% Phase 1: Requirements &amp; Planning\n    DEV-&gt;&gt;PMA: Create feature requirements\n    PMA-&gt;&gt;DEV: GitHub issues + acceptance criteria\n\n    DEV-&gt;&gt;SAR: Architecture consultation\n    SAR-&gt;&gt;DEV: Design validation + recommendations\n\n    %% Phase 2: Implementation\n    DEV-&gt;&gt;DEV: Implement critical path code\n    Note over DEV: Human handles core business logic\n\n    %% Phase 3: Parallel AI Work\n    par Parallel Agent Execution\n        DEV-&gt;&gt;CRA: Code review request\n        CRA--&gt;&gt;DEV: Technical feedback (5 min)\n    and\n        DEV-&gt;&gt;UXA: UI/UX validation\n        UXA--&gt;&gt;DEV: Design improvements (10 min)\n    end\n\n    %% Phase 4: Integration &amp; Sync\n    DEV-&gt;&gt;ASC: Synchronize across platforms\n    ASC-&gt;&gt;ASC: Update Claude + Copilot + Cursor instructions\n    ASC--&gt;&gt;DEV: Platform consistency confirmed\n\n    DEV-&gt;&gt;DEV: Final integration + deployment</code></pre>"},{"location":"reference/legacy/workflow-diagrams-technical/#development-phase-deep-dives","title":"Development Phase Deep-Dives","text":""},{"location":"reference/legacy/workflow-diagrams-technical/#issue-creation-automation","title":"Issue Creation Automation","text":"<pre><code>flowchart TD\n    A[Human: High-Level Feature Idea] --&gt; B[Product Manager Advisor Agent]\n\n    B --&gt; C{Analysis Phase}\n    C --&gt; C1[Business Value Assessment]\n    C --&gt; C2[Technical Complexity Analysis] \n    C --&gt; C3[User Story Generation]\n    C --&gt; C4[Acceptance Criteria Definition]\n\n    C1 --&gt; D[Issue Template Generation]\n    C2 --&gt; D\n    C3 --&gt; D\n    C4 --&gt; D\n\n    D --&gt; E[GitHub Issue Creation]\n    E --&gt; F[Automatic Labeling]\n    F --&gt; G[Milestone Assignment]\n    G --&gt; H[Dependency Mapping]\n\n    H --&gt; I[Ready for Development]\n\n    %% Parallel Documentation\n    D --&gt; J[Documentation Updates]\n    J --&gt; K[ADR Creation if Needed]\n\n    classDef human fill:#ccffcc,stroke:#00cc00\n    classDef agent fill:#ccccff,stroke:#0000cc  \n    classDef output fill:#ffffcc,stroke:#cccc00\n\n    class A human\n    class B,C1,C2,C3,C4 agent\n    class E,F,G,H,I,J,K output</code></pre>"},{"location":"reference/legacy/workflow-diagrams-technical/#parallel-development-orchestration","title":"Parallel Development Orchestration","text":"<pre><code>timeline\n    title AI-Augmented Parallel Development Timeline\n\n    Hour 0 : Human Strategic Planning\n           : Architecture Decision\n           : Agent Task Distribution\n\n    Hour 1 : UI Agent - Component Generation\n           : Test Agent - Unit Test Creation\n           : Docs Agent - API Documentation\n           : Human - Core Business Logic\n\n    Hour 2 : Integration Testing\n           : Cross-Component Validation\n           : Performance Optimization\n           : Human Quality Review\n\n    Hour 3 : Multi-Agent Code Review\n           : Architecture Validation\n           : UX/UI Assessment\n           : Final Integration\n\n    Hour 4 : Deployment Pipeline\n           : Documentation Sync\n           : Production Release\n           : Monitoring Setup</code></pre>"},{"location":"reference/legacy/workflow-diagrams-technical/#code-review-multi-layer-process","title":"Code Review Multi-Layer Process","text":"<pre><code>flowchart LR\n    A[Code Commit] --&gt; B[Automated Quality Gates]\n\n    B --&gt; C{Pre-Commit Checks}\n    C --&gt; C1[Ruff Linting]\n    C --&gt; C2[Type Checking]\n    C --&gt; C3[Test Coverage \u226585%]\n    C --&gt; C4[Security Scan]\n\n    C1 --&gt; D{All Checks Pass?}\n    C2 --&gt; D\n    C3 --&gt; D\n    C4 --&gt; D\n\n    D --&gt;|No| E[Fix Issues Locally]\n    E --&gt; A\n\n    D --&gt;|Yes| F[Multi-Agent Review]\n\n    F --&gt; G[Technical Review Agent]\n    F --&gt; H[Architecture Review Agent]  \n    F --&gt; I[UX Review Agent]\n    F --&gt; J[Security Review Agent]\n\n    G --&gt; K[Human Strategic Review]\n    H --&gt; K\n    I --&gt; K\n    J --&gt; K\n\n    K --&gt; L{Human Approval?}\n    L --&gt;|Changes Needed| M[Agent-Assisted Fixes]\n    M --&gt; F\n\n    L --&gt;|Approved| N[Merge to Main]\n    N --&gt; O[Auto-Deploy Pipeline]\n\n    classDef auto fill:#ccffcc,stroke:#00cc00\n    classDef agent fill:#ccccff,stroke:#0000cc\n    classDef human fill:#ffcccc,stroke:#cc0000\n    classDef output fill:#ffffcc,stroke:#cccc00\n\n    class C1,C2,C3,C4,O auto\n    class G,H,I,J,M agent\n    class K,L human\n    class N output</code></pre>"},{"location":"reference/legacy/workflow-diagrams-technical/#agent-specialization-technical-details","title":"Agent Specialization Technical Details","text":""},{"location":"reference/legacy/workflow-diagrams-technical/#system-architecture-reviewer-agent","title":"System Architecture Reviewer Agent","text":"<pre><code>mindmap\n  root((System Architecture&lt;br/&gt;Reviewer Agent))\n    Input Analysis\n      Code Changes\n        Impact Assessment\n        Dependency Analysis\n        Breaking Change Detection\n      Architecture Documents\n        ADR Compliance\n        Design Pattern Validation\n        Technology Stack Alignment\n    Validation Processes\n      Design Principles\n        SOLID Compliance\n        Clean Architecture\n        Domain-Driven Design\n      Performance Implications\n        Scalability Impact\n        Resource Utilization\n        Bottleneck Identification\n    Output Generation\n      Architecture Feedback\n        Improvement Recommendations\n        Risk Assessment\n        Alternative Approaches\n      Documentation Updates\n        ADR Suggestions\n        Diagram Updates\n        Decision Rationale</code></pre>"},{"location":"reference/legacy/workflow-diagrams-technical/#product-manager-advisor-agent","title":"Product Manager Advisor Agent","text":"<pre><code>flowchart TD\n    A[Feature Request Input] --&gt; B[Business Analysis]\n\n    B --&gt; C[User Story Generation]\n    B --&gt; D[Market Research]\n    B --&gt; E[Competitive Analysis]\n    B --&gt; F[Technical Feasibility]\n\n    C --&gt; G[Acceptance Criteria]\n    D --&gt; H[Business Value Score]\n    E --&gt; I[Competitive Advantage]\n    F --&gt; J[Implementation Complexity]\n\n    G --&gt; K[GitHub Issue Template]\n    H --&gt; K\n    I --&gt; K\n    J --&gt; K\n\n    K --&gt; L[Size Estimation]\n    L --&gt; M[Milestone Assignment]\n    M --&gt; N[Dependency Mapping]\n    N --&gt; O[Development Ready Issue]\n\n    %% Feedback Loop\n    O --&gt; P[Development Progress Tracking]\n    P --&gt; Q[Requirement Refinement]\n    Q --&gt; B\n\n    classDef analysis fill:#e1f5fe,stroke:#01579b\n    classDef generation fill:#f3e5f5,stroke:#4a148c\n    classDef output fill:#e8f5e8,stroke:#1b5e20\n\n    class B,C,D,E,F analysis\n    class G,H,I,J,K,L generation\n    class M,N,O,P,Q output</code></pre>"},{"location":"reference/legacy/workflow-diagrams-technical/#code-reviewer-agent-technical-process","title":"Code Reviewer Agent Technical Process","text":"<pre><code>graph TB\n    subgraph \"Code Analysis Engine\"\n        A[Code Diff Input] --&gt; B[Static Analysis]\n        B --&gt; C[Pattern Detection]\n        C --&gt; D[Quality Metrics]\n        D --&gt; E[Security Assessment]\n    end\n\n    subgraph \"Review Categories\"\n        F[Code Quality]\n        G[Architecture Compliance]\n        H[Performance Impact]\n        I[Security Vulnerabilities]\n        J[Test Coverage]\n        K[Documentation]\n    end\n\n    subgraph \"Feedback Generation\"\n        L[Prioritized Issues]\n        M[Improvement Suggestions]\n        N[Code Examples]\n        O[Educational Content]\n    end\n\n    E --&gt; F\n    E --&gt; G\n    E --&gt; H\n    E --&gt; I\n    E --&gt; J\n    E --&gt; K\n\n    F --&gt; L\n    G --&gt; M\n    H --&gt; N\n    I --&gt; L\n    J --&gt; M\n    K --&gt; O\n\n    L --&gt; P[GitHub Review Comments]\n    M --&gt; P\n    N --&gt; P\n    O --&gt; P\n\n    classDef engine fill:#ffecb3,stroke:#ff8f00\n    classDef category fill:#e3f2fd,stroke:#0277bd\n    classDef feedback fill:#f1f8e9,stroke:#33691e\n\n    class A,B,C,D,E engine\n    class F,G,H,I,J,K category\n    class L,M,N,O,P feedback</code></pre>"},{"location":"reference/legacy/workflow-diagrams-technical/#technical-infrastructure","title":"Technical Infrastructure","text":""},{"location":"reference/legacy/workflow-diagrams-technical/#mcp-server-integration-architecture","title":"MCP Server Integration Architecture","text":"<pre><code>graph TB\n    subgraph \"Loan Avengers Application Layer\"\n        A[IntakeAgent] \n        B[CreditAgent]\n        C[IncomeAgent]\n        D[RiskAgent]\n    end\n\n    subgraph \"MCP Server Layer\"\n        E[Application Verification&lt;br/&gt;Port 8010]\n        F[Document Processing&lt;br/&gt;Port 8011]\n        G[Financial Calculations&lt;br/&gt;Port 8012]\n    end\n\n    subgraph \"Microsoft Agent Framework\"\n        H[ChatClientAgent]\n        I[MCPStreamableHTTPTool] \n        J[AgentThread]\n    end\n\n    A --&gt; H\n    B --&gt; H\n    C --&gt; H\n    D --&gt; H\n\n    H --&gt; I\n    I --&gt; E\n    I --&gt; F\n    I --&gt; G\n\n    H --&gt; J\n\n    E --&gt; K[Identity Verification]\n    E --&gt; L[Employment Validation]\n    F --&gt; M[Document Extraction]\n    F --&gt; N[Data Validation]\n    G --&gt; O[DTI Calculation]\n    G --&gt; P[Payment Calculation]\n\n    classDef agent fill:#e1f5fe,stroke:#01579b\n    classDef mcp fill:#f3e5f5,stroke:#4a148c\n    classDef framework fill:#e8f5e8,stroke:#1b5e20\n    classDef service fill:#fff3e0,stroke:#e65100\n\n    class A,B,C,D agent\n    class E,F,G mcp\n    class H,I,J framework\n    class K,L,M,N,O,P service</code></pre>"},{"location":"reference/legacy/workflow-diagrams-technical/#cross-platform-synchronization-technical-flow","title":"Cross-Platform Synchronization Technical Flow","text":"<pre><code>sequenceDiagram\n    participant DEV as Developer\n    participant ASC as Agent Sync Coordinator\n    participant CLAUDE as CLAUDE.md\n    participant COPILOT as GitHub Copilot Instructions\n    participant CURSOR as Cursor Rules\n    participant GIT as Git Repository\n\n    Note over DEV,GIT: Instruction Synchronization Process\n\n    DEV-&gt;&gt;CLAUDE: Update development guidelines\n    DEV-&gt;&gt;ASC: Request synchronization\n\n    ASC-&gt;&gt;CLAUDE: Analyze changes\n    ASC-&gt;&gt;ASC: Identify sync requirements\n\n    par Parallel Platform Updates\n        ASC-&gt;&gt;COPILOT: Generate Copilot-specific instructions\n        ASC-&gt;&gt;CURSOR: Generate Cursor-specific rules\n    end\n\n    ASC-&gt;&gt;DEV: Present synchronization changes\n    DEV-&gt;&gt;DEV: Review and approve changes\n\n    DEV-&gt;&gt;GIT: Commit synchronized instructions\n    Note over DEV,GIT: Single commit with all platform updates\n\n    GIT--&gt;&gt;CLAUDE: Updated master reference\n    GIT--&gt;&gt;COPILOT: Updated Copilot instructions  \n    GIT--&gt;&gt;CURSOR: Updated Cursor rules\n\n    Note over DEV,GIT: Perfect cross-platform consistency</code></pre>"},{"location":"reference/legacy/workflow-diagrams-technical/#quality-gate-automation","title":"Quality Gate Automation","text":"<pre><code>flowchart TD\n    A[Code Change] --&gt; B[Local Quality Checks]\n\n    B --&gt; C[Ruff Linting]\n    B --&gt; D[Ruff Formatting]\n    B --&gt; E[Type Checking]\n    B --&gt; F[Unit Tests]\n    B --&gt; G[Coverage Analysis]\n\n    C --&gt; H{All Local Checks Pass?}\n    D --&gt; H\n    E --&gt; H\n    F --&gt; H\n    G --&gt; H\n\n    H --&gt;|No| I[Fix Issues Locally]\n    I --&gt; B\n\n    H --&gt;|Yes| J[Agent Code Review]\n\n    J --&gt; K[Technical Validation]\n    J --&gt; L[Architecture Review]\n    J --&gt; M[Security Assessment]\n    J --&gt; N[Performance Analysis]\n\n    K --&gt; O{Agent Review Pass?}\n    L --&gt; O\n    M --&gt; O\n    N --&gt; O\n\n    O --&gt;|Issues Found| P[Agent-Suggested Fixes]\n    P --&gt; Q[Apply Fixes]\n    Q --&gt; B\n\n    O --&gt;|Pass| R[Human Strategic Review]\n\n    R --&gt; S{Human Approval?}\n    S --&gt;|Changes Needed| T[Human-Directed Iteration]\n    T --&gt; J\n\n    S --&gt;|Approved| U[Merge to Main]\n    U --&gt; V[CI/CD Pipeline]\n    V --&gt; W[Production Deployment]\n\n    classDef local fill:#e8f5e8,stroke:#2e7d32\n    classDef agent fill:#e3f2fd,stroke:#1565c0\n    classDef human fill:#fce4ec,stroke:#c2185b\n    classDef deploy fill:#fff8e1,stroke:#f57c00\n\n    class B,C,D,E,F,G,I local\n    class J,K,L,M,N,P,Q agent\n    class R,S,T human\n    class U,V,W deploy</code></pre>"},{"location":"reference/legacy/workflow-diagrams-technical/#performance-optimization-patterns","title":"Performance Optimization Patterns","text":""},{"location":"reference/legacy/workflow-diagrams-technical/#token-usage-optimization","title":"Token Usage Optimization","text":"<pre><code>graph LR\n    subgraph \"Token Optimization Strategy\"\n        A[Persona Optimization&lt;br/&gt;300-500 lines] --&gt; B[75% Token Reduction]\n        C[File References&lt;br/&gt;vs Inline Code] --&gt; D[Context Window Efficiency]\n        E[Cross-References&lt;br/&gt;vs Duplication] --&gt; F[Coherent Instructions]\n        G[Concise Directives&lt;br/&gt;vs Verbose Explanations] --&gt; H[10x Faster Responses]\n    end\n\n    subgraph \"Cost Impact\"\n        B --&gt; I[$100/month \u2192 $25/month]\n        D --&gt; J[30s responses \u2192 3s responses]\n        F --&gt; K[Consistent Agent Behavior]\n        H --&gt; L[Higher Developer Productivity]\n    end\n\n    classDef optimization fill:#e8f5e8,stroke:#2e7d32\n    classDef impact fill:#e3f2fd,stroke:#1565c0\n\n    class A,C,E,G optimization\n    class B,D,F,H,I,J,K,L impact</code></pre>"},{"location":"reference/legacy/workflow-diagrams-technical/#context-management-strategy","title":"Context Management Strategy","text":"<pre><code>timeline\n    title Context Loss Prevention Strategy\n\n    Session Start : Clean Repository State\n                  : Load Agent Instructions\n                  : Initialize Working Context\n\n    2-3 Hours    : Active Development\n                 : Agent Collaboration\n                 : Iterative Improvements\n\n    Context Check : /compact Command\n                  : Git Checkpoint Commit\n                  : Context Consolidation\n\n    Session End  : Summary Documentation\n                 : ADR Updates if Needed\n                 : Clean Session Closure\n\n    Next Session : Context Anchoring\n                 : Previous Session Review\n                 : Strategic Continuity</code></pre>"},{"location":"reference/legacy/workflow-diagrams-technical/#deployment-operations","title":"Deployment &amp; Operations","text":""},{"location":"reference/legacy/workflow-diagrams-technical/#cicd-pipeline-with-ai-integration","title":"CI/CD Pipeline with AI Integration","text":"<pre><code>flowchart TD\n    A[Code Commit] --&gt; B[GitHub Actions Trigger]\n\n    B --&gt; C[Quality Gates]\n    C --&gt; D[Ruff Linting]\n    C --&gt; E[Type Checking] \n    C --&gt; F[Unit Tests]\n    C --&gt; G[Coverage Report]\n\n    D --&gt; H{Quality Check Pass?}\n    E --&gt; H\n    F --&gt; H\n    G --&gt; H\n\n    H --&gt;|Fail| I[Notify Developer]\n    I --&gt; J[Agent-Suggested Fixes]\n    J --&gt; A\n\n    H --&gt;|Pass| K[Integration Tests]\n    K --&gt; L[Security Scan]\n    L --&gt; M[Performance Tests]\n\n    M --&gt; N{All Tests Pass?}\n    N --&gt;|Fail| O[Agent Root Cause Analysis]\n    O --&gt; P[Automated Fix Attempt]\n    P --&gt; A\n\n    N --&gt;|Pass| Q[Staging Deployment]\n    Q --&gt; R[Agent Smoke Tests]\n    R --&gt; S[Performance Validation]\n\n    S --&gt; T{Staging Validation?}\n    T --&gt;|Fail| U[Agent Rollback]\n    U --&gt; V[Issue Analysis]\n\n    T --&gt;|Pass| W[Production Deployment]\n    W --&gt; X[Agent Health Monitoring]\n    X --&gt; Y[Performance Tracking]\n\n    classDef quality fill:#e8f5e8,stroke:#2e7d32\n    classDef agent fill:#e3f2fd,stroke:#1565c0\n    classDef deploy fill:#fff8e1,stroke:#f57c00\n    classDef monitor fill:#f3e5f5,stroke:#7b1fa2\n\n    class C,D,E,F,G,H quality\n    class I,J,O,P,R,U,V,X agent\n    class K,L,M,Q,W deploy\n    class S,Y monitor</code></pre>"},{"location":"reference/legacy/workflow-diagrams-technical/#monitoring-observability","title":"Monitoring &amp; Observability","text":"<pre><code>graph TB\n    subgraph \"Application Metrics\"\n        A1[Response Times]\n        A2[Error Rates]\n        A3[Throughput]\n        A4[User Experience]\n    end\n\n    subgraph \"Agent Performance\"\n        B1[Token Usage]\n        B2[Processing Time]\n        B3[Quality Scores]\n        B4[Success Rates]\n    end\n\n    subgraph \"Infrastructure Health\"\n        C1[Server Resources]\n        C2[MCP Server Status]\n        C3[Database Performance]\n        C4[Network Latency]\n    end\n\n    subgraph \"Business Intelligence\"\n        D1[Development Velocity]\n        D2[Quality Trends]\n        D3[Cost Efficiency]\n        D4[Team Productivity]\n    end\n\n    A1 --&gt; E[Azure Monitor]\n    A2 --&gt; E\n    A3 --&gt; E\n    A4 --&gt; E\n\n    B1 --&gt; F[Agent Analytics]\n    B2 --&gt; F\n    B3 --&gt; F\n    B4 --&gt; F\n\n    C1 --&gt; G[Infrastructure Monitoring]\n    C2 --&gt; G\n    C3 --&gt; G\n    C4 --&gt; G\n\n    D1 --&gt; H[Business Dashboard]\n    D2 --&gt; H\n    D3 --&gt; H\n    D4 --&gt; H\n\n    E --&gt; I[Unified Dashboard]\n    F --&gt; I\n    G --&gt; I\n    H --&gt; I\n\n    I --&gt; J[Automated Alerting]\n    I --&gt; K[Performance Optimization]\n    I --&gt; L[Predictive Scaling]\n\n    classDef app fill:#e8f5e8,stroke:#2e7d32\n    classDef agent fill:#e3f2fd,stroke:#1565c0\n    classDef infra fill:#fff8e1,stroke:#f57c00\n    classDef business fill:#f3e5f5,stroke:#7b1fa2\n    classDef unified fill:#ffebee,stroke:#d32f2f\n\n    class A1,A2,A3,A4 app\n    class B1,B2,B3,B4 agent\n    class C1,C2,C3,C4 infra\n    class D1,D2,D3,D4 business\n    class I,J,K,L unified</code></pre>"},{"location":"reference/legacy/workflow-diagrams-technical/#future-evolution-architecture","title":"Future Evolution Architecture","text":""},{"location":"reference/legacy/workflow-diagrams-technical/#next-generation-agent-capabilities","title":"Next-Generation Agent Capabilities","text":"<pre><code>roadmap\n    title Agent Evolution Roadmap\n\n    Current (2024Q4) : 6 Specialized Agents\n                     : Manual Orchestration\n                     : Human Strategic Control\n\n    Q1 2025         : 12+ Domain Agents\n                    : Improved Autonomy\n                    : Enhanced Quality Gates\n\n    Q2 2025         : Agent-to-Agent Communication\n                    : Autonomous Planning\n                    : Self-Optimization\n\n    Q3 2025         : Predictive Development\n                    : Cross-Project Learning\n                    : Market Intelligence Integration\n\n    Q4 2025         : Self-Evolving Architecture\n                    : Autonomous Decision Making\n                    : Human Partnership Model</code></pre>"},{"location":"reference/legacy/workflow-diagrams-technical/#scalability-architecture","title":"Scalability Architecture","text":"<pre><code>graph TB\n    subgraph \"Current Scale (Single Developer)\"\n        A[1 Human Developer]\n        B[6 AI Agents]\n        C[3 MCP Servers]\n        D[1 Application Domain]\n    end\n\n    subgraph \"Team Scale (2-3 Developers)\"\n        E[2-3 Human Developers]\n        F[12+ AI Agents]\n        G[6+ MCP Servers]\n        H[Multiple Application Domains]\n    end\n\n    subgraph \"Enterprise Scale (5-10 Developers)\"\n        I[5-10 Human Developers]\n        J[50+ AI Agents]\n        K[20+ MCP Servers]\n        L[Cross-Project Intelligence]\n    end\n\n    A --&gt; E\n    B --&gt; F\n    C --&gt; G\n    D --&gt; H\n\n    E --&gt; I\n    F --&gt; J\n    G --&gt; K\n    H --&gt; L\n\n    classDef current fill:#e8f5e8,stroke:#2e7d32\n    classDef team fill:#e3f2fd,stroke:#1565c0\n    classDef enterprise fill:#fff8e1,stroke:#f57c00\n\n    class A,B,C,D current\n    class E,F,G,H team\n    class I,J,K,L enterprise</code></pre> <p>Technical Implementation Notes: - All diagrams based on actual Loan Avengers repository patterns - MCP server architecture matches implemented system - Agent specialization reflects current <code>.claude/agents/</code> and <code>.github/chatmodes/</code> - Quality gates match current CI/CD pipeline in <code>.github/workflows/</code> - Performance metrics based on actual development velocity observed - Scalability projections based on demonstrated patterns and capabilities</p> <p>These technical diagrams complement the strategic analysis in <code>ai-augmented-workflow-comparison.md</code> with implementation-specific details and architectural patterns.</p>"},{"location":"reference/legacy/api/api-architecture/","title":"Loan Avengers API Architecture","text":""},{"location":"reference/legacy/api/api-architecture/#overview","title":"Overview","text":"<p>The Loan Avengers API exposes our multi-agent loan processing system to user interfaces through a REST API with real-time streaming capabilities. The architecture leverages Microsoft Agent Framework for workflow orchestration and conversation state management, aligned with the Model Context Protocol (MCP) Streamable HTTP transport pattern.</p>"},{"location":"reference/legacy/api/api-architecture/#system-architecture","title":"System Architecture","text":"<pre><code>\u250c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2510\n\u2502     UI      \u2502 (React/TypeScript)\n\u2514\u2500\u2500\u2500\u2500\u2500\u2500\u252c\u2500\u2500\u2500\u2500\u2500\u2500\u2518\n       \u2502 HTTPS + Entra ID\n       \u2502\n\u250c\u2500\u2500\u2500\u2500\u2500\u2500\u25bc\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2510\n\u2502         FastAPI Backend                     \u2502\n\u2502  \u250c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2510    \u2502\n\u2502  \u2502    Entra ID Authentication         \u2502    \u2502\n\u2502  \u2514\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2518    \u2502\n\u2502  \u250c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2510    \u2502\n\u2502  \u2502   Application Management API       \u2502    \u2502\n\u2502  \u2514\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2518    \u2502\n\u2502  \u250c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2510    \u2502\n\u2502  \u2502   Chat API (AgentThread)           \u2502    \u2502\n\u2502  \u2514\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2518    \u2502\n\u2502  \u250c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2510    \u2502\n\u2502  \u2502   Streamable HTTP Endpoint         \u2502    \u2502\n\u2502  \u2514\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2518    \u2502\n\u2514\u2500\u2500\u2500\u2500\u2500\u2500\u252c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2518\n       \u2502\n\u250c\u2500\u2500\u2500\u2500\u2500\u2500\u25bc\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2510\n\u2502  Agent Framework Sequential Workflow        \u2502\n\u2502  \u250c\u2500\u2500\u2500\u2500\u2510  \u250c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2510  \u250c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2510  \u250c\u2500\u2500\u2500\u2500\u2500\u2500\u2510 \u2502\n\u2502  \u2502Int \u2502\u2192\u2502 Credit \u2502\u2192\u2502 Income \u2502\u2192\u2502 Risk \u2502  \u2502\n\u2502  \u2502ake \u2502  \u2514\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2518  \u2514\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2518  \u2514\u2500\u2500\u2500\u2500\u2500\u2500\u2518 \u2502\n\u2502  \u2514\u2500\u2500\u2500\u2500\u2518                                     \u2502\n\u2502           AgentThread (Conversation State)  \u2502\n\u2514\u2500\u2500\u2500\u2500\u2500\u2500\u252c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2518\n       \u2502\n\u250c\u2500\u2500\u2500\u2500\u2500\u2500\u25bc\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2510\n\u2502        MCP Servers (Tools)                  \u2502\n\u2502  \u250c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2510  \u250c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2510         \u2502\n\u2502  \u2502 Application \u2502  \u2502  Document   \u2502         \u2502\n\u2502  \u2502 Verification\u2502  \u2502  Processing \u2502         \u2502\n\u2502  \u2514\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2518  \u2514\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2518         \u2502\n\u2514\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2518\n\nStorage Layer:\n- Azure Cache for Redis: AgentThread state (30-min TTL)\n- Azure Blob Storage: Document uploads\n- Cosmos DB: Completed applications (long-term)\n- Azure Key Vault: Secrets and credentials\n</code></pre>"},{"location":"reference/legacy/api/api-architecture/#core-design-principles","title":"Core Design Principles","text":""},{"location":"reference/legacy/api/api-architecture/#1-agent-framework-first","title":"1. Agent Framework First","text":"<p>We leverage Microsoft Agent Framework's built-in capabilities rather than building custom infrastructure:</p> <ul> <li>SequentialBuilder: Orchestrates agents in sequential workflow (Intake \u2192 Credit \u2192 Income \u2192 Risk \u2192 Decision)</li> <li>AgentThread: Manages conversation state with built-in ChatMessageStore protocol</li> <li>Workflow.run_stream(): Streams WorkflowEvents as execution progresses</li> <li>WorkflowEvent types: ExecutorInvokedEvent, ExecutorCompletedEvent, WorkflowOutputEvent</li> </ul> <p>Benefits: - No custom message queues (Service Bus) needed - No custom event streaming infrastructure - Type-safe workflow construction - Built-in error handling and observability</p>"},{"location":"reference/legacy/api/api-architecture/#2-streamable-http-transport","title":"2. Streamable HTTP Transport","text":"<p>Aligned with MCP specification (2025-03-26), our API uses a single HTTP POST endpoint that can optionally stream events:</p> <pre><code>POST /api/v1/applications/{id}/stream\nAccept: text/event-stream\nAuthorization: Bearer &lt;entra-id-token&gt;\nContent-Type: application/json\n\n{\n  \"action\": \"process\",\n  \"application\": {...}\n}\n</code></pre> <p>Response Modes: - JSON Response: Single application status object (Accept: application/json) - Event Stream: Server-Sent Events for real-time updates (Accept: text/event-stream)</p> <p>Event Format (JSON-RPC style, aligned with MCP): <pre><code>{\n  \"jsonrpc\": \"2.0\",\n  \"method\": \"workflow/executor_invoked\",\n  \"params\": {\n    \"executor_id\": \"intake_agent\",\n    \"timestamp\": \"2025-09-28T10:30:00Z\",\n    \"input_type\": \"LoanApplication\"\n  }\n}\n</code></pre></p>"},{"location":"reference/legacy/api/api-architecture/#3-conversation-state-with-agentthread","title":"3. Conversation State with AgentThread","text":"<p>Microsoft Agent Framework provides AgentThread for conversation state management:</p> <pre><code>from agent_framework import AgentThread\n\n# Create thread with Redis-backed store\nthread = AgentThread(message_store=RedisChatMessageStore(application_id))\n\n# Pass thread to agent (conversation history maintained automatically)\nresponse = await intake_agent.run(user_message, thread=thread)\n\n# Thread contains full conversation history\nmessages = await thread.message_store.list_messages()\n</code></pre> <p>AgentThread provides: - Automatic conversation history management - Serialization/deserialization for persistence - Thread-per-application isolation - Type-safe message passing</p> <p>Redis Storage: - Key: <code>thread:{application_id}</code> - Value: Serialized AgentThread state (ChatMessage list) - TTL: 30 minutes (session timeout)</p>"},{"location":"reference/legacy/api/api-architecture/#4-security-by-design","title":"4. Security by Design","text":"<p>Authentication: Entra ID (Azure Active Directory) on every endpoint - Uses DefaultAzureCredential for Azure-managed identity - Token validation on every API request - No API keys or passwords</p> <p>Authorization: Role-based access control - <code>loan.apply</code>: Submit loan applications - <code>loan.view</code>: View own applications - <code>loan.admin</code>: Admin operations</p> <p>Data Protection: - TLS 1.3 for all connections - PII encryption at rest (Cosmos DB) - Secrets in Azure Key Vault - No SSN in API calls (use applicant_id UUID) - Audit logging (immutable)</p>"},{"location":"reference/legacy/api/api-architecture/#5-cloud-native-deployment","title":"5. Cloud-Native Deployment","text":"<p>Azure Container Apps: - Serverless container platform - Auto-scaling (1-10 replicas based on CPU/memory) - Integrated with Azure services (Key Vault, Application Insights) - VNet integration for private networking - Zero-downtime deployments</p>"},{"location":"reference/legacy/api/api-architecture/#api-endpoints","title":"API Endpoints","text":""},{"location":"reference/legacy/api/api-architecture/#application-management","title":"Application Management","text":""},{"location":"reference/legacy/api/api-architecture/#start-new-application","title":"Start New Application","text":"<pre><code>POST /api/v1/applications\nAuthorization: Bearer &lt;entra-id-token&gt;\nContent-Type: application/json\n\n{\n  \"applicant_name\": \"Intake Agent Doe\",\n  \"loan_amount\": 50000.00,\n  \"loan_purpose\": \"home_purchase\",\n  ...\n}\n\nResponse 201:\n{\n  \"application_id\": \"LN1234567890\",\n  \"session_id\": \"thread_abc123\",\n  \"status\": \"STARTED\",\n  \"intake_agent\": \"John_The_Eagle_Eye\",\n  \"initial_message\": \"Hi! I'm Intake Agent, your application validator...\",\n  \"created_at\": \"2025-09-28T10:30:00Z\"\n}\n</code></pre>"},{"location":"reference/legacy/api/api-architecture/#get-application-status","title":"Get Application Status","text":"<pre><code>GET /api/v1/applications/{id}\nAuthorization: Bearer &lt;entra-id-token&gt;\n\nResponse 200:\n{\n  \"application_id\": \"LN1234567890\",\n  \"status\": \"PROCESSING\",\n  \"current_stage\": \"CREDIT\",\n  \"current_agent\": \"credit\",\n  \"progress\": 0.5,\n  \"created_at\": \"2025-09-28T10:30:00Z\",\n  \"updated_at\": \"2025-09-28T10:35:00Z\"\n}\n</code></pre>"},{"location":"reference/legacy/api/api-architecture/#conversational-chat","title":"Conversational Chat","text":""},{"location":"reference/legacy/api/api-architecture/#send-chat-message","title":"Send Chat Message","text":"<pre><code>POST /api/v1/applications/{id}/chat\nAuthorization: Bearer &lt;entra-id-token&gt;\nContent-Type: application/json\n\n{\n  \"message\": \"My annual income is $75,000\"\n}\n\nResponse 200:\n{\n  \"agent_name\": \"John_The_Eagle_Eye\",\n  \"agent_response\": \"Great! That's a solid income. Now let's talk about...\",\n  \"assessment\": {\n    \"validation_status\": \"COMPLETE\",\n    \"routing_decision\": \"STANDARD\",\n    \"next_agent\": \"credit\",\n    ...\n  },\n  \"next_question\": \"Do you have any existing debt?\",\n  \"workflow_stage\": \"INTAKE_COMPLETE\"\n}\n</code></pre>"},{"location":"reference/legacy/api/api-architecture/#get-chat-history","title":"Get Chat History","text":"<pre><code>GET /api/v1/applications/{id}/chat/history\nAuthorization: Bearer &lt;entra-id-token&gt;\n\nResponse 200:\n{\n  \"messages\": [\n    {\n      \"role\": \"assistant\",\n      \"text\": \"Hi! I'm Intake Agent...\",\n      \"timestamp\": \"2025-09-28T10:30:00Z\"\n    },\n    {\n      \"role\": \"user\",\n      \"text\": \"My annual income is $75,000\",\n      \"timestamp\": \"2025-09-28T10:31:00Z\"\n    },\n    ...\n  ]\n}\n</code></pre>"},{"location":"reference/legacy/api/api-architecture/#real-time-streaming","title":"Real-Time Streaming","text":""},{"location":"reference/legacy/api/api-architecture/#streamable-http-endpoint","title":"Streamable HTTP Endpoint","text":"<pre><code>POST /api/v1/applications/{id}/stream\nAccept: text/event-stream\nAuthorization: Bearer &lt;entra-id-token&gt;\n\nResponse 200:\nContent-Type: text/event-stream\n\nevent: workflow_started\ndata: {\"state\": \"RUNNING\", \"timestamp\": \"2025-09-28T10:30:00Z\"}\n\nevent: executor_invoked\ndata: {\"executor_id\": \"intake_agent\", \"input_type\": \"LoanApplication\"}\n\nevent: executor_completed\ndata: {\"executor_id\": \"intake_agent\", \"output\": {...}}\n\nevent: workflow_output\ndata: {\"output_type\": \"IntakeAssessment\", \"data\": {...}}\n</code></pre>"},{"location":"reference/legacy/api/api-architecture/#document-upload","title":"Document Upload","text":""},{"location":"reference/legacy/api/api-architecture/#upload-document","title":"Upload Document","text":"<pre><code>POST /api/v1/applications/{id}/documents\nAuthorization: Bearer &lt;entra-id-token&gt;\nContent-Type: multipart/form-data\n\nfile: &lt;binary&gt;\ndocument_type: \"pay_stub\"\n\nResponse 201:\n{\n  \"document_id\": \"doc_abc123\",\n  \"filename\": \"paystub.pdf\",\n  \"size\": 524288,\n  \"document_type\": \"pay_stub\",\n  \"uploaded_at\": \"2025-09-28T10:30:00Z\"\n}\n</code></pre>"},{"location":"reference/legacy/api/api-architecture/#agent-workflow-orchestration","title":"Agent Workflow Orchestration","text":""},{"location":"reference/legacy/api/api-architecture/#sequential-workflow-pattern","title":"Sequential Workflow Pattern","text":"<p>Using Agent Framework's SequentialBuilder:</p> <pre><code>from agent_framework import SequentialBuilder\nfrom loan_avengers.agents import IntakeAgent, CreditAgent, IncomeAgent, RiskAgent\n\n# Initialize agents\nintake_agent = IntakeAgent()\ncredit_agent = CreditAgent()\nincome_agent = IncomeAgent()\nrisk_agent = RiskAgent()\n\n# Build sequential workflow\nworkflow = SequentialBuilder().participants([\n    intake_agent,\n    credit_agent,\n    income_agent,\n    risk_agent,\n]).build()\n\n# Execute with streaming\napplication = LoanApplication(...)\nthread = AgentThread(message_store=RedisChatMessageStore(application.application_id))\n\nasync for event in workflow.run_stream(application, thread=thread):\n    if isinstance(event, WorkflowOutputEvent):\n        # Agent produced assessment\n        publish_to_client(event.data)\n    elif isinstance(event, ExecutorCompletedEvent):\n        # Agent finished processing\n        update_progress(event.executor_id)\n    elif isinstance(event, WorkflowFailedEvent):\n        # Handle failure\n        handle_error(event.error_details)\n</code></pre>"},{"location":"reference/legacy/api/api-architecture/#conversation-state-flow","title":"Conversation State Flow","text":"<pre><code>User Message \u2192 FastAPI \u2192 Load AgentThread from Redis\n                          \u2193\n                    IntakeAgent.run(message, thread=thread)\n                          \u2193\n                    Agent processes with conversation history\n                          \u2193\n                    AgentThread updated with new messages\n                          \u2193\n                    Save AgentThread to Redis\n                          \u2193\n                    Return response to UI\n</code></pre>"},{"location":"reference/legacy/api/api-architecture/#error-handling-strategy","title":"Error Handling Strategy","text":""},{"location":"reference/legacy/api/api-architecture/#workflow-level-errors","title":"Workflow-Level Errors","text":"<p>Agent Framework provides built-in error handling through WorkflowEvents:</p> <pre><code>async for event in workflow.run_stream(application):\n    if isinstance(event, WorkflowFailedEvent):\n        error_details = event.error_details\n\n        # Log error\n        logger.error(f\"Workflow failed: {error_details.message}\")\n\n        # Fallback to manual review\n        return create_manual_review_response(application, error_details)\n</code></pre>"},{"location":"reference/legacy/api/api-architecture/#agent-level-errors","title":"Agent-Level Errors","text":"<p>Individual agents handle errors internally and return fallback assessments:</p> <pre><code># IntakeAgent error handling (built-in)\ntry:\n    assessment = await agent.run(application, thread=thread)\nexcept Exception as e:\n    # Agent returns fallback IntakeAssessment\n    assessment = IntakeAssessment(\n        validation_status=\"FAILED\",\n        routing_decision=\"MANUAL\",\n        processing_notes=f\"Processing failed: {str(e)}\"\n    )\n</code></pre>"},{"location":"reference/legacy/api/api-architecture/#api-level-errors","title":"API-Level Errors","text":"<p>FastAPI handles HTTP errors with structured responses:</p> <pre><code>{\n  \"error\": {\n    \"code\": \"AUTHENTICATION_FAILED\",\n    \"message\": \"Invalid Entra ID token\",\n    \"details\": \"Token expired at 2025-09-28T10:00:00Z\"\n  },\n  \"request_id\": \"req_abc123\",\n  \"timestamp\": \"2025-09-28T10:30:00Z\"\n}\n</code></pre>"},{"location":"reference/legacy/api/api-architecture/#performance-considerations","title":"Performance Considerations","text":""},{"location":"reference/legacy/api/api-architecture/#scaling-strategy","title":"Scaling Strategy","text":"<p>Horizontal Scaling: - Azure Container Apps auto-scales based on CPU/memory - Each replica is stateless (state in Redis) - Load balanced automatically</p> <p>Agent Workflow: - Sequential processing per application (no parallelization needed) - Agents are lightweight (no pre-warming required) - MCP servers scale independently</p> <p>Caching: - AgentThread state cached in Redis (30-min TTL) - Completed assessments cached for duplicate requests - Azure Front Door CDN for static assets</p>"},{"location":"reference/legacy/api/api-architecture/#latency-targets","title":"Latency Targets","text":"<ul> <li>Application creation: &lt; 200ms</li> <li>Chat response: &lt; 2 seconds (includes agent processing)</li> <li>Full workflow: &lt; 30 seconds (all agents)</li> <li>Stream event delivery: &lt; 100ms</li> </ul>"},{"location":"reference/legacy/api/api-architecture/#deployment-architecture","title":"Deployment Architecture","text":""},{"location":"reference/legacy/api/api-architecture/#azure-container-apps-configuration","title":"Azure Container Apps Configuration","text":"<pre><code>apiVersion: 2024-03-01\nproperties:\n  managedEnvironmentId: /subscriptions/.../managedEnvironments/loan-avengers-env\n  configuration:\n    activeRevisionsMode: Single\n    ingress:\n      external: true\n      targetPort: 8000\n      traffic:\n        - latestRevision: true\n          weight: 100\n      corsPolicy:\n        allowedOrigins:\n          - https://loanavengers.com\n        allowedMethods:\n          - GET\n          - POST\n          - DELETE\n        allowedHeaders:\n          - Authorization\n          - Content-Type\n          - Accept\n      customDomains:\n        - name: api.loanavengers.com\n          certificateId: /subscriptions/.../certificates/api-cert\n    secrets:\n      - name: foundry-endpoint\n        keyVaultUrl: https://loan-avengers-kv.vault.azure.net/secrets/foundry-endpoint\n      - name: redis-connection-string\n        keyVaultUrl: https://loan-avengers-kv.vault.azure.net/secrets/redis-connection-string\n  template:\n    containers:\n      - name: loan-avengers-api\n        image: loanavengersacr.azurecr.io/loan-avengers-api:latest\n        resources:\n          cpu: 1.0\n          memory: 2Gi\n        env:\n          - name: FOUNDRY_PROJECT_ENDPOINT\n            secretRef: foundry-endpoint\n          - name: REDIS_CONNECTION_STRING\n            secretRef: redis-connection-string\n          - name: APPLICATIONINSIGHTS_CONNECTION_STRING\n            secretRef: appinsights-connection-string\n        probes:\n          liveness:\n            httpGet:\n              path: /api/v1/health\n              port: 8000\n            initialDelaySeconds: 10\n            periodSeconds: 30\n          readiness:\n            httpGet:\n              path: /api/v1/health\n              port: 8000\n            initialDelaySeconds: 5\n            periodSeconds: 10\n    scale:\n      minReplicas: 1\n      maxReplicas: 10\n      rules:\n        - name: http-rule\n          http:\n            metadata:\n              concurrentRequests: \"100\"\n        - name: cpu-rule\n          custom:\n            type: cpu\n            metadata:\n              value: \"70\"\n</code></pre>"},{"location":"reference/legacy/api/api-architecture/#environment-variables","title":"Environment Variables","text":"<p>Required environment variables (from Azure Key Vault):</p> <pre><code># Azure AI Foundry\nFOUNDRY_PROJECT_ENDPOINT=https://your-project.projects.ai.azure.com\nFOUNDRY_MODEL_DEPLOYMENT_NAME=gpt-4\n\n# Azure Cache for Redis\nREDIS_CONNECTION_STRING=rediss://loan-avengers-redis.redis.cache.windows.net:6380,...\n\n# Azure Blob Storage\nAZURE_STORAGE_CONNECTION_STRING=DefaultEndpointsProtocol=https;...\n\n# Azure Cosmos DB\nCOSMOS_DB_ENDPOINT=https://loan-avengers-cosmos.documents.azure.com:443/\nCOSMOS_DB_DATABASE_NAME=loanavengers\n\n# Application Insights\nAPPLICATIONINSIGHTS_CONNECTION_STRING=InstrumentationKey=...;IngestionEndpoint=https://...\n\n# MCP Servers (internal networking)\nMCP_APP_VERIFICATION_PORT=8010\nMCP_DOCUMENT_PROCESSING_PORT=8011\nMCP_FINANCIAL_CALCULATIONS_PORT=8012\n\n# Security\nALLOWED_ORIGINS=https://loanavengers.com,https://app.loanavengers.com\n</code></pre>"},{"location":"reference/legacy/api/api-architecture/#observability","title":"Observability","text":""},{"location":"reference/legacy/api/api-architecture/#application-insights-integration","title":"Application Insights Integration","text":"<p>All components send telemetry to Azure Application Insights:</p> <ul> <li>API Metrics: Request rate, latency, error rate</li> <li>Agent Metrics: Processing time per agent, success rate</li> <li>Workflow Metrics: Completion rate, average duration</li> <li>Custom Events: Agent decisions, routing decisions</li> </ul>"},{"location":"reference/legacy/api/api-architecture/#logging-structure","title":"Logging Structure","text":"<pre><code>{\n  \"timestamp\": \"2025-09-28T10:30:00Z\",\n  \"level\": \"INFO\",\n  \"logger\": \"loan_avengers.api\",\n  \"message\": \"Application processed\",\n  \"application_id\": \"LN123456****\",  # Masked PII\n  \"agent\": \"intake\",\n  \"validation_status\": \"COMPLETE\",\n  \"routing_decision\": \"STANDARD\",\n  \"tokens_used\": 1250,\n  \"duration_ms\": 1850,\n  \"trace_id\": \"abc123\",\n  \"span_id\": \"def456\"\n}\n</code></pre>"},{"location":"reference/legacy/api/api-architecture/#monitoring-dashboards","title":"Monitoring Dashboards","text":"<p>Key metrics to monitor:</p> <ol> <li>API Health:</li> <li>Request rate (requests/second)</li> <li>Latency (p50, p95, p99)</li> <li>Error rate (%)</li> <li> <p>4xx vs 5xx errors</p> </li> <li> <p>Workflow Performance:</p> </li> <li>Workflow completion rate (%)</li> <li>Average workflow duration (seconds)</li> <li>Agent processing time (seconds per agent)</li> <li> <p>Failure rate by agent</p> </li> <li> <p>Infrastructure:</p> </li> <li>Container CPU/memory usage</li> <li>Redis hit rate</li> <li>Blob Storage throughput</li> <li>Cosmos DB RU consumption</li> </ol>"},{"location":"reference/legacy/api/api-architecture/#next-steps","title":"Next Steps","text":"<ol> <li>Review API Endpoints Specification for detailed endpoint documentation</li> <li>Review Streaming Protocol for event formats</li> <li>Review Deployment Guide for deployment instructions</li> <li>Review Architecture Decision Records in <code>docs/decisions/adr-00*.md</code></li> </ol>"},{"location":"reference/legacy/api/api-endpoints/","title":"Loan Avengers API Endpoints Specification","text":""},{"location":"reference/legacy/api/api-endpoints/#base-url","title":"Base URL","text":"<pre><code>Production: https://api.loanavengers.com/api/v1\nStaging: https://staging-api.loanavengers.com/api/v1\nDevelopment: http://localhost:8000/api/v1\n</code></pre>"},{"location":"reference/legacy/api/api-endpoints/#authentication","title":"Authentication","text":"<p>All API endpoints require Azure Entra ID authentication using Bearer tokens.</p> <p>Header Required: <pre><code>Authorization: Bearer &lt;entra_id_token&gt;\n</code></pre></p> <p>Token Acquisition: <pre><code># Azure CLI\naz login\naz account get-access-token --resource https://api.loanavengers.com\n</code></pre></p> <p>Token Claims Required: - <code>aud</code>: <code>https://api.loanavengers.com</code> - <code>roles</code>: One or more of <code>loan.apply</code>, <code>loan.view</code>, <code>loan.admin</code></p>"},{"location":"reference/legacy/api/api-endpoints/#rate-limiting","title":"Rate Limiting","text":"<ul> <li>Applications: 10 applications per hour per user</li> <li>Chat Messages: 10 messages per minute per application</li> <li>Document Uploads: 20 uploads per hour per user</li> <li>General API: 1000 requests per minute per user</li> </ul> <p>Rate limit headers in responses: <pre><code>X-RateLimit-Limit: 1000\nX-RateLimit-Remaining: 995\nX-RateLimit-Reset: 1727518800\n</code></pre></p>"},{"location":"reference/legacy/api/api-endpoints/#application-management","title":"Application Management","text":""},{"location":"reference/legacy/api/api-endpoints/#create-application","title":"Create Application","text":"<p>Start a new loan application workflow.</p> <p>Endpoint: <code>POST /applications</code></p> <p>Required Roles: <code>loan.apply</code></p> <p>Request Body: <pre><code>{\n  \"applicant_name\": \"Intake Agent Doe\",\n  \"applicant_id\": \"550e8400-e29b-41d4-a716-446655440000\",\n  \"email\": \"john.doe@example.com\",\n  \"phone\": \"+14155552671\",\n  \"date_of_birth\": \"1985-06-15T00:00:00Z\",\n  \"loan_amount\": 50000.00,\n  \"loan_purpose\": \"home_purchase\",\n  \"loan_term_months\": 360,\n  \"annual_income\": 75000.00,\n  \"employment_status\": \"employed\",\n  \"employer_name\": \"Tech Corp\",\n  \"months_employed\": 24,\n  \"monthly_expenses\": 3000.00,\n  \"existing_debt\": 15000.00,\n  \"assets\": 100000.00\n}\n</code></pre></p> <p>Response 201 (Created): <pre><code>{\n  \"application_id\": \"LN1234567890\",\n  \"session_id\": \"thread_abc123\",\n  \"status\": \"STARTED\",\n  \"current_stage\": \"INTAKE\",\n  \"intake_agent\": {\n    \"name\": \"John_The_Eagle_Eye\",\n    \"description\": \"Sharp-eyed application validator\"\n  },\n  \"initial_message\": \"Hi! I'm Intake Agent, your application validator. I'll help you get started with your loan application. Let me take a quick look at your information...\",\n  \"created_at\": \"2025-09-28T10:30:00Z\",\n  \"expires_at\": \"2025-09-28T11:00:00Z\"\n}\n</code></pre></p> <p>Response 400 (Bad Request): <pre><code>{\n  \"error\": {\n    \"code\": \"VALIDATION_ERROR\",\n    \"message\": \"Invalid request data\",\n    \"details\": [\n      {\n        \"field\": \"email\",\n        \"error\": \"Invalid email format\"\n      },\n      {\n        \"field\": \"loan_amount\",\n        \"error\": \"Must be greater than zero\"\n      }\n    ]\n  },\n  \"request_id\": \"req_abc123\",\n  \"timestamp\": \"2025-09-28T10:30:00Z\"\n}\n</code></pre></p> <p>Response 401 (Unauthorized): <pre><code>{\n  \"error\": {\n    \"code\": \"AUTHENTICATION_REQUIRED\",\n    \"message\": \"Valid Entra ID token required\",\n    \"details\": \"Authorization header missing or invalid\"\n  },\n  \"request_id\": \"req_abc123\",\n  \"timestamp\": \"2025-09-28T10:30:00Z\"\n}\n</code></pre></p> <p>Response 403 (Forbidden): <pre><code>{\n  \"error\": {\n    \"code\": \"INSUFFICIENT_PERMISSIONS\",\n    \"message\": \"User lacks required permissions\",\n    \"details\": \"Role 'loan.apply' required\"\n  },\n  \"request_id\": \"req_abc123\",\n  \"timestamp\": \"2025-09-28T10:30:00Z\"\n}\n</code></pre></p> <p>Response 429 (Too Many Requests): <pre><code>{\n  \"error\": {\n    \"code\": \"RATE_LIMIT_EXCEEDED\",\n    \"message\": \"Rate limit exceeded\",\n    \"details\": \"Maximum 10 applications per hour. Try again at 2025-09-28T11:30:00Z\"\n  },\n  \"request_id\": \"req_abc123\",\n  \"timestamp\": \"2025-09-28T10:30:00Z\"\n}\n</code></pre></p> <p>cURL Example: <pre><code>curl -X POST https://api.loanavengers.com/api/v1/applications \\\n  -H \"Authorization: Bearer ${ENTRA_TOKEN}\" \\\n  -H \"Content-Type: application/json\" \\\n  -d '{\n    \"applicant_name\": \"Intake Agent Doe\",\n    \"applicant_id\": \"550e8400-e29b-41d4-a716-446655440000\",\n    \"email\": \"john.doe@example.com\",\n    \"phone\": \"+14155552671\",\n    \"date_of_birth\": \"1985-06-15T00:00:00Z\",\n    \"loan_amount\": 50000.00,\n    \"loan_purpose\": \"home_purchase\",\n    \"loan_term_months\": 360,\n    \"annual_income\": 75000.00,\n    \"employment_status\": \"employed\"\n  }'\n</code></pre></p>"},{"location":"reference/legacy/api/api-endpoints/#get-application-status","title":"Get Application Status","text":"<p>Retrieve current status and progress of a loan application.</p> <p>Endpoint: <code>GET /applications/{application_id}</code></p> <p>Required Roles: <code>loan.view</code> (own applications) or <code>loan.admin</code> (all applications)</p> <p>Path Parameters: - <code>application_id</code> (string, required): Application ID (format: <code>LN\\d{10}</code>)</p> <p>Response 200 (OK): <pre><code>{\n  \"application_id\": \"LN1234567890\",\n  \"status\": \"PROCESSING\",\n  \"current_stage\": \"CREDIT\",\n  \"current_agent\": {\n    \"name\": \"credit\",\n    \"display_name\": \"Hawk-Income - The Credit Guardian\"\n  },\n  \"progress\": 0.5,\n  \"stages_completed\": [\"INTAKE\"],\n  \"stages_remaining\": [\"CREDIT\", \"INCOME\", \"RISK\", \"DECISION\"],\n  \"assessments\": {\n    \"intake\": {\n      \"validation_status\": \"COMPLETE\",\n      \"routing_decision\": \"STANDARD\",\n      \"data_quality_score\": 0.95,\n      \"completed_at\": \"2025-09-28T10:32:00Z\"\n    }\n  },\n  \"created_at\": \"2025-09-28T10:30:00Z\",\n  \"updated_at\": \"2025-09-28T10:35:00Z\",\n  \"expires_at\": \"2025-09-28T11:00:00Z\"\n}\n</code></pre></p> <p>Response 404 (Not Found): <pre><code>{\n  \"error\": {\n    \"code\": \"APPLICATION_NOT_FOUND\",\n    \"message\": \"Application not found\",\n    \"details\": \"Application LN1234567890 does not exist or has expired\"\n  },\n  \"request_id\": \"req_abc123\",\n  \"timestamp\": \"2025-09-28T10:30:00Z\"\n}\n</code></pre></p> <p>Response 403 (Forbidden): <pre><code>{\n  \"error\": {\n    \"code\": \"ACCESS_DENIED\",\n    \"message\": \"Access denied to this application\",\n    \"details\": \"User can only access their own applications\"\n  },\n  \"request_id\": \"req_abc123\",\n  \"timestamp\": \"2025-09-28T10:30:00Z\"\n}\n</code></pre></p> <p>cURL Example: <pre><code>curl -X GET https://api.loanavengers.com/api/v1/applications/LN1234567890 \\\n  -H \"Authorization: Bearer ${ENTRA_TOKEN}\"\n</code></pre></p>"},{"location":"reference/legacy/api/api-endpoints/#cancel-application","title":"Cancel Application","text":"<p>Cancel an in-progress loan application.</p> <p>Endpoint: <code>DELETE /applications/{application_id}</code></p> <p>Required Roles: <code>loan.apply</code> (own applications) or <code>loan.admin</code> (all applications)</p> <p>Path Parameters: - <code>application_id</code> (string, required): Application ID</p> <p>Response 200 (OK): <pre><code>{\n  \"application_id\": \"LN1234567890\",\n  \"status\": \"CANCELLED\",\n  \"cancelled_at\": \"2025-09-28T10:40:00Z\",\n  \"message\": \"Application cancelled successfully\"\n}\n</code></pre></p> <p>Response 404 (Not Found): <pre><code>{\n  \"error\": {\n    \"code\": \"APPLICATION_NOT_FOUND\",\n    \"message\": \"Application not found\",\n    \"details\": \"Application LN1234567890 does not exist\"\n  },\n  \"request_id\": \"req_abc123\",\n  \"timestamp\": \"2025-09-28T10:30:00Z\"\n}\n</code></pre></p> <p>Response 409 (Conflict): <pre><code>{\n  \"error\": {\n    \"code\": \"CANNOT_CANCEL\",\n    \"message\": \"Application cannot be cancelled\",\n    \"details\": \"Application has already been completed or cancelled\"\n  },\n  \"request_id\": \"req_abc123\",\n  \"timestamp\": \"2025-09-28T10:30:00Z\"\n}\n</code></pre></p> <p>cURL Example: <pre><code>curl -X DELETE https://api.loanavengers.com/api/v1/applications/LN1234567890 \\\n  -H \"Authorization: Bearer ${ENTRA_TOKEN}\"\n</code></pre></p>"},{"location":"reference/legacy/api/api-endpoints/#conversational-chat","title":"Conversational Chat","text":""},{"location":"reference/legacy/api/api-endpoints/#send-chat-message","title":"Send Chat Message","text":"<p>Send a chat message to the intake agent for conversational loan intake.</p> <p>Endpoint: <code>POST /applications/{application_id}/chat</code></p> <p>Required Roles: <code>loan.apply</code></p> <p>Path Parameters: - <code>application_id</code> (string, required): Application ID</p> <p>Request Body: <pre><code>{\n  \"message\": \"My annual income is $75,000 and I work at Tech Corp\"\n}\n</code></pre></p> <p>Response 200 (OK): <pre><code>{\n  \"message_id\": \"msg_abc123\",\n  \"agent_name\": \"John_The_Eagle_Eye\",\n  \"agent_response\": \"Great! That's a solid income. I see you work at Tech Corp. How long have you been with them?\",\n  \"assessment\": {\n    \"validation_status\": \"INCOMPLETE\",\n    \"fields_collected\": [\"annual_income\", \"employer_name\"],\n    \"fields_remaining\": [\"months_employed\", \"existing_debt\"],\n    \"data_quality_score\": 0.75\n  },\n  \"next_question\": \"How many months have you been employed at Tech Corp?\",\n  \"suggested_responses\": [\n    \"Less than 6 months\",\n    \"6-12 months\",\n    \"1-2 years\",\n    \"More than 2 years\"\n  ],\n  \"workflow_stage\": \"INTAKE\",\n  \"intake_complete\": false,\n  \"timestamp\": \"2025-09-28T10:31:00Z\"\n}\n</code></pre></p> <p>Response 200 (Intake Complete): <pre><code>{\n  \"message_id\": \"msg_xyz789\",\n  \"agent_name\": \"John_The_Eagle_Eye\",\n  \"agent_response\": \"Perfect! I have all the information I need. Your application looks great! \ud83e\udd85 Eagle eyes verified everything. You're all set for the next step!\",\n  \"assessment\": {\n    \"validation_status\": \"COMPLETE\",\n    \"routing_decision\": \"STANDARD\",\n    \"confidence_score\": 0.95,\n    \"data_quality_score\": 1.0,\n    \"celebration_message\": \"\ud83e\udd85 Eagle-eyed validation complete! Your application is ready to soar!\",\n    \"next_agent\": \"credit\"\n  },\n  \"workflow_stage\": \"INTAKE_COMPLETE\",\n  \"intake_complete\": true,\n  \"next_step\": {\n    \"agent\": \"Hawk-Income - The Credit Guardian\",\n    \"description\": \"Hawk-Income will now assess your creditworthiness\",\n    \"estimated_time\": \"2-3 minutes\"\n  },\n  \"timestamp\": \"2025-09-28T10:35:00Z\"\n}\n</code></pre></p> <p>Response 429 (Too Many Requests): <pre><code>{\n  \"error\": {\n    \"code\": \"RATE_LIMIT_EXCEEDED\",\n    \"message\": \"Too many chat messages\",\n    \"details\": \"Maximum 10 messages per minute. Try again in 30 seconds\"\n  },\n  \"request_id\": \"req_abc123\",\n  \"timestamp\": \"2025-09-28T10:30:00Z\"\n}\n</code></pre></p> <p>cURL Example: <pre><code>curl -X POST https://api.loanavengers.com/api/v1/applications/LN1234567890/chat \\\n  -H \"Authorization: Bearer ${ENTRA_TOKEN}\" \\\n  -H \"Content-Type: application/json\" \\\n  -d '{\"message\": \"My annual income is $75,000\"}'\n</code></pre></p>"},{"location":"reference/legacy/api/api-endpoints/#get-chat-history","title":"Get Chat History","text":"<p>Retrieve the complete conversation history for an application.</p> <p>Endpoint: <code>GET /applications/{application_id}/chat/history</code></p> <p>Required Roles: <code>loan.view</code></p> <p>Path Parameters: - <code>application_id</code> (string, required): Application ID</p> <p>Query Parameters: - <code>limit</code> (integer, optional): Maximum number of messages (default: 100, max: 500) - <code>offset</code> (integer, optional): Pagination offset (default: 0)</p> <p>Response 200 (OK): <pre><code>{\n  \"application_id\": \"LN1234567890\",\n  \"total_messages\": 8,\n  \"messages\": [\n    {\n      \"message_id\": \"msg_001\",\n      \"role\": \"assistant\",\n      \"agent_name\": \"John_The_Eagle_Eye\",\n      \"text\": \"Hi! I'm Intake Agent, your application validator...\",\n      \"timestamp\": \"2025-09-28T10:30:00Z\"\n    },\n    {\n      \"message_id\": \"msg_002\",\n      \"role\": \"user\",\n      \"text\": \"My annual income is $75,000\",\n      \"timestamp\": \"2025-09-28T10:31:00Z\"\n    },\n    {\n      \"message_id\": \"msg_003\",\n      \"role\": \"assistant\",\n      \"agent_name\": \"John_The_Eagle_Eye\",\n      \"text\": \"Great! That's a solid income...\",\n      \"timestamp\": \"2025-09-28T10:31:15Z\"\n    }\n  ],\n  \"pagination\": {\n    \"offset\": 0,\n    \"limit\": 100,\n    \"has_more\": false\n  }\n}\n</code></pre></p> <p>cURL Example: <pre><code>curl -X GET \"https://api.loanavengers.com/api/v1/applications/LN1234567890/chat/history?limit=50\" \\\n  -H \"Authorization: Bearer ${ENTRA_TOKEN}\"\n</code></pre></p>"},{"location":"reference/legacy/api/api-endpoints/#real-time-streaming","title":"Real-Time Streaming","text":""},{"location":"reference/legacy/api/api-endpoints/#stream-workflow-events","title":"Stream Workflow Events","text":"<p>Stream real-time workflow events using Streamable HTTP (aligned with MCP).</p> <p>Endpoint: <code>POST /applications/{application_id}/stream</code></p> <p>Required Roles: <code>loan.view</code></p> <p>Path Parameters: - <code>application_id</code> (string, required): Application ID</p> <p>Headers: <pre><code>Authorization: Bearer &lt;entra_id_token&gt;\nAccept: text/event-stream\n</code></pre></p> <p>Request Body (optional): <pre><code>{\n  \"action\": \"process\",\n  \"include_events\": [\"executor_invoked\", \"executor_completed\", \"workflow_output\"]\n}\n</code></pre></p> <p>Response 200 (Server-Sent Events): <pre><code>HTTP/1.1 200 OK\nContent-Type: text/event-stream\nCache-Control: no-cache\nConnection: keep-alive\n\nevent: workflow_started\nid: evt_001\ndata: {\"jsonrpc\":\"2.0\",\"method\":\"workflow/started\",\"params\":{\"state\":\"RUNNING\",\"timestamp\":\"2025-09-28T10:30:00Z\"}}\n\nevent: executor_invoked\nid: evt_002\ndata: {\"jsonrpc\":\"2.0\",\"method\":\"workflow/executor_invoked\",\"params\":{\"executor_id\":\"intake_agent\",\"timestamp\":\"2025-09-28T10:30:01Z\"}}\n\nevent: executor_completed\nid: evt_003\ndata: {\"jsonrpc\":\"2.0\",\"method\":\"workflow/executor_completed\",\"params\":{\"executor_id\":\"intake_agent\",\"duration_ms\":1500,\"timestamp\":\"2025-09-28T10:30:02.5Z\"}}\n\nevent: workflow_output\nid: evt_004\ndata: {\"jsonrpc\":\"2.0\",\"method\":\"workflow/output\",\"params\":{\"output_type\":\"IntakeAssessment\",\"data\":{\"validation_status\":\"COMPLETE\",\"routing_decision\":\"STANDARD\"},\"timestamp\":\"2025-09-28T10:30:02.5Z\"}}\n\nevent: executor_invoked\nid: evt_005\ndata: {\"jsonrpc\":\"2.0\",\"method\":\"workflow/executor_invoked\",\"params\":{\"executor_id\":\"credit_agent\",\"timestamp\":\"2025-09-28T10:30:03Z\"}}\n</code></pre></p> <p>Event Types: - <code>workflow_started</code>: Workflow execution began - <code>workflow_status</code>: Workflow state change - <code>executor_invoked</code>: Agent started processing - <code>executor_completed</code>: Agent finished processing - <code>executor_failed</code>: Agent encountered error - <code>workflow_output</code>: Agent produced assessment - <code>workflow_failed</code>: Workflow failed - <code>agent_run_update</code>: Agent streaming update (progress, thinking)</p> <p>JavaScript Client Example: <pre><code>const eventSource = new EventSource(\n  'https://api.loanavengers.com/api/v1/applications/LN1234567890/stream',\n  {\n    headers: {\n      'Authorization': `Bearer ${entraToken}`\n    }\n  }\n);\n\neventSource.addEventListener('workflow_output', (event) =&gt; {\n  const data = JSON.parse(event.data);\n  console.log('Assessment received:', data.params.data);\n});\n\neventSource.addEventListener('executor_completed', (event) =&gt; {\n  const data = JSON.parse(event.data);\n  console.log(`Agent ${data.params.executor_id} completed`);\n});\n\neventSource.onerror = (error) =&gt; {\n  console.error('EventSource error:', error);\n  eventSource.close();\n};\n</code></pre></p> <p>Python Client Example: <pre><code>import httpx\n\nasync with httpx.AsyncClient() as client:\n    async with client.stream(\n        \"POST\",\n        \"https://api.loanavengers.com/api/v1/applications/LN1234567890/stream\",\n        headers={\n            \"Authorization\": f\"Bearer {entra_token}\",\n            \"Accept\": \"text/event-stream\"\n        },\n        timeout=None\n    ) as response:\n        async for line in response.aiter_lines():\n            if line.startswith(\"data: \"):\n                data = json.loads(line[6:])\n                print(f\"Event: {data['method']}\")\n</code></pre></p>"},{"location":"reference/legacy/api/api-endpoints/#document-upload","title":"Document Upload","text":""},{"location":"reference/legacy/api/api-endpoints/#upload-document","title":"Upload Document","text":"<p>Upload a document for loan application processing.</p> <p>Endpoint: <code>POST /applications/{application_id}/documents</code></p> <p>Required Roles: <code>loan.apply</code></p> <p>Path Parameters: - <code>application_id</code> (string, required): Application ID</p> <p>Request (multipart/form-data): <pre><code>Content-Type: multipart/form-data; boundary=----WebKitFormBoundary\n\n------WebKitFormBoundary\nContent-Disposition: form-data; name=\"file\"; filename=\"paystub.pdf\"\nContent-Type: application/pdf\n\n&lt;binary content&gt;\n------WebKitFormBoundary\nContent-Disposition: form-data; name=\"document_type\"\n\npay_stub\n------WebKitFormBoundary--\n</code></pre></p> <p>Supported Document Types: - <code>pay_stub</code>: Pay stub or salary slip - <code>bank_statement</code>: Bank account statement - <code>tax_return</code>: Tax return document - <code>id_document</code>: Government-issued ID - <code>proof_of_address</code>: Utility bill or lease agreement - <code>employment_letter</code>: Employment verification letter - <code>other</code>: Other supporting documents</p> <p>Supported File Formats: - PDF: <code>.pdf</code> - Images: <code>.jpg</code>, <code>.jpeg</code>, <code>.png</code> - Documents: <code>.docx</code></p> <p>File Size Limits: - Maximum per file: 10 MB - Maximum total per application: 50 MB</p> <p>Response 201 (Created): <pre><code>{\n  \"document_id\": \"doc_abc123\",\n  \"filename\": \"paystub.pdf\",\n  \"size\": 524288,\n  \"mime_type\": \"application/pdf\",\n  \"document_type\": \"pay_stub\",\n  \"storage_url\": \"https://loanavengers.blob.core.windows.net/documents/LN1234567890/doc_abc123.pdf\",\n  \"uploaded_at\": \"2025-09-28T10:30:00Z\",\n  \"expires_at\": \"2025-10-28T10:30:00Z\"\n}\n</code></pre></p> <p>Response 400 (Bad Request): <pre><code>{\n  \"error\": {\n    \"code\": \"INVALID_FILE\",\n    \"message\": \"Invalid file upload\",\n    \"details\": \"File size exceeds 10MB limit\"\n  },\n  \"request_id\": \"req_abc123\",\n  \"timestamp\": \"2025-09-28T10:30:00Z\"\n}\n</code></pre></p> <p>Response 413 (Payload Too Large): <pre><code>{\n  \"error\": {\n    \"code\": \"FILE_TOO_LARGE\",\n    \"message\": \"File exceeds size limit\",\n    \"details\": \"Maximum file size is 10MB\"\n  },\n  \"request_id\": \"req_abc123\",\n  \"timestamp\": \"2025-09-28T10:30:00Z\"\n}\n</code></pre></p> <p>cURL Example: <pre><code>curl -X POST https://api.loanavengers.com/api/v1/applications/LN1234567890/documents \\\n  -H \"Authorization: Bearer ${ENTRA_TOKEN}\" \\\n  -F \"file=@paystub.pdf\" \\\n  -F \"document_type=pay_stub\"\n</code></pre></p>"},{"location":"reference/legacy/api/api-endpoints/#list-documents","title":"List Documents","text":"<p>Get all documents uploaded for an application.</p> <p>Endpoint: <code>GET /applications/{application_id}/documents</code></p> <p>Required Roles: <code>loan.view</code></p> <p>Path Parameters: - <code>application_id</code> (string, required): Application ID</p> <p>Response 200 (OK): <pre><code>{\n  \"application_id\": \"LN1234567890\",\n  \"total_documents\": 3,\n  \"total_size\": 1572864,\n  \"documents\": [\n    {\n      \"document_id\": \"doc_abc123\",\n      \"filename\": \"paystub.pdf\",\n      \"size\": 524288,\n      \"mime_type\": \"application/pdf\",\n      \"document_type\": \"pay_stub\",\n      \"uploaded_at\": \"2025-09-28T10:30:00Z\"\n    },\n    {\n      \"document_id\": \"doc_def456\",\n      \"filename\": \"bank_statement.pdf\",\n      \"size\": 1048576,\n      \"mime_type\": \"application/pdf\",\n      \"document_type\": \"bank_statement\",\n      \"uploaded_at\": \"2025-09-28T10:35:00Z\"\n    }\n  ]\n}\n</code></pre></p> <p>cURL Example: <pre><code>curl -X GET https://api.loanavengers.com/api/v1/applications/LN1234567890/documents \\\n  -H \"Authorization: Bearer ${ENTRA_TOKEN}\"\n</code></pre></p>"},{"location":"reference/legacy/api/api-endpoints/#delete-document","title":"Delete Document","text":"<p>Delete an uploaded document.</p> <p>Endpoint: <code>DELETE /applications/{application_id}/documents/{document_id}</code></p> <p>Required Roles: <code>loan.apply</code></p> <p>Path Parameters: - <code>application_id</code> (string, required): Application ID - <code>document_id</code> (string, required): Document ID</p> <p>Response 200 (OK): <pre><code>{\n  \"document_id\": \"doc_abc123\",\n  \"deleted_at\": \"2025-09-28T10:40:00Z\",\n  \"message\": \"Document deleted successfully\"\n}\n</code></pre></p> <p>cURL Example: <pre><code>curl -X DELETE https://api.loanavengers.com/api/v1/applications/LN1234567890/documents/doc_abc123 \\\n  -H \"Authorization: Bearer ${ENTRA_TOKEN}\"\n</code></pre></p>"},{"location":"reference/legacy/api/api-endpoints/#health-monitoring","title":"Health &amp; Monitoring","text":""},{"location":"reference/legacy/api/api-endpoints/#health-check","title":"Health Check","text":"<p>Check API service health status.</p> <p>Endpoint: <code>GET /health</code></p> <p>Authentication: None (public endpoint)</p> <p>Response 200 (Healthy): <pre><code>{\n  \"status\": \"healthy\",\n  \"version\": \"1.0.0\",\n  \"timestamp\": \"2025-09-28T10:30:00Z\",\n  \"checks\": {\n    \"database\": \"healthy\",\n    \"redis\": \"healthy\",\n    \"blob_storage\": \"healthy\",\n    \"foundry\": \"healthy\"\n  },\n  \"uptime_seconds\": 86400\n}\n</code></pre></p> <p>Response 503 (Unhealthy): <pre><code>{\n  \"status\": \"unhealthy\",\n  \"version\": \"1.0.0\",\n  \"timestamp\": \"2025-09-28T10:30:00Z\",\n  \"checks\": {\n    \"database\": \"healthy\",\n    \"redis\": \"unhealthy\",\n    \"blob_storage\": \"healthy\",\n    \"foundry\": \"healthy\"\n  },\n  \"errors\": [\n    {\n      \"component\": \"redis\",\n      \"message\": \"Connection timeout\"\n    }\n  ]\n}\n</code></pre></p> <p>cURL Example: <pre><code>curl https://api.loanavengers.com/api/v1/health\n</code></pre></p>"},{"location":"reference/legacy/api/api-endpoints/#metrics","title":"Metrics","text":"<p>Prometheus-compatible metrics endpoint.</p> <p>Endpoint: <code>GET /metrics</code></p> <p>Authentication: None (public endpoint, internal network only)</p> <p>Response 200: <pre><code># HELP http_requests_total Total HTTP requests\n# TYPE http_requests_total counter\nhttp_requests_total{method=\"POST\",endpoint=\"/applications\",status=\"201\"} 1250\n\n# HELP http_request_duration_seconds HTTP request latency\n# TYPE http_request_duration_seconds histogram\nhttp_request_duration_seconds_bucket{le=\"0.1\"} 980\nhttp_request_duration_seconds_bucket{le=\"0.5\"} 1200\nhttp_request_duration_seconds_bucket{le=\"1.0\"} 1240\nhttp_request_duration_seconds_bucket{le=\"+Inf\"} 1250\nhttp_request_duration_seconds_sum 125.5\nhttp_request_duration_seconds_count 1250\n\n# HELP workflow_completions_total Total workflow completions\n# TYPE workflow_completions_total counter\nworkflow_completions_total{status=\"success\"} 950\nworkflow_completions_total{status=\"failed\"} 25\n\n# HELP agent_processing_duration_seconds Agent processing time\n# TYPE agent_processing_duration_seconds histogram\nagent_processing_duration_seconds{agent=\"intake\"} 1.5\nagent_processing_duration_seconds{agent=\"credit\"} 2.3\n</code></pre></p>"},{"location":"reference/legacy/api/api-endpoints/#error-codes-reference","title":"Error Codes Reference","text":"Code HTTP Status Description <code>VALIDATION_ERROR</code> 400 Request validation failed <code>INVALID_FILE</code> 400 File upload validation failed <code>AUTHENTICATION_REQUIRED</code> 401 Missing or invalid token <code>TOKEN_EXPIRED</code> 401 Entra ID token expired <code>ACCESS_DENIED</code> 403 User lacks access to resource <code>INSUFFICIENT_PERMISSIONS</code> 403 User lacks required role <code>APPLICATION_NOT_FOUND</code> 404 Application does not exist <code>DOCUMENT_NOT_FOUND</code> 404 Document does not exist <code>CANNOT_CANCEL</code> 409 Application cannot be cancelled <code>FILE_TOO_LARGE</code> 413 File exceeds size limit <code>RATE_LIMIT_EXCEEDED</code> 429 Too many requests <code>INTERNAL_SERVER_ERROR</code> 500 Server error <code>SERVICE_UNAVAILABLE</code> 503 Service temporarily unavailable"},{"location":"reference/legacy/api/api-endpoints/#sdk-examples","title":"SDK Examples","text":""},{"location":"reference/legacy/api/api-endpoints/#typescriptjavascript","title":"TypeScript/JavaScript","text":"<pre><code>import { LoanAvengersClient } from '@loanavengers/api-client';\n\nconst client = new LoanAvengersClient({\n  baseUrl: 'https://api.loanavengers.com/api/v1',\n  getAccessToken: async () =&gt; {\n    // Acquire Entra ID token\n    return await acquireEntraIdToken();\n  }\n});\n\n// Create application\nconst application = await client.applications.create({\n  applicant_name: 'Intake Agent Doe',\n  email: 'john.doe@example.com',\n  loan_amount: 50000,\n  loan_purpose: 'home_purchase',\n  // ...\n});\n\n// Stream workflow events\nconst stream = await client.applications.stream(application.application_id);\nstream.on('workflow_output', (assessment) =&gt; {\n  console.log('Assessment:', assessment);\n});\n\n// Send chat message\nconst chatResponse = await client.chat.send(application.application_id, {\n  message: 'My annual income is $75,000'\n});\n</code></pre>"},{"location":"reference/legacy/api/api-endpoints/#python","title":"Python","text":"<pre><code>from loan_avengers_client import LoanAvengersClient\nfrom azure.identity.aio import DefaultAzureCredential\n\ncredential = DefaultAzureCredential()\nclient = LoanAvengersClient(\n    base_url=\"https://api.loanavengers.com/api/v1\",\n    credential=credential\n)\n\n# Create application\napplication = await client.applications.create(\n    applicant_name=\"Intake Agent Doe\",\n    email=\"john.doe@example.com\",\n    loan_amount=50000.0,\n    loan_purpose=\"home_purchase\"\n)\n\n# Stream workflow events\nasync for event in client.applications.stream(application.application_id):\n    if event.method == \"workflow/output\":\n        print(f\"Assessment: {event.params.data}\")\n\n# Send chat message\nresponse = await client.chat.send(\n    application.application_id,\n    message=\"My annual income is $75,000\"\n)\n</code></pre>"},{"location":"reference/legacy/api/api-endpoints/#changelog","title":"Changelog","text":""},{"location":"reference/legacy/api/api-endpoints/#v100-2025-09-28","title":"v1.0.0 (2025-09-28)","text":"<ul> <li>Initial API release</li> <li>Application management endpoints</li> <li>Conversational chat with intake agent</li> <li>Streamable HTTP for real-time events</li> <li>Document upload support</li> <li>Entra ID authentication</li> </ul>"},{"location":"reference/legacy/api/deployment/","title":"Azure Container Apps Deployment Guide","text":""},{"location":"reference/legacy/api/deployment/#prerequisites","title":"Prerequisites","text":"<ul> <li>Azure CLI installed (<code>az --version</code>)</li> <li>Azure subscription with appropriate permissions</li> <li>GitHub repository access</li> <li>Docker installed locally</li> </ul>"},{"location":"reference/legacy/api/deployment/#quick-start","title":"Quick Start","text":"<pre><code># Login to Azure\naz login\n\n# Set subscription\naz account set --subscription \"YOUR_SUBSCRIPTION_ID\"\n\n# Deploy infrastructure and application\n./scripts/deploy-azure.sh\n</code></pre>"},{"location":"reference/legacy/api/deployment/#infrastructure-setup","title":"Infrastructure Setup","text":""},{"location":"reference/legacy/api/deployment/#1-resource-group","title":"1. Resource Group","text":"<pre><code>az group create \\\n  --name rg-loan-avengers-prod \\\n  --location eastus\n</code></pre>"},{"location":"reference/legacy/api/deployment/#2-container-registry","title":"2. Container Registry","text":"<pre><code>az acr create \\\n  --resource-group rg-loan-avengers-prod \\\n  --name loanavengersacr \\\n  --sku Standard\n</code></pre>"},{"location":"reference/legacy/api/deployment/#3-key-vault","title":"3. Key Vault","text":"<pre><code>az keyvault create \\\n  --name kv-loan-avengers-prod \\\n  --resource-group rg-loan-avengers-prod \\\n  --location eastus\n</code></pre>"},{"location":"reference/legacy/api/deployment/#4-azure-cache-for-redis","title":"4. Azure Cache for Redis","text":"<pre><code>az redis create \\\n  --resource-group rg-loan-avengers-prod \\\n  --name redis-loan-avengers-prod \\\n  --location eastus \\\n  --sku Standard \\\n  --vm-size C1\n</code></pre>"},{"location":"reference/legacy/api/deployment/#5-cosmos-db","title":"5. Cosmos DB","text":"<pre><code>az cosmosdb create \\\n  --name cosmos-loan-avengers-prod \\\n  --resource-group rg-loan-avengers-prod \\\n  --locations regionName=eastus\n</code></pre>"},{"location":"reference/legacy/api/deployment/#6-blob-storage","title":"6. Blob Storage","text":"<pre><code>az storage account create \\\n  --name stloanavengersprod \\\n  --resource-group rg-loan-avengers-prod \\\n  --location eastus \\\n  --sku Standard_LRS\n</code></pre>"},{"location":"reference/legacy/api/deployment/#7-container-apps-environment","title":"7. Container Apps Environment","text":"<pre><code>az containerapp env create \\\n  --name env-loan-avengers-prod \\\n  --resource-group rg-loan-avengers-prod \\\n  --location eastus\n</code></pre>"},{"location":"reference/legacy/api/deployment/#application-deployment","title":"Application Deployment","text":""},{"location":"reference/legacy/api/deployment/#build-and-push-docker-image","title":"Build and Push Docker Image","text":"<pre><code># Build image\ndocker build -t loanavengersacr.azurecr.io/loan-avengers-api:latest .\n\n# Login to ACR\naz acr login --name loanavengersacr\n\n# Push image\ndocker push loanavengersacr.azurecr.io/loan-avengers-api:latest\n</code></pre>"},{"location":"reference/legacy/api/deployment/#deploy-container-app","title":"Deploy Container App","text":"<pre><code>az containerapp create \\\n  --name app-loan-avengers-api \\\n  --resource-group rg-loan-avengers-prod \\\n  --environment env-loan-avengers-prod \\\n  --image loanavengersacr.azurecr.io/loan-avengers-api:latest \\\n  --target-port 8000 \\\n  --ingress external \\\n  --min-replicas 1 \\\n  --max-replicas 10 \\\n  --cpu 1.0 \\\n  --memory 2Gi \\\n  --secrets \\\n    foundry-endpoint=keyvaultref:https://kv-loan-avengers-prod.vault.azure.net/secrets/foundry-endpoint,identityref:system \\\n    redis-connection=keyvaultref:https://kv-loan-avengers-prod.vault.azure.net/secrets/redis-connection,identityref:system \\\n  --env-vars \\\n    FOUNDRY_PROJECT_ENDPOINT=secretref:foundry-endpoint \\\n    REDIS_CONNECTION_STRING=secretref:redis-connection\n</code></pre>"},{"location":"reference/legacy/api/deployment/#environment-configuration","title":"Environment Configuration","text":"<p>Store secrets in Azure Key Vault:</p> <pre><code># Foundry endpoint\naz keyvault secret set \\\n  --vault-name kv-loan-avengers-prod \\\n  --name foundry-endpoint \\\n  --value \"https://your-project.projects.ai.azure.com\"\n\n# Redis connection\nREDIS_CONN=$(az redis list-keys --name redis-loan-avengers-prod --resource-group rg-loan-avengers-prod --query primaryKey -o tsv)\naz keyvault secret set \\\n  --vault-name kv-loan-avengers-prod \\\n  --name redis-connection \\\n  --value \"rediss://redis-loan-avengers-prod.redis.cache.windows.net:6380,password=${REDIS_CONN},ssl=True\"\n</code></pre>"},{"location":"reference/legacy/api/deployment/#cicd-pipeline","title":"CI/CD Pipeline","text":"<p>GitHub Actions workflow (<code>.github/workflows/deploy-api.yml</code>) handles automated deployments.</p>"},{"location":"reference/legacy/api/deployment/#monitoring","title":"Monitoring","text":"<p>Application Insights automatically collects telemetry. View in Azure Portal.</p>"},{"location":"reference/legacy/api/deployment/#scaling","title":"Scaling","text":"<p>Auto-scaling rules are configured based on CPU and HTTP requests. Adjust in Container App settings.</p>"},{"location":"reference/legacy/api/streaming-protocol/","title":"Streaming Protocol Specification","text":""},{"location":"reference/legacy/api/streaming-protocol/#overview","title":"Overview","text":"<p>The Loan Avengers API uses Streamable HTTP transport, aligned with the Model Context Protocol (MCP) specification (2025-03-26). This provides real-time workflow event streaming to clients using Server-Sent Events (SSE).</p>"},{"location":"reference/legacy/api/streaming-protocol/#streamable-http-transport","title":"Streamable HTTP Transport","text":""},{"location":"reference/legacy/api/streaming-protocol/#single-endpoint-pattern","title":"Single Endpoint Pattern","text":"<p>Following MCP specification, we use a single HTTP POST endpoint that supports both: - JSON responses for synchronous requests - Server-Sent Events (SSE) for streaming responses</p> <p>Endpoint: <code>POST /api/v1/applications/{id}/stream</code></p>"},{"location":"reference/legacy/api/streaming-protocol/#request-format","title":"Request Format","text":"<pre><code>POST /api/v1/applications/LN1234567890/stream HTTP/1.1\nHost: api.loanavengers.com\nAuthorization: Bearer &lt;entra_id_token&gt;\nAccept: text/event-stream\nContent-Type: application/json\n\n{\n  \"action\": \"process\",\n  \"include_events\": [\"executor_invoked\", \"executor_completed\", \"workflow_output\"]\n}\n</code></pre> <p>Headers: - <code>Authorization</code>: Entra ID bearer token (required) - <code>Accept</code>: <code>text/event-stream</code> for streaming, <code>application/json</code> for single response - <code>Content-Type</code>: <code>application/json</code></p>"},{"location":"reference/legacy/api/streaming-protocol/#response-format","title":"Response Format","text":"<p>SSE Stream (Accept: text/event-stream): <pre><code>HTTP/1.1 200 OK\nContent-Type: text/event-stream\nCache-Control: no-cache\nConnection: keep-alive\n\nevent: workflow_started\nid: evt_001\ndata: {\"jsonrpc\":\"2.0\",\"method\":\"workflow/started\",\"params\":{...}}\n\nevent: executor_invoked\nid: evt_002\ndata: {\"jsonrpc\":\"2.0\",\"method\":\"workflow/executor_invoked\",\"params\":{...}}\n</code></pre></p> <p>JSON Response (Accept: application/json): <pre><code>HTTP/1.1 200 OK\nContent-Type: application/json\n\n{\n  \"application_id\": \"LN1234567890\",\n  \"status\": \"COMPLETED\",\n  \"final_decision\": {...}\n}\n</code></pre></p>"},{"location":"reference/legacy/api/streaming-protocol/#event-format-json-rpc-style","title":"Event Format (JSON-RPC Style)","text":"<p>All events follow JSON-RPC 2.0 message format:</p> <pre><code>{\n  \"jsonrpc\": \"2.0\",\n  \"method\": \"workflow/event_type\",\n  \"params\": {\n    \"timestamp\": \"2025-09-28T10:30:00Z\",\n    ...\n  }\n}\n</code></pre>"},{"location":"reference/legacy/api/streaming-protocol/#event-types","title":"Event Types","text":""},{"location":"reference/legacy/api/streaming-protocol/#workflow-lifecycle-events","title":"Workflow Lifecycle Events","text":""},{"location":"reference/legacy/api/streaming-protocol/#workflow_started","title":"workflow_started","text":"<p>Workflow execution began.</p> <pre><code>{\n  \"jsonrpc\": \"2.0\",\n  \"method\": \"workflow/started\",\n  \"params\": {\n    \"application_id\": \"LN1234567890\",\n    \"workflow_id\": \"wf_abc123\",\n    \"state\": \"RUNNING\",\n    \"timestamp\": \"2025-09-28T10:30:00Z\"\n  }\n}\n</code></pre>"},{"location":"reference/legacy/api/streaming-protocol/#workflow_status","title":"workflow_status","text":"<p>Workflow state changed.</p> <pre><code>{\n  \"jsonrpc\": \"2.0\",\n  \"method\": \"workflow/status\",\n  \"params\": {\n    \"application_id\": \"LN1234567890\",\n    \"workflow_id\": \"wf_abc123\",\n    \"state\": \"PROCESSING\",\n    \"current_executor\": \"credit_agent\",\n    \"progress\": 0.5,\n    \"timestamp\": \"2025-09-28T10:32:00Z\"\n  }\n}\n</code></pre>"},{"location":"reference/legacy/api/streaming-protocol/#workflow_output","title":"workflow_output","text":"<p>Workflow produced output (agent assessment).</p> <pre><code>{\n  \"jsonrpc\": \"2.0\",\n  \"method\": \"workflow/output\",\n  \"params\": {\n    \"application_id\": \"LN1234567890\",\n    \"output_type\": \"IntakeAssessment\",\n    \"data\": {\n      \"validation_status\": \"COMPLETE\",\n      \"routing_decision\": \"STANDARD\",\n      \"confidence_score\": 0.95,\n      \"data_quality_score\": 1.0,\n      \"specialist_name\": \"Intake Agent\",\n      \"celebration_message\": \"\ud83e\udd85 Eagle-eyed validation complete!\",\n      \"next_agent\": \"credit\"\n    },\n    \"timestamp\": \"2025-09-28T10:30:15Z\"\n  }\n}\n</code></pre>"},{"location":"reference/legacy/api/streaming-protocol/#workflow_failed","title":"workflow_failed","text":"<p>Workflow execution failed.</p> <pre><code>{\n  \"jsonrpc\": \"2.0\",\n  \"method\": \"workflow/failed\",\n  \"params\": {\n    \"application_id\": \"LN1234567890\",\n    \"workflow_id\": \"wf_abc123\",\n    \"error\": {\n      \"code\": \"AGENT_TIMEOUT\",\n      \"message\": \"Credit agent timed out after 30 seconds\",\n      \"executor_id\": \"credit_agent\",\n      \"recoverable\": true\n    },\n    \"timestamp\": \"2025-09-28T10:33:00Z\"\n  }\n}\n</code></pre>"},{"location":"reference/legacy/api/streaming-protocol/#executor-agent-events","title":"Executor (Agent) Events","text":""},{"location":"reference/legacy/api/streaming-protocol/#executor_invoked","title":"executor_invoked","text":"<p>Agent started processing.</p> <pre><code>{\n  \"jsonrpc\": \"2.0\",\n  \"method\": \"workflow/executor_invoked\",\n  \"params\": {\n    \"application_id\": \"LN1234567890\",\n    \"executor_id\": \"intake_agent\",\n    \"executor_name\": \"John_The_Eagle_Eye\",\n    \"input_type\": \"LoanApplication\",\n    \"timestamp\": \"2025-09-28T10:30:01Z\"\n  }\n}\n</code></pre>"},{"location":"reference/legacy/api/streaming-protocol/#executor_completed","title":"executor_completed","text":"<p>Agent finished processing.</p> <pre><code>{\n  \"jsonrpc\": \"2.0\",\n  \"method\": \"workflow/executor_completed\",\n  \"params\": {\n    \"application_id\": \"LN1234567890\",\n    \"executor_id\": \"intake_agent\",\n    \"executor_name\": \"John_The_Eagle_Eye\",\n    \"output_type\": \"IntakeAssessment\",\n    \"duration_ms\": 1500,\n    \"success\": true,\n    \"timestamp\": \"2025-09-28T10:30:02.5Z\"\n  }\n}\n</code></pre>"},{"location":"reference/legacy/api/streaming-protocol/#executor_failed","title":"executor_failed","text":"<p>Agent processing failed.</p> <pre><code>{\n  \"jsonrpc\": \"2.0\",\n  \"method\": \"workflow/executor_failed\",\n  \"params\": {\n    \"application_id\": \"LN1234567890\",\n    \"executor_id\": \"credit_agent\",\n    \"executor_name\": \"Hawk-Income - The Credit Guardian\",\n    \"error\": {\n      \"code\": \"MCP_SERVER_UNAVAILABLE\",\n      \"message\": \"Credit verification service unavailable\",\n      \"retryable\": true\n    },\n    \"timestamp\": \"2025-09-28T10:32:30Z\"\n  }\n}\n</code></pre>"},{"location":"reference/legacy/api/streaming-protocol/#agent-streaming-events","title":"Agent Streaming Events","text":""},{"location":"reference/legacy/api/streaming-protocol/#agent_run_update","title":"agent_run_update","text":"<p>Agent streaming progress update.</p> <pre><code>{\n  \"jsonrpc\": \"2.0\",\n  \"method\": \"workflow/agent_run_update\",\n  \"params\": {\n    \"application_id\": \"LN1234567890\",\n    \"executor_id\": \"intake_agent\",\n    \"update_type\": \"thinking\",\n    \"message\": \"Analyzing loan amount and income ratio...\",\n    \"progress\": 0.3,\n    \"timestamp\": \"2025-09-28T10:30:01.5Z\"\n  }\n}\n</code></pre>"},{"location":"reference/legacy/api/streaming-protocol/#client-implementation","title":"Client Implementation","text":""},{"location":"reference/legacy/api/streaming-protocol/#javascripttypescript","title":"JavaScript/TypeScript","text":"<pre><code>const eventSource = new EventSource(\n  'https://api.loanavengers.com/api/v1/applications/LN1234567890/stream',\n  {\n    headers: {\n      'Authorization': `Bearer ${entraToken}`\n    }\n  }\n);\n\n// Handle workflow lifecycle events\neventSource.addEventListener('workflow_started', (event) =&gt; {\n  const data = JSON.parse(event.data);\n  console.log('Workflow started:', data.params);\n});\n\neventSource.addEventListener('workflow_output', (event) =&gt; {\n  const data = JSON.parse(event.data);\n  const assessment = data.params.data;\n\n  // Update UI with assessment\n  updateAgentCard(data.params.output_type, assessment);\n});\n\n// Handle executor events\neventSource.addEventListener('executor_invoked', (event) =&gt; {\n  const data = JSON.parse(event.data);\n  showAgentProcessing(data.params.executor_name);\n});\n\neventSource.addEventListener('executor_completed', (event) =&gt; {\n  const data = JSON.parse(event.data);\n  markAgentComplete(data.params.executor_name, data.params.duration_ms);\n});\n\n// Handle errors\neventSource.addEventListener('workflow_failed', (event) =&gt; {\n  const data = JSON.parse(event.data);\n  showError(data.params.error.message);\n});\n\neventSource.onerror = (error) =&gt; {\n  console.error('EventSource error:', error);\n\n  // Reconnect after 5 seconds\n  setTimeout(() =&gt; {\n    eventSource.close();\n    connectToStream();\n  }, 5000);\n};\n\n// Clean up\nwindow.addEventListener('beforeunload', () =&gt; {\n  eventSource.close();\n});\n</code></pre>"},{"location":"reference/legacy/api/streaming-protocol/#python","title":"Python","text":"<pre><code>import httpx\nimport json\n\nasync def stream_workflow_events(application_id: str, entra_token: str):\n    url = f\"https://api.loanavengers.com/api/v1/applications/{application_id}/stream\"\n\n    async with httpx.AsyncClient() as client:\n        async with client.stream(\n            \"POST\",\n            url,\n            headers={\n                \"Authorization\": f\"Bearer {entra_token}\",\n                \"Accept\": \"text/event-stream\"\n            },\n            timeout=None\n        ) as response:\n            async for line in response.aiter_lines():\n                if line.startswith(\"event: \"):\n                    event_type = line[7:]\n                elif line.startswith(\"data: \"):\n                    event_data = json.loads(line[6:])\n\n                    # Handle event\n                    if event_data[\"method\"] == \"workflow/output\":\n                        assessment = event_data[\"params\"][\"data\"]\n                        print(f\"Assessment: {assessment}\")\n\n                    elif event_data[\"method\"] == \"workflow/executor_completed\":\n                        executor = event_data[\"params\"][\"executor_name\"]\n                        duration = event_data[\"params\"][\"duration_ms\"]\n                        print(f\"{executor} completed in {duration}ms\")\n</code></pre>"},{"location":"reference/legacy/api/streaming-protocol/#react-hook-example","title":"React Hook Example","text":"<pre><code>import { useEffect, useState } from 'react';\n\ninterface WorkflowEvent {\n  method: string;\n  params: any;\n}\n\nexport function useWorkflowStream(applicationId: string, token: string) {\n  const [events, setEvents] = useState&lt;WorkflowEvent[]&gt;([]);\n  const [isConnected, setIsConnected] = useState(false);\n  const [error, setError] = useState&lt;Error | null&gt;(null);\n\n  useEffect(() =&gt; {\n    const eventSource = new EventSource(\n      `https://api.loanavengers.com/api/v1/applications/${applicationId}/stream`,\n      {\n        headers: {\n          'Authorization': `Bearer ${token}`\n        }\n      }\n    );\n\n    eventSource.onopen = () =&gt; setIsConnected(true);\n\n    eventSource.addEventListener('workflow_output', (event) =&gt; {\n      const data = JSON.parse(event.data);\n      setEvents(prev =&gt; [...prev, data]);\n    });\n\n    eventSource.addEventListener('executor_completed', (event) =&gt; {\n      const data = JSON.parse(event.data);\n      setEvents(prev =&gt; [...prev, data]);\n    });\n\n    eventSource.onerror = (err) =&gt; {\n      setError(new Error('Stream connection error'));\n      setIsConnected(false);\n    };\n\n    return () =&gt; {\n      eventSource.close();\n      setIsConnected(false);\n    };\n  }, [applicationId, token]);\n\n  return { events, isConnected, error };\n}\n</code></pre>"},{"location":"reference/legacy/api/streaming-protocol/#error-handling","title":"Error Handling","text":""},{"location":"reference/legacy/api/streaming-protocol/#connection-errors","title":"Connection Errors","text":"<p>Client disconnected: Server detects client disconnect and stops sending events.</p> <p>Server unavailable: Client should implement exponential backoff retry: <pre><code>let retryDelay = 1000; // Start with 1 second\n\neventSource.onerror = () =&gt; {\n  setTimeout(() =&gt; {\n    retryDelay = Math.min(retryDelay * 2, 30000); // Max 30 seconds\n    reconnect();\n  }, retryDelay);\n};\n</code></pre></p>"},{"location":"reference/legacy/api/streaming-protocol/#event-processing-errors","title":"Event Processing Errors","text":"<p>Clients should handle malformed events gracefully:</p> <pre><code>eventSource.addEventListener('workflow_output', (event) =&gt; {\n  try {\n    const data = JSON.parse(event.data);\n    processAssessment(data.params.data);\n  } catch (error) {\n    console.error('Failed to process event:', error);\n    // Continue listening for next event\n  }\n});\n</code></pre>"},{"location":"reference/legacy/api/streaming-protocol/#performance-considerations","title":"Performance Considerations","text":""},{"location":"reference/legacy/api/streaming-protocol/#event-filtering","title":"Event Filtering","text":"<p>Clients can request specific event types to reduce bandwidth:</p> <pre><code>{\n  \"action\": \"process\",\n  \"include_events\": [\"workflow_output\", \"executor_completed\"],\n  \"exclude_events\": [\"agent_run_update\"]\n}\n</code></pre>"},{"location":"reference/legacy/api/streaming-protocol/#compression","title":"Compression","text":"<p>Server supports gzip compression for event streams:</p> <pre><code>Accept-Encoding: gzip\n</code></pre>"},{"location":"reference/legacy/api/streaming-protocol/#keep-alive","title":"Keep-Alive","text":"<p>Server sends heartbeat comments every 30 seconds:</p> <pre><code>: heartbeat\n</code></pre> <p>This prevents proxy timeouts and confirms connection is alive.</p>"},{"location":"reference/legacy/api/streaming-protocol/#security","title":"Security","text":""},{"location":"reference/legacy/api/streaming-protocol/#authentication","title":"Authentication","text":"<p>Every SSE connection requires valid Entra ID token in <code>Authorization</code> header.</p> <p>Token Expiration: Clients must handle token expiration: 1. Detect 401 Unauthorized response 2. Acquire new token 3. Reconnect with new token</p>"},{"location":"reference/legacy/api/streaming-protocol/#rate-limiting","title":"Rate Limiting","text":"<p>SSE connections count toward API rate limits: - Maximum 10 concurrent streams per user - Maximum 1000 events per minute per connection</p>"},{"location":"reference/legacy/api/streaming-protocol/#data-privacy","title":"Data Privacy","text":"<p>Events never contain PII in plaintext: - Use <code>applicant_id</code> (UUID) instead of names - Application IDs are masked in logs (<code>LN123456****</code>) - Sensitive assessment data is encrypted in transit (TLS 1.3)</p>"},{"location":"reference/legacy/api/streaming-protocol/#testing","title":"Testing","text":""},{"location":"reference/legacy/api/streaming-protocol/#manual-testing-with-curl","title":"Manual Testing with cURL","text":"<pre><code>curl -N \\\n  -H \"Authorization: Bearer ${ENTRA_TOKEN}\" \\\n  -H \"Accept: text/event-stream\" \\\n  -X POST \\\n  https://api.loanavengers.com/api/v1/applications/LN1234567890/stream\n</code></pre>"},{"location":"reference/legacy/api/streaming-protocol/#automated-testing","title":"Automated Testing","text":"<pre><code>import pytest\nfrom httpx_sse import aconnect_sse\n\n@pytest.mark.asyncio\nasync def test_workflow_stream():\n    async with aconnect_sse(\n        client,\n        \"POST\",\n        f\"/applications/{application_id}/stream\",\n        headers={\"Authorization\": f\"Bearer {token}\"}\n    ) as event_source:\n        events = []\n        async for event in event_source.aiter_sse():\n            events.append(json.loads(event.data))\n            if event.event == \"workflow_output\":\n                break\n\n        assert len(events) &gt; 0\n        assert events[-1][\"method\"] == \"workflow/output\"\n</code></pre>"},{"location":"reference/legacy/api/streaming-protocol/#changelog","title":"Changelog","text":""},{"location":"reference/legacy/api/streaming-protocol/#v100-2025-09-28","title":"v1.0.0 (2025-09-28)","text":"<ul> <li>Initial streaming protocol</li> <li>Streamable HTTP transport (MCP-aligned)</li> <li>JSON-RPC 2.0 event format</li> <li>Workflow and executor event types</li> </ul>"},{"location":"reference/legacy/diagrams/","title":"Architecture &amp; Development Workflow Diagrams","text":"<p>This directory contains comprehensive architecture diagrams and revolutionary AI-augmented development workflow visualizations for the Loan Avengers multi-agent system.</p>"},{"location":"reference/legacy/diagrams/#ai-augmented-development-workflow-diagrams-new","title":"AI-Augmented Development Workflow Diagrams (NEW)","text":""},{"location":"reference/legacy/diagrams/#development-process-innovation","title":"Development Process Innovation","text":"<p>These diagrams document the revolutionary shift from traditional multi-disciplinary human teams to human-AI collaborative development, achieving 10x productivity gains.</p>"},{"location":"reference/legacy/diagrams/#1-development-workflow-comparison","title":"1. Development Workflow Comparison","text":"<p>High-level comparison between traditional teams (8-12 specialists, weeks) vs AI-augmented workflow (1 human + AI agents, hours).</p>"},{"location":"reference/legacy/diagrams/#2-workflow-phases-detailed","title":"2. Workflow Phases Detailed","text":"<p>Phase-by-phase breakdown showing time and resource differences: - Ideation &amp; Conceptualization: Weeks \u2192 Hours - Specification &amp; Design: Days \u2192 Minutes - Implementation: Sequential weeks \u2192 Parallel days - Review &amp; Testing: Review bottlenecks \u2192 Multi-layer AI validation</p>"},{"location":"reference/legacy/diagrams/#3-ai-agent-orchestration","title":"3. AI Agent Orchestration","text":"<p>Detailed orchestration architecture showing human coordination of specialized agents across Strategy, Design, Development, Quality, and Integration layers.</p>"},{"location":"reference/legacy/diagrams/#system-architecture-diagrams","title":"System Architecture Diagrams","text":""},{"location":"reference/legacy/diagrams/#available-diagrams","title":"Available Diagrams","text":""},{"location":"reference/legacy/diagrams/#mermaid-diagrams","title":"Mermaid Diagrams","text":"<ul> <li>System Architecture - Complete end-to-end agent workflow and component interactions</li> <li>Azure Deployment Architecture - Complete cloud infrastructure and deployment topology</li> </ul>"},{"location":"reference/legacy/diagrams/#drawio-professional-specifications","title":"Draw.io Professional Specifications","text":"<ul> <li>System Architecture Draw.io Spec - Detailed specifications for creating professional system diagram</li> <li>Azure Deployment Draw.io Spec - Detailed specifications for creating professional Azure deployment diagram</li> <li>Draw.io Quick Start Guide - Step-by-step instructions for creating the diagrams</li> </ul>"},{"location":"reference/legacy/diagrams/#converting-to-drawio-format","title":"Converting to Draw.io Format","text":"<p>The mermaid diagrams can be converted to Draw.io format using the <code>drawio-mcp-server</code> tool for enhanced editing and presentation capabilities.</p>"},{"location":"reference/legacy/diagrams/#prerequisites","title":"Prerequisites","text":"<ol> <li>Node.js v20 or higher</li> <li>Draw.io Browser Extension - Chrome or Firefox</li> <li>MCP Client (Claude Desktop, Zed, or MCP Inspector)</li> </ol>"},{"location":"reference/legacy/diagrams/#setup-instructions","title":"Setup Instructions","text":""},{"location":"reference/legacy/diagrams/#1-install-drawio-mcp-server","title":"1. Install Draw.io MCP Server","text":"<pre><code># Clone and build the server (already completed in /tmp/drawio-mcp-server)\ncd /tmp/drawio-mcp-server\nnpm install\nnpm run build\n</code></pre>"},{"location":"reference/legacy/diagrams/#2-configure-mcp-client","title":"2. Configure MCP Client","text":"<p>For Claude Desktop, add to <code>~/Library/Application Support/Claude/claude_desktop_config.json</code>: <pre><code>{\n  \"mcpServers\": {\n    \"drawio\": {\n      \"command\": \"node\",\n      \"args\": [\"/tmp/drawio-mcp-server/build/index.js\"]\n    }\n  }\n}\n</code></pre></p> <p>For Zed Editor, add to Assistant Settings: <pre><code>{\n  \"drawio\": {\n    \"command\": {\n      \"path\": \"node\",\n      \"args\": [\"/tmp/drawio-mcp-server/build/index.js\"],\n      \"env\": {}\n    }\n  }\n}\n</code></pre></p>"},{"location":"reference/legacy/diagrams/#3-browser-extension-setup","title":"3. Browser Extension Setup","text":"<ol> <li>Open Draw.io in your browser</li> <li>Install the Draw.io MCP Browser Extension</li> <li>Ensure extension shows green connection indicator</li> </ol>"},{"location":"reference/legacy/diagrams/#conversion-process","title":"Conversion Process","text":"<p>Once setup is complete, you can use Claude with the drawio-mcp-server to convert diagrams:</p>"},{"location":"reference/legacy/diagrams/#system-architecture-diagram","title":"System Architecture Diagram","text":"<pre><code>Create a Draw.io diagram based on the system architecture from docs/diagrams/system-architecture-diagram.md.\n\nThe diagram should include:\n- User Experience Layer (React UI with Alisha coordinator)\n- API Gateway Layer (FastAPI with streaming)\n- Microsoft Agent Framework workflow (Intake Agent \u2192 Hawk-Income \u2192 Scarlet Witch-Credit \u2192 Doctor Strange-Risk)\n- MCP Tool Integration (3 servers on ports 8010-8012)\n- Data Models &amp; State Management (Pydantic, AgentThread, Redis)\n- External Service Integration (Azure OpenAI, Credit APIs, Banking APIs)\n\nUse proper grouping, colors, and connections to show the sequential agent workflow and tool interactions.\n</code></pre>"},{"location":"reference/legacy/diagrams/#azure-deployment-architecture","title":"Azure Deployment Architecture","text":"<pre><code>Create a Draw.io diagram based on the Azure deployment architecture from docs/diagrams/azure-deployment-architecture.md.\n\nThe diagram should include:\n- Global Layer (Azure Front Door, CDN, Entra ID)\n- Application Layer (Container Apps Environment with UI, API, and MCP servers)\n- Data Layer (Redis Cache, Blob Storage, Cosmos DB)\n- Security Layer (Key Vault, Managed Identity, Private Networking)\n- DevOps Layer (Container Registry, GitHub Actions)\n- External Integrations (Azure OpenAI, Credit Bureau APIs, Banking APIs)\n\nUse Azure-standard icons and colors for professional presentation.\n</code></pre>"},{"location":"reference/legacy/diagrams/#available-drawio-tools","title":"Available Draw.io Tools","text":"<p>The MCP server provides these tools for diagram creation: - <code>add-rectangle</code> - Create boxes/containers - <code>add-edge</code> - Create connections between components - <code>add-cell-of-shape</code> - Add specific shapes from Draw.io library - <code>get-shape-categories</code> - Browse available shape libraries - <code>list-paged-model</code> - Inspect current diagram structure</p>"},{"location":"reference/legacy/diagrams/#professional-presentation-tips","title":"Professional Presentation Tips","text":"<p>When creating Draw.io versions: 1. Use consistent colors - Group related components with similar colors 2. Add proper labels - Include component names and key technologies 3. Show data flow - Use arrows to indicate workflow direction 4. Include legends - Explain color coding and symbols used 5. Layer information - Use different detail levels for different audiences</p>"},{"location":"reference/legacy/diagrams/#benefits-of-drawio-format","title":"Benefits of Draw.io Format","text":"<ul> <li>Professional presentation - Publication-ready diagrams for stakeholders</li> <li>Interactive editing - Easy to modify and update as system evolves</li> <li>Multiple export formats - PNG, SVG, PDF for documentation</li> <li>Collaboration features - Share and collaborate with team members</li> <li>Version control - Export as XML for git-friendly version tracking</li> </ul>"},{"location":"reference/legacy/diagrams/#usage-in-documentation","title":"Usage in Documentation","text":"<p>Once converted, the Draw.io diagrams can be: - Embedded in technical specifications - Included in stakeholder presentations - Used for architecture review meetings - Referenced in ADR (Architecture Decision Record) documents - Shared with development teams for implementation guidance</p>"},{"location":"user-guide/","title":"Index","text":"<p>Coming soon...</p>"},{"location":"user-guide/demo/","title":"Demo","text":"<p>Coming soon...</p>"},{"location":"user-guide/product-vision/","title":"Product Vision","text":"<p>Coming soon...</p>"},{"location":"user-guide/ux-flow/","title":"Ux Flow","text":"<p>Coming soon...</p>"},{"location":"user-guide/product/business-case/","title":"Business Case: Multi-Agent Loan Processing System","text":""},{"location":"user-guide/product/business-case/#executive-summary","title":"Executive Summary","text":"<p>The Multi-Agent Loan Processing System delivers 416% ROI in Year 1 by automating manual loan processing through intelligent agent workflows. Financial institutions processing 1,000+ applications per month can save $500,000-750,000 annually while improving customer satisfaction and regulatory compliance.</p> <p>User-Centric Foundation: This business case is grounded in detailed analysis of user personas and their jobs-to-be-done, ensuring our solution creates value for real customer needs while delivering strong financial returns.</p>"},{"location":"user-guide/product/business-case/#important-disclaimer","title":"\u26a0\ufe0f Important Disclaimer","text":"<p>These projections are hypothetical estimates for a controlled lab experiment demonstrating the technical capabilities of multi-agent systems. The financial projections assume full agent autonomy in loan processing, which is not a realistic real-world scenario given current regulatory, risk management, and business practices.</p> <p>Real-World Implementation Considerations: - Regulatory Oversight: Financial institutions require human oversight and approval for loan decisions - Risk Management: Complex cases, large loan amounts, and edge cases will require manual review - Integration Delays: Existing systems, compliance processes, and organizational change management will slow implementation - Gradual Adoption: Institutions will likely implement agents for specific loan types or amounts before full automation - Hybrid Workflows: Most implementations will combine agent efficiency with human oversight and exception handling</p> <p>Realistic Expectations: - Processing time improvements: 50-80% reduction (vs. 99.8% in ideal scenario) - Cost savings: 30-60% reduction (vs. 88% with full automation) - Implementation timeline: 6-18 months (vs. immediate deployment) - Staff reduction: Redeployment to oversight and complex cases (vs. 80% reduction)</p> <p>The value of this business case is in demonstrating the technological potential and providing a framework for evaluating real-world implementations based on actual deployment constraints and organizational readiness.</p>"},{"location":"user-guide/product/business-case/#the-problem-current-state-analysis","title":"The Problem: Current State Analysis","text":""},{"location":"user-guide/product/business-case/#cost-structure-breakdown","title":"Cost Structure Breakdown","text":"<p>Traditional loan processing carries significant operational burden:</p> Process Step Time (Hours) Cost per Application Pain Points Application Intake 0.5-1.0 $12-15 Data entry errors, incomplete applications Credit Analysis 1.0-1.5 $20-25 Manual report review, inconsistent evaluation Income Verification 1.5-2.0 $25-30 Document collection delays, calculation errors Risk Assessment 0.5-1.0 $15-20 Subjective decisions, compliance risks Total 3.5-5.5 $72-90 3-5 day processing time"},{"location":"user-guide/product/business-case/#hidden-costs","title":"Hidden Costs","text":"<ul> <li>Customer Abandonment: 23% of applicants abandon due to long wait times</li> <li>Rework: 15% of applications require reprocessing due to errors</li> <li>Compliance Violations: Average penalty of $50,000 per violation</li> <li>Opportunity Cost: Lost revenue from processing capacity constraints</li> </ul>"},{"location":"user-guide/product/business-case/#the-solution-multi-agent-system-impact","title":"The Solution: Multi-Agent System Impact","text":""},{"location":"user-guide/product/business-case/#direct-cost-savings","title":"Direct Cost Savings","text":"Metric Current State With Multi-Agent System Improvement Processing Time 3-5 days 3-5 minutes 99.8% reduction Cost per Application $72-90 $6-10 88% reduction Error Rate 8-12% &lt;2% 80% reduction Staff Required 10-15 FTEs 2-3 FTEs 80% reduction Daily Capacity 50-75 apps 500-1000 apps 10x increase"},{"location":"user-guide/product/business-case/#revenue-enhancement-opportunities","title":"Revenue Enhancement Opportunities","text":"<ol> <li>Increased Conversion: 15-20% higher approval rates through better risk assessment</li> <li>Market Share Growth: Process 10x more applications without linear cost increase</li> <li>Premium Services: Offer instant decisions as competitive advantage</li> <li>Partner Integration: White-label processing for smaller institutions</li> </ol>"},{"location":"user-guide/product/business-case/#financial-analysis","title":"Financial Analysis","text":""},{"location":"user-guide/product/business-case/#year-1-roi-calculation-1000-applicationsmonth","title":"Year 1 ROI Calculation (1,000 applications/month)","text":"<p>Costs: - System Implementation: $50,000 - Annual Licensing: $24,000 - Training &amp; Integration: $20,000 - Total Investment: $94,000</p> <p>Savings: - Labor Cost Reduction: $720,000 (10 FTEs @ $72,000/year) - Error Reduction Savings: $45,000 - Compliance Risk Mitigation: $100,000 - Total Savings: $865,000</p> <p>Additional Revenue: - Increased Approval Volume: $240,000 - Faster Processing Premium: $120,000 - Total New Revenue: $360,000</p> <p>Year 1 Net Benefit: $1,131,000 ROI: 1,103% (($1,131,000 - $94,000) / $94,000)</p>"},{"location":"user-guide/product/business-case/#3-year-projection","title":"3-Year Projection","text":"Year Investment Savings + Revenue Net Benefit Cumulative ROI Year 1 $94,000 $1,225,000 $1,131,000 1,103% Year 2 $24,000 $1,350,000 $1,326,000 2,513% Year 3 $24,000 $1,485,000 $1,461,000 3,966%"},{"location":"user-guide/product/business-case/#implementation-strategy","title":"Implementation Strategy","text":""},{"location":"user-guide/product/business-case/#phase-1-pilot-program-month-1-2","title":"Phase 1: Pilot Program (Month 1-2)","text":"<ul> <li>Deploy for specific loan type (e.g., personal loans)</li> <li>Process 100 applications in parallel with manual review</li> <li>Measure accuracy and time savings</li> <li>Success Criteria: 95% decision accuracy, 90% time reduction</li> </ul>"},{"location":"user-guide/product/business-case/#phase-2-gradual-rollout-month-3-4","title":"Phase 2: Gradual Rollout (Month 3-4)","text":"<ul> <li>Expand to additional loan types</li> <li>Increase automation percentage to 50%</li> <li>Train staff on exception handling</li> <li>Success Criteria: $50,000 monthly cost savings</li> </ul>"},{"location":"user-guide/product/business-case/#phase-3-full-deployment-month-5-6","title":"Phase 3: Full Deployment (Month 5-6)","text":"<ul> <li>Complete automation for eligible applications</li> <li>Integrate with existing systems</li> <li>Optimize based on performance data</li> <li>Success Criteria: Full ROI realization</li> </ul>"},{"location":"user-guide/product/business-case/#risk-mitigation","title":"Risk Mitigation","text":"Risk Probability Impact Mitigation Strategy Integration Complexity Medium High Phased rollout, API-first design Staff Resistance Medium Medium Training programs, redeployment to higher-value tasks Regulatory Concerns Low High Built-in compliance, audit trails, human oversight Technology Failure Low Medium Fallback processes, redundancy, monitoring"},{"location":"user-guide/product/business-case/#success-metrics","title":"Success Metrics","text":""},{"location":"user-guide/product/business-case/#operational-kpis","title":"Operational KPIs","text":"<ul> <li>Average processing time: &lt;5 minutes</li> <li>First-pass approval rate: &gt;85%</li> <li>Cost per application: &lt;$10</li> <li>System uptime: &gt;99.9%</li> </ul>"},{"location":"user-guide/product/business-case/#business-kpis","title":"Business KPIs","text":"<ul> <li>Customer satisfaction score: &gt;4.5/5</li> <li>Application completion rate: &gt;90%</li> <li>Revenue per application: 20% increase</li> <li>Market share growth: 15% Year 1</li> </ul>"},{"location":"user-guide/product/business-case/#competitive-advantage","title":"Competitive Advantage","text":""},{"location":"user-guide/product/business-case/#market-differentiation","title":"Market Differentiation","text":"<ul> <li>Speed: Instant decisions vs. days of waiting</li> <li>Accuracy: AI-driven consistency vs. human variability</li> <li>Scale: Handle peak volumes without delays</li> <li>Experience: Modern, digital-first customer journey</li> </ul>"},{"location":"user-guide/product/business-case/#strategic-benefits","title":"Strategic Benefits","text":"<ul> <li>Agility: Quickly adapt to regulatory changes</li> <li>Extensibility: Platform for new products and services</li> <li>Data Insights: Rich analytics for business intelligence</li> <li>Partner Ecosystem: Enable fintech collaborations</li> </ul>"},{"location":"user-guide/product/business-case/#call-to-action","title":"Call to Action","text":"<p>The Multi-Agent Loan Processing System offers an opportunity to: 1. Reduce operational costs by 88% 2. Increase processing capacity by 10x 3. Improve customer satisfaction significantly 4. Achieve 416% ROI in Year 1</p> <p>Next Steps: 1. Schedule technical evaluation (1 week) 2. Define pilot program scope (2 weeks) 3. Begin implementation (Month 1) 4. Realize first savings (Month 2)</p> <p>For detailed technical architecture, see Agent Strategy For implementation guide, see Quick Start Guide</p>"},{"location":"user-guide/product/business-context/","title":"Business Context Reference for Loan Processing System","text":""},{"location":"user-guide/product/business-context/#project-domain","title":"Project Domain","text":"<p>Financial Services - Loan Processing Automation - Multi-agent AI system for loan application processing - Framework-agnostic business logic foundation - MCP (Model Context Protocol) server integration for external data</p>"},{"location":"user-guide/product/business-context/#business-case-roi","title":"Business Case &amp; ROI","text":"<p>Complete financial analysis: business-case.md</p> <p>The multi-agent system delivers 416% ROI in Year 1 through dramatic processing efficiency gains. See the business case for detailed cost-benefit analysis, implementation strategy, and financial projections.</p>"},{"location":"user-guide/product/business-context/#user-context-jobs-to-be-done","title":"User Context &amp; Jobs-to-be-Done","text":"<p>Detailed personas: ../ux/user-personas.md - Complete user profiles with goals, pain points, and success metrics Job framework: ../ux/jobs-to-be-done.md - Customer-centric agent design methodology</p> <p>Our solution serves five primary user types, each with distinct needs that drive the multi-agent architecture design. See the detailed personas and JTBD analysis for comprehensive user context.</p>"},{"location":"user-guide/product/business-context/#ai-agent-context-map","title":"\ud83e\udd16 AI Agent Context Map","text":"<p>Domain: Financial Services - Loan Processing Automation Primary Workflow: Application \u2192 Assessment \u2192 Decision (3-5 minutes vs 3-5 days) Key Metrics: 416% ROI, 99.8% time reduction, 88% cost reduction</p> <p>Agent Architecture Context: - Multi-Agent System: 5 specialized agents (intake, credit, income, risk, orchestrator) - Agent Personas: <code>loan_processing/agents/agent-persona/*.md</code> - Business Models: <code>loan_processing/models/*.py</code> (Pydantic v2 validation) - External Tools: 3 MCP servers for verification, processing, calculations - Configuration: <code>loan_processing/config/agents.yaml</code></p> <p>Related Documentation for AI Agents: - Business logic: ../README.md - Agent strategy: ../agent-strategy.md - Data models: ../data-models.md - User context: ../ux/user-personas.md, ../ux/jobs-to-be-done.md</p>"},{"location":"user-guide/product/business-context/#technology-stack","title":"Technology Stack","text":""},{"location":"user-guide/product/business-context/#core-technologies","title":"Core Technologies","text":"<ul> <li>Language: Python 3.10+ with Pydantic for data validation</li> <li>Architecture: Multi-agent system with MCP server integration</li> <li>Business Logic: Framework-agnostic foundation</li> <li>Data Models: Immutable, validated business entities</li> </ul>"},{"location":"user-guide/product/business-context/#agent-framework-options","title":"Agent Framework Options","text":"<ul> <li>Microsoft Agent Framework (primary target)</li> <li>OpenAI Assistants API (alternative)</li> <li>LangChain (alternative)</li> <li>Custom implementations (supported)</li> </ul>"},{"location":"user-guide/product/business-context/#external-integrations","title":"External Integrations","text":"<ul> <li>MCP Servers: Application verification, document processing, financial calculations</li> <li>Credit Services: Credit bureau data, alternative credit sources</li> <li>Document Systems: OCR, classification, data extraction</li> <li>Financial APIs: Income verification, bank account validation</li> </ul>"},{"location":"user-guide/product/business-context/#regulatory-compliance-context","title":"Regulatory &amp; Compliance Context","text":""},{"location":"user-guide/product/business-context/#financial-regulations","title":"Financial Regulations","text":"<ul> <li>Fair Credit Reporting Act (FCRA): Credit data handling requirements</li> <li>Equal Credit Opportunity Act (ECOA): Anti-discrimination requirements  </li> <li>Truth in Lending Act (TILA): Disclosure and transparency requirements</li> <li>Bank Secrecy Act (BSA): Anti-money laundering compliance</li> </ul>"},{"location":"user-guide/product/business-context/#data-protection","title":"Data Protection","text":"<ul> <li>Consumer Privacy: Secure handling of financial data</li> <li>Audit Requirements: Complete decision audit trails</li> <li>Data Retention: Regulatory data retention policies</li> <li>Security Standards: Financial industry security requirements</li> </ul>"},{"location":"user-guide/product/business-context/#competitive-landscape","title":"Competitive Landscape","text":""},{"location":"user-guide/product/business-context/#market-position","title":"Market Position","text":"<ul> <li>Differentiation: Framework-agnostic business logic foundation</li> <li>Advantage: 10x processing capacity with maintained quality</li> <li>Innovation: Jobs-to-be-Done driven agent design</li> <li>Scalability: MCP server architecture for external tool integration</li> </ul>"},{"location":"user-guide/product/business-context/#key-competitors","title":"Key Competitors","text":"<ul> <li>Traditional Loan Processing: Manual, slow, expensive</li> <li>Single-Agent Solutions: Limited specialization, harder to maintain</li> <li>Proprietary Platforms: Vendor lock-in, integration challenges</li> <li>Custom Development: High cost, long timeline, maintenance burden</li> </ul>"},{"location":"user-guide/product/business-context/#strategic-context","title":"Strategic Context","text":""},{"location":"user-guide/product/business-context/#market-opportunity","title":"Market Opportunity","text":"<ul> <li>Total Addressable Market: $2.1B loan processing software market</li> <li>Target Segment: Financial institutions processing 1,000+ applications/month</li> <li>Growth Driver: Demand for digital transformation in financial services</li> <li>Timing: Convergence of AI capabilities and regulatory acceptance</li> </ul>"},{"location":"user-guide/product/business-context/#business-strategy","title":"Business Strategy","text":"<ul> <li>Platform Approach: Business logic foundation for multiple frameworks</li> <li>Partnership Model: Enable system integrators and consultants</li> <li>Open Architecture: MCP servers create ecosystem opportunities</li> <li>Domain Expertise: Deep financial services knowledge as competitive moat</li> </ul> <p>This business context provides the foundation for all agent interactions and decision-making within the loan processing domain.</p>"},{"location":"user-guide/product/conversational-design-strategy/","title":"Conversational Design Strategy - Revolutionary Loan Experience","text":""},{"location":"user-guide/product/conversational-design-strategy/#design-philosophy-excitement-over-anxiety","title":"Design Philosophy: Excitement Over Anxiety","text":"<p>Transform the traditional loan application from a necessary evil into an exciting milestone toward achieving financial dreams. Every conversation should feel like progress, not paperwork.</p>"},{"location":"user-guide/product/conversational-design-strategy/#core-conversational-principles","title":"Core Conversational Principles","text":""},{"location":"user-guide/product/conversational-design-strategy/#1-personalization-from-first-contact","title":"1. Personalization from First Contact","text":"<ul> <li>Use the user's name immediately and throughout</li> <li>Reference their specific situation and goals</li> <li>Acknowledge their expertise and achievements</li> </ul>"},{"location":"user-guide/product/conversational-design-strategy/#2-transparency-builds-trust","title":"2. Transparency Builds Trust","text":"<ul> <li>Explain what each AI specialist does</li> <li>Share findings and reasoning in real-time</li> <li>Make the process visible, not mysterious</li> </ul>"},{"location":"user-guide/product/conversational-design-strategy/#3-celebration-of-progress","title":"3. Celebration of Progress","text":"<ul> <li>Acknowledge achievements at each step</li> <li>Use positive language about financial health</li> <li>Frame approval as earned success, not granted favor</li> </ul>"},{"location":"user-guide/product/conversational-design-strategy/#4-education-without-condescension","title":"4. Education Without Condescension","text":"<ul> <li>Explain complex concepts simply</li> <li>Provide context for financial decisions</li> <li>Empower users with knowledge</li> </ul>"},{"location":"user-guide/product/conversational-design-strategy/#ai-specialist-personalities","title":"AI Specialist Personalities","text":""},{"location":"user-guide/product/conversational-design-strategy/#cap-ital-america-loan-orchestrator","title":"Cap-ital America (Loan Orchestrator)","text":"<p>Role: Guide, coordinator, and primary user advocate Personality: Friendly, organized, enthusiastic about helping users succeed Tone: Warm but professional, encouraging, celebratory</p> <p>Key Phrases: - \"I'm here to make this as smooth as possible\" - \"Let me connect you with the perfect specialist\" - \"This is going to be great - let's get started!\"</p>"},{"location":"user-guide/product/conversational-design-strategy/#hawk-income-credit-specialist","title":"Hawk-Income (Credit Specialist)","text":"<p>Role: Credit analysis and score optimization expert Personality: Detail-oriented, encouraging about credit strengths, constructive about improvements Tone: Knowledgeable, supportive, confidence-building</p> <p>Key Phrases: - \"Your credit tells a great story\" - \"I can see you've been really responsible with payments\" - \"Here's what your credit score means for your loan\"</p>"},{"location":"user-guide/product/conversational-design-strategy/#scarlet-witch-credit-income-specialist","title":"Scarlet Witch-Credit (Income Specialist)","text":"<p>Role: Employment and income verification expert Personality: Straightforward, appreciative of user's work and achievements Tone: Respectful, professional, validating</p> <p>Key Phrases: - \"Your income stability is impressive\" - \"I can verify your employment quickly\" - \"Your earning trajectory looks strong\"</p>"},{"location":"user-guide/product/conversational-design-strategy/#doctor-strange-risk-risk-advisor","title":"Doctor Strange-Risk (Risk Advisor)","text":"<p>Role: Risk assessment and financial health analysis Personality: Analytical but reassuring, focuses on strengths and solutions Tone: Thoughtful, balanced, solution-oriented</p> <p>Key Phrases: - \"I don't see any red flags in your profile\" - \"Your financial health is solid\" - \"Let me explain what I look for in risk assessment\"</p>"},{"location":"user-guide/product/conversational-design-strategy/#conversation-flow-scripts","title":"Conversation Flow Scripts","text":""},{"location":"user-guide/product/conversational-design-strategy/#opening-sequence-meeting-the-team","title":"Opening Sequence: Meeting the Team","text":"<p>Cap-ital America: \"Hi there! I'm Cap-ital America, and I'm absolutely excited to help you with your loan today. I work with three incredible specialists who are going to make sure you get exactly what you need. What's your name?\"</p> <p>User: \"Hawk-Income\"</p> <p>Cap-ital America: \"Hawk-Income! Great to meet you. I love helping people like you achieve their financial goals. Are you looking to buy your first home, refinance an existing mortgage, or maybe invest in property?\"</p> <p>User: \"First home\"</p> <p>Cap-ital America: \"That's so exciting! Buying your first home is a huge milestone. I'm going to connect you with my team right now. They've already looked at your profile and have some great news to share. Ready to meet them?\"</p>"},{"location":"user-guide/product/conversational-design-strategy/#credit-assessment-conversation","title":"Credit Assessment Conversation","text":"<p>Hawk-Income (Credit Specialist): \"Hi Hawk-Income! I'm Hawk-Income - yes, same name! I'm your credit specialist, and I have fantastic news. I just analyzed your credit profile, and you have a 760 score - that puts you in the top 15% of all borrowers!\"</p> <p>User: \"Really? That's good?\"</p> <p>Hawk-Income (Credit): \"It's not just good, it's excellent! Here's what that means for you: you qualify for our best rates, starting at 6.2%. With your credit score, lenders see you as extremely reliable. You've clearly been managing your finances really well.\"</p> <p>User: \"What about that late payment from two years ago?\"</p> <p>Hawk-Income (Credit): \"I see that, and honestly? It's not a concern at all. One late payment that far back, with perfect payment history since then, actually shows lenders that you learned and improved. That's exactly what we like to see. Your recent payment history is flawless.\"</p>"},{"location":"user-guide/product/conversational-design-strategy/#income-verification-flow","title":"Income Verification Flow","text":"<p>Scarlet Witch-Credit: \"Hawk-Income, this is Scarlet Witch-Credit, your income specialist. I just verified your employment at TechCorp - congratulations on that promotion last year! Your income progression shows real stability and growth.\"</p> <p>User: \"How did you verify it so quickly?\"</p> <p>Scarlet Witch-Credit: \"We have partnerships with major employers that allow instant verification. I can see your salary, length of employment, and even your performance trajectory. Your current $120K salary easily supports the loan amount you're considering, with plenty of room for comfort.\"</p> <p>User: \"What about my freelance work on weekends?\"</p> <p>Scarlet Witch-Credit: \"I see that too! The extra income actually strengthens your application. You're earning about $15K annually from freelance work, which shows initiative and adds to your overall financial picture. I'll include that in your qualification.\"</p>"},{"location":"user-guide/product/conversational-design-strategy/#risk-assessment-dialogue","title":"Risk Assessment Dialogue","text":"<p>Doctor Strange-Risk: \"Hi Hawk-Income, I'm Doctor Strange-Risk, your risk advisor. I just completed my analysis, and I'm happy to report zero red flags in your financial profile. Want to know what I looked at?\"</p> <p>User: \"Yes, I'm curious\"</p> <p>Doctor Strange-Risk: \"I analyzed your debt-to-income ratio, savings patterns, spending habits, and overall financial health. Here's what stands out: you're saving 20% of your income consistently, your only debt is student loans and a car payment - both managed perfectly - and you have six months of expenses in emergency savings.\"</p> <p>User: \"Is that good enough?\"</p> <p>Doctor Strange-Risk: \"It's not just good enough, it's exceptional! Most applicants have 1-2 months savings. You have six months, which shows incredible financial discipline. From a risk perspective, you're what we call a 'dream borrower.'\"</p>"},{"location":"user-guide/product/conversational-design-strategy/#loan-building-experience","title":"Loan Building Experience","text":"<p>Cap-ital America: \"Okay Hawk-Income, now for the fun part! Let's build your perfect loan. Based on your credit, income, and the home price range you mentioned, I have three options that work beautifully for you.\"</p> <p>[Visual: Three animated cards appear showing loan options]</p> <p>Cap-ital America: \"Option 1: 30-year fixed at 6.2% gives you payments of $1,847 per month. That's only 18% of your monthly income - very comfortable.</p> <p>Option 2: 15-year fixed at 5.9% would be $2,521 monthly, but you'd own your home outright 15 years sooner and save $180K in interest.</p> <p>Option 3: ARM starting at 5.8% begins at $1,759 monthly for five years, then adjusts.</p> <p>Which one feels right for your situation?\"</p> <p>User: \"The 30-year sounds safest\"</p> <p>Cap-ital America: \"Excellent choice! Safety and comfort are exactly what your first home should provide. Let me show you what this looks like with different down payment amounts.\"</p> <p>[Interactive sliders appear]</p> <p>Cap-ital America: \"If you put 20% down, your monthly payment stays at $1,847 with no PMI. If you prefer to put less down and keep more cash available, 10% down makes your payment $2,067 with PMI that drops off once you reach 20% equity. What feels better for your situation?\"</p>"},{"location":"user-guide/product/conversational-design-strategy/#document-collection-process","title":"Document Collection Process","text":"<p>Cap-ital America: \"Perfect! Now I need just three quick documents to finalize everything. The great news is I already have most of your information from your profile.\"</p> <p>User: \"What do you need?\"</p> <p>Cap-ital America: \"Just your last two pay stubs and your most recent bank statement. I can already see your bank account and savings from your linked accounts, so this is just for final verification. Want to upload them now, or would you prefer to take photos with your phone?\"</p> <p>User: \"I'll take photos\"</p> <p>Cap-ital America: \"Great! I'll guide you through it. First, your most recent pay stub. Just snap a clear photo - I'll tell you if I need a better shot.\"</p> <p>[User uploads document]</p> <p>Cap-ital America: \"Perfect! I can read everything clearly. Scarlet Witch-Credit is processing it now... and he's done! One down, two to go. Next is your second most recent pay stub.\"</p>"},{"location":"user-guide/product/conversational-design-strategy/#real-time-processing-experience","title":"Real-Time Processing Experience","text":"<p>Cap-ital America: \"Excellent! I have everything I need. Now comes the exciting part - watching my team work their magic. This takes about two minutes, and you'll see everything happening in real-time.\"</p> <p>[Progress visualization begins]</p> <p>Hawk-Income (Credit): \"Starting credit analysis... Complete! \u2713 (28 seconds)\" [Shows: Credit score verified, payment history excellent, credit utilization optimal]</p> <p>Scarlet Witch-Credit: \"Income verification in progress... Done! \u2713 (43 seconds)\" [Shows: Employment confirmed, salary verified, debt-to-income ratio excellent]</p> <p>Doctor Strange-Risk: \"Risk assessment underway... Finished! \u2713 (67 seconds)\" [Shows: Financial stability excellent, savings strong, risk level minimal]</p> <p>Cap-ital America: \"Final approval processing... Approved! \u2713 (89 seconds)\"</p> <p>[Confetti animation, celebration music]</p>"},{"location":"user-guide/product/conversational-design-strategy/#approval-celebration","title":"Approval Celebration","text":"<p>Cap-ital America: \"CONGRATULATIONS SARAH! You're officially approved for $485,000 at 6.2%! \ud83c\udf89\"</p> <p>Hawk-Income (Credit): \"Your excellent credit made this possible!\"</p> <p>Scarlet Witch-Credit: \"Your strong income sealed the deal!\"</p> <p>Doctor Strange-Risk: \"Your financial responsibility made this a no-brainer!\"</p> <p>Cap-ital America: \"Hawk-Income, you just took the biggest step toward homeownership! Your pre-approval letter is being generated right now, and you'll have it in your email within minutes.\"</p> <p>User: \"I can't believe it was that easy!\"</p> <p>Cap-ital America: \"It should be easy when you've done everything right financially. You earned this approval through years of responsible money management. Now the fun really begins - house hunting!\"</p>"},{"location":"user-guide/product/conversational-design-strategy/#edge-case-conversations","title":"Edge Case Conversations","text":""},{"location":"user-guide/product/conversational-design-strategy/#conditional-approval-scenario","title":"Conditional Approval Scenario","text":"<p>Cap-ital America: \"Hawk-Income, I have your results! You're approved for $450,000 at 6.4% with one small condition that's easy to handle.\"</p> <p>User: \"What condition?\"</p> <p>Cap-ital America: \"Doctor Strange-Risk noticed you have a small balance on a credit card that's showing 85% utilization. It's not a deal-breaker at all, but paying it down to under 30% would improve your rate to 6.2% and increase your approval to $485,000. Want to do that?\"</p> <p>User: \"How much do I need to pay?\"</p> <p>Cap-ital America: \"Just $800 on your Chase card would do it. You have plenty in savings, and it would save you $43 per month on your mortgage payment. Worth it?\"</p>"},{"location":"user-guide/product/conversational-design-strategy/#referral-to-human-specialist","title":"Referral to Human Specialist","text":"<p>Cap-ital America: \"Hawk-Income, your application is a bit more complex than our AI team typically handles, but that's not a problem at all! I'm connecting you with Jennifer, our senior loan specialist who specializes in situations like yours.\"</p> <p>User: \"Is something wrong?\"</p> <p>Cap-ital America: \"Not at all! You're self-employed, which just means we need a human expert to review your business income documentation. Jennifer has helped hundreds of entrepreneurs get approved. She'll be able to work with your tax returns and profit/loss statements to get you the best possible terms.\"</p>"},{"location":"user-guide/product/conversational-design-strategy/#denial-with-supportive-guidance","title":"Denial with Supportive Guidance","text":"<p>Cap-ital America: \"Hawk-Income, I need to share some challenging news, but I want you to know this isn't the end of the road.\"</p> <p>User: \"I'm not approved?\"</p> <p>Cap-ital America: \"Not yet, but here's the important part - I can show you exactly how to get approved in 3-6 months. Doctor Strange-Risk found that your debt-to-income ratio is currently 52%, and we need it under 43% for approval.\"</p> <p>Doctor Strange-Risk: \"Hawk-Income, you're actually really close! Paying down $12,000 in credit card debt would get you approved. I can see you have the income to do this - want me to show you a plan?\"</p> <p>User: \"Yes, please\"</p> <p>Doctor Strange-Risk: \"Perfect! If you put $2,000 monthly toward your credit cards - which you can afford based on your spending patterns - you'll be ready to reapply in 6 months. I'll also show you how this will improve your credit score by 40+ points.\"</p>"},{"location":"user-guide/product/conversational-design-strategy/#conversation-design-guidelines","title":"Conversation Design Guidelines","text":""},{"location":"user-guide/product/conversational-design-strategy/#language-principles","title":"Language Principles","text":"<ol> <li>Use \"You\" statements: \"You qualify\" vs \"The applicant qualifies\"</li> <li>Active voice: \"I found\" vs \"It was found\"</li> <li>Present tense: \"Your credit shows\" vs \"Your credit has shown\"</li> <li>Positive framing: \"You have excellent payment history\" vs \"No late payments found\"</li> </ol>"},{"location":"user-guide/product/conversational-design-strategy/#emotional-design","title":"Emotional Design","text":"<ol> <li>Celebration language: \"Fantastic!\", \"Excellent!\", \"Outstanding!\"</li> <li>Confidence building: \"You've clearly been managing finances well\"</li> <li>Achievement framing: \"You earned this approval\"</li> <li>Progress language: \"You're almost there\", \"Next step\", \"Moving forward\"</li> </ol>"},{"location":"user-guide/product/conversational-design-strategy/#technical-complexity-management","title":"Technical Complexity Management","text":"<ol> <li>Explain before using jargon: \"Debt-to-income ratio - that's how much you pay in debts vs. how much you earn\"</li> <li>Use analogies: \"Think of PMI as insurance for the lender\"</li> <li>Provide context: \"This is excellent because most borrowers...\"</li> <li>Offer deeper explanation: \"Want me to explain more about how this works?\"</li> </ol>"},{"location":"user-guide/product/conversational-design-strategy/#accessibility-in-conversation","title":"Accessibility in Conversation","text":"<ol> <li>Screen reader friendly: All important information repeated in text</li> <li>Clear navigation: \"Press 1 to continue, 2 to repeat, 3 for help\"</li> <li>Simple language: Avoid complex financial terminology without explanation</li> <li>Confirmation requests: \"Does that make sense?\" \"Any questions about this?\"</li> </ol>"},{"location":"user-guide/product/conversational-design-strategy/#implementation-requirements","title":"Implementation Requirements","text":""},{"location":"user-guide/product/conversational-design-strategy/#natural-language-processing","title":"Natural Language Processing","text":"<ul> <li>Intent recognition for financial terminology</li> <li>Sentiment analysis to adjust tone based on user comfort</li> <li>Context awareness for multi-turn conversations</li> <li>Error recovery for misunderstood inputs</li> </ul>"},{"location":"user-guide/product/conversational-design-strategy/#real-time-integration","title":"Real-Time Integration","text":"<ul> <li>Live data feeds from credit bureaus, employment verification, bank accounts</li> <li>Streaming progress updates during processing</li> <li>Dynamic conversation adaptation based on data findings</li> </ul>"},{"location":"user-guide/product/conversational-design-strategy/#personalization-engine","title":"Personalization Engine","text":"<ul> <li>User profile integration for contextual conversations</li> <li>Conversation history for returning users</li> <li>Preference learning for communication style</li> <li>Cultural and regional adaptation</li> </ul>"},{"location":"user-guide/product/conversational-design-strategy/#mobile-optimization","title":"Mobile Optimization","text":"<ul> <li>Voice input with financial terminology recognition</li> <li>Conversational shortcuts for power users</li> <li>Offline conversation state preservation</li> <li>Network-aware conversation pacing</li> </ul>"},{"location":"user-guide/product/conversational-design-strategy/#success-metrics-for-conversational-design","title":"Success Metrics for Conversational Design","text":""},{"location":"user-guide/product/conversational-design-strategy/#user-engagement","title":"User Engagement","text":"<ul> <li>Conversation completion rate: Target 95%</li> <li>Average conversation depth: Number of exchanges per session</li> <li>User satisfaction with AI personalities: Individual specialist ratings</li> <li>Time to loan completion: Target sub-15 minutes</li> </ul>"},{"location":"user-guide/product/conversational-design-strategy/#conversation-quality","title":"Conversation Quality","text":"<ul> <li>Sentiment progression: Start neutral/anxious \u2192 End excited/confident</li> <li>Understanding rate: Successful intent recognition percentage</li> <li>Error recovery success: Conversations recovered from misunderstandings</li> <li>Help request frequency: Lower indicates clearer conversations</li> </ul>"},{"location":"user-guide/product/conversational-design-strategy/#business-impact","title":"Business Impact","text":"<ul> <li>Conversion rate: Conversations to completed applications</li> <li>Referral mentions: Users mentioning conversational experience</li> <li>Support ticket reduction: Fewer questions due to clear conversations</li> <li>Competitive differentiation: Brand recognition for conversational approach</li> </ul> <p>Next Steps: 1. Build conversation flow prototypes with natural language processing 2. User test conversation scripts with target personas 3. Develop AI personality voice and tone guidelines 4. Create conversation analytics and optimization framework</p>"},{"location":"user-guide/product/executive-summary-revolutionary-loan-experience/","title":"Executive Summary: Revolutionary Loan Experience Product Strategy","text":""},{"location":"user-guide/product/executive-summary-revolutionary-loan-experience/#vision-statement","title":"Vision Statement","text":"<p>Transform loan applications from anxiety-inducing paperwork into an exciting, conversational journey toward achieving financial dreams through personalized AI specialists and revolutionary user experience design.</p>"},{"location":"user-guide/product/executive-summary-revolutionary-loan-experience/#strategic-opportunity","title":"Strategic Opportunity","text":""},{"location":"user-guide/product/executive-summary-revolutionary-loan-experience/#market-problem","title":"Market Problem","text":"<ul> <li>Industry Standard: 60-70% abandonment rates on traditional loan applications</li> <li>User Pain Points: 90+ minute form completion, 24-48 hour processing anxiety, impersonal experience</li> <li>Competitive Landscape: No major lender offers truly conversational, AI-specialist-driven experience</li> </ul>"},{"location":"user-guide/product/executive-summary-revolutionary-loan-experience/#our-solution","title":"Our Solution","text":"<p>The Loan Avengers Squad: Users interact with Alisha (UI Concierge) who coordinates a superhero team - Intake Agent \"Eagle Eye\" (Validator), Hawk-Income (Income), Scarlet Witch-Credit (Credit), Doctor Strange-Risk (Risk) - through natural conversation instead of forms, with &lt;3-minute processing and real-time progress visualization.</p>"},{"location":"user-guide/product/executive-summary-revolutionary-loan-experience/#business-case","title":"Business Case","text":""},{"location":"user-guide/product/executive-summary-revolutionary-loan-experience/#revenue-impact","title":"Revenue Impact","text":"<ul> <li>Current: 1000 monthly applications \u00d7 35% completion \u00d7 $500 revenue = $175K/month</li> <li>Projected: 1000 monthly applications \u00d7 85% completion \u00d7 $500 revenue = $425K/month</li> <li>Annual Revenue Increase: $3M (+143% improvement)</li> </ul>"},{"location":"user-guide/product/executive-summary-revolutionary-loan-experience/#investment-requirements","title":"Investment Requirements","text":"<ul> <li>Phase 1 (MVP): $1.28M over 16 weeks</li> <li>Phase 2 (Enhanced): $740K over 10 weeks</li> <li>Risk Mitigation: $470K additional investment</li> <li>Total Investment: $2.49M</li> </ul>"},{"location":"user-guide/product/executive-summary-revolutionary-loan-experience/#return-on-investment","title":"Return on Investment","text":"<ul> <li>Year 1 ROI: 36%</li> <li>Break-Even: Month 8.7</li> <li>Year 2+ ROI: 1567%</li> <li>Payback Period: 13 months</li> </ul>"},{"location":"user-guide/product/executive-summary-revolutionary-loan-experience/#competitive-advantage","title":"Competitive Advantage","text":""},{"location":"user-guide/product/executive-summary-revolutionary-loan-experience/#unique-value-proposition","title":"Unique Value Proposition","text":"<ol> <li>Only conversational loan platform with named AI specialists</li> <li>94% time reduction: 15 minutes vs 3+ hours traditional experience</li> <li>Emotional transformation: Anxiety \u2192 Excitement paradigm shift</li> <li>Mobile-first voice input with modern interaction patterns</li> </ol>"},{"location":"user-guide/product/executive-summary-revolutionary-loan-experience/#defensibility","title":"Defensibility","text":"<ul> <li>Patent protection for conversational loan innovations</li> <li>First-mover advantage in AI specialist lending</li> <li>Network effects through referral and social sharing</li> <li>Technical complexity creating high barrier to entry</li> </ul>"},{"location":"user-guide/product/executive-summary-revolutionary-loan-experience/#target-market","title":"Target Market","text":""},{"location":"user-guide/product/executive-summary-revolutionary-loan-experience/#primary-user-digital-first-borrower-ages-28-42","title":"Primary User: Digital-First Borrower (Ages 28-42)","text":"<ul> <li>Profile: Tech-savvy, mobile-first, expects seamless digital experiences</li> <li>Behavior: Hates forms, values transparency, comfortable with AI assistance</li> <li>Market Size: 40% of total loan market ($2.1B annually)</li> <li>Growth Rate: 15% annually as demographic preferences shift</li> </ul>"},{"location":"user-guide/product/executive-summary-revolutionary-loan-experience/#use-cases-priority-order","title":"Use Cases (Priority Order)","text":"<ol> <li>First-time homebuyers: Educational needs, confidence building</li> <li>Refinancing customers: Speed and efficiency focused</li> <li>Investment property: Complex needs requiring specialist guidance</li> </ol>"},{"location":"user-guide/product/executive-summary-revolutionary-loan-experience/#implementation-strategy","title":"Implementation Strategy","text":""},{"location":"user-guide/product/executive-summary-revolutionary-loan-experience/#phase-1-mvp-foundation-16-weeks","title":"Phase 1: MVP Foundation (16 weeks)","text":"<p>Core Features: - AI specialist personalities and conversational flow - Real-time processing visualization - Pre-configured data integration - Mobile-responsive interface</p> <p>Success Criteria: - 80%+ application completion rate - Sub-20 minute completion time - 70+ Net Promoter Score - 95%+ system uptime</p>"},{"location":"user-guide/product/executive-summary-revolutionary-loan-experience/#phase-2-enhanced-experience-10-weeks","title":"Phase 2: Enhanced Experience (10 weeks)","text":"<p>Advanced Features: - Voice input capabilities - Advanced progress animations - Social sharing and referral features - Performance optimization</p> <p>Success Criteria: - 90%+ completion rate - 40%+ voice input adoption - 15%+ referral rate - &lt;2 second page load times</p>"},{"location":"user-guide/product/executive-summary-revolutionary-loan-experience/#success-metrics-framework","title":"Success Metrics Framework","text":""},{"location":"user-guide/product/executive-summary-revolutionary-loan-experience/#north-star-metrics","title":"North Star Metrics","text":"<ol> <li>Loan Application Experience Score (LAES): Target 85/100 (vs industry 45-55)</li> <li>Conversion Velocity: Target &lt;15 minutes (vs industry 60-90 minutes + 24-48 hours)</li> </ol>"},{"location":"user-guide/product/executive-summary-revolutionary-loan-experience/#key-performance-indicators","title":"Key Performance Indicators","text":"<ul> <li>Application Completion Rate: 85% (vs industry 30-40%)</li> <li>User Satisfaction (NPS): 70+ (vs industry 20-30)</li> <li>Processing Speed: &lt;2 minutes (vs industry 24-48 hours)</li> <li>Customer Acquisition Cost: 25% reduction through improved conversion</li> </ul>"},{"location":"user-guide/product/executive-summary-revolutionary-loan-experience/#business-impact-tracking","title":"Business Impact Tracking","text":"<ul> <li>Monthly Revenue Growth: $250K increase</li> <li>Market Share Growth: Target 15% increase in target demographic</li> <li>Brand Differentiation: Industry recognition and awards</li> <li>Organic Growth: 15%+ referral rate from satisfied users</li> </ul>"},{"location":"user-guide/product/executive-summary-revolutionary-loan-experience/#risk-management","title":"Risk Management","text":""},{"location":"user-guide/product/executive-summary-revolutionary-loan-experience/#critical-risks-and-mitigation","title":"Critical Risks and Mitigation","text":"<ol> <li>User Adoption (60% probability): Progressive disclosure, hybrid mode options, trust building</li> <li>Technical Performance (15% probability): Robust infrastructure, graceful degradation, monitoring</li> <li>Regulatory Compliance (30% probability): Early legal consultation, compliance-by-design</li> <li>Competitive Response (70% probability): Patent protection, continuous innovation</li> </ol>"},{"location":"user-guide/product/executive-summary-revolutionary-loan-experience/#risk-mitigation-investment-470k-23-of-development-budget","title":"Risk Mitigation Investment: $470K (23% of development budget)","text":"<p>Success Probability Improvement: +25 percentage points (60% \u2192 85%)</p>"},{"location":"user-guide/product/executive-summary-revolutionary-loan-experience/#go-to-market-strategy","title":"Go-to-Market Strategy","text":""},{"location":"user-guide/product/executive-summary-revolutionary-loan-experience/#launch-approach","title":"Launch Approach","text":"<ol> <li>Beta Testing: 100 users, 4-week validation period</li> <li>Soft Launch: Limited market, 500 users/month</li> <li>Full Launch: National rollout with marketing campaign</li> <li>Scale Optimization: Performance and feature enhancement</li> </ol>"},{"location":"user-guide/product/executive-summary-revolutionary-loan-experience/#marketing-strategy","title":"Marketing Strategy","text":"<ul> <li>Educational Content: \"How AI Makes Lending Personal Again\"</li> <li>Influencer Partnerships: Financial advisor and real estate agent endorsements</li> <li>Social Proof: User success stories and celebrations</li> <li>Viral Mechanics: Built-in sharing and referral features</li> </ul>"},{"location":"user-guide/product/executive-summary-revolutionary-loan-experience/#success-timeline","title":"Success Timeline","text":"<ul> <li>Month 1-2: Beta validation and optimization</li> <li>Month 3-4: Soft launch and initial market feedback</li> <li>Month 5-6: Full marketing launch and scale preparation</li> <li>Month 7-12: Market leadership establishment and growth</li> </ul>"},{"location":"user-guide/product/executive-summary-revolutionary-loan-experience/#technology-foundation","title":"Technology Foundation","text":""},{"location":"user-guide/product/executive-summary-revolutionary-loan-experience/#current-assets","title":"Current Assets","text":"<ul> <li>Multi-agent loan processing system with 2-minute processing capability</li> <li>Real-time streaming infrastructure for progress updates</li> <li>Structured response models for agent communication</li> <li>Mobile-responsive web platform foundation</li> </ul>"},{"location":"user-guide/product/executive-summary-revolutionary-loan-experience/#required-development","title":"Required Development","text":"<ul> <li>Natural language processing for conversational interface</li> <li>AI specialist personality engine with distinct characters</li> <li>Real-time visualization system for progress tracking</li> <li>Advanced user experience framework for mobile-first design</li> </ul>"},{"location":"user-guide/product/executive-summary-revolutionary-loan-experience/#technical-risk-mitigation","title":"Technical Risk Mitigation","text":"<ul> <li>Cloud-native architecture with auto-scaling capabilities</li> <li>Circuit breaker patterns for external API resilience</li> <li>Comprehensive monitoring with proactive alerting</li> <li>Graceful degradation for system failure scenarios</li> </ul>"},{"location":"user-guide/product/executive-summary-revolutionary-loan-experience/#financial-projections","title":"Financial Projections","text":""},{"location":"user-guide/product/executive-summary-revolutionary-loan-experience/#year-1-financial-impact","title":"Year 1 Financial Impact","text":"<ul> <li>Revenue Increase: $3.0M</li> <li>Development Investment: $2.49M</li> <li>Operating Costs: $180K</li> <li>Net Impact: $330K positive</li> <li>ROI: 36%</li> </ul>"},{"location":"user-guide/product/executive-summary-revolutionary-loan-experience/#year-2-3-projections","title":"Year 2-3 Projections","text":"<ul> <li>Annual Revenue: $3.0M incremental (stable improvement)</li> <li>Operating Costs: $180K annually</li> <li>Net Annual Benefit: $2.82M</li> <li>Cumulative ROI: &gt;1000% by Year 3</li> </ul>"},{"location":"user-guide/product/executive-summary-revolutionary-loan-experience/#break-even-analysis","title":"Break-Even Analysis","text":"<ul> <li>Monthly Break-Even: $208K incremental revenue</li> <li>Achievement Timeline: Month 8.7</li> <li>Confidence Level: 85% with risk mitigation</li> </ul>"},{"location":"user-guide/product/executive-summary-revolutionary-loan-experience/#competitive-positioning","title":"Competitive Positioning","text":""},{"location":"user-guide/product/executive-summary-revolutionary-loan-experience/#market-leadership-strategy","title":"Market Leadership Strategy","text":"<ol> <li>Innovation Leadership: First-mover advantage in conversational lending</li> <li>User Experience Excellence: Industry-leading satisfaction scores</li> <li>Technology Differentiation: AI specialist approach vs generic chatbots</li> <li>Brand Recognition: Award-winning experience design</li> </ol>"},{"location":"user-guide/product/executive-summary-revolutionary-loan-experience/#sustainable-advantages","title":"Sustainable Advantages","text":"<ul> <li>Technical Complexity: Difficult for competitors to replicate quickly</li> <li>User Loyalty: High satisfaction creates switching costs</li> <li>Network Effects: Referral programs and social proof</li> <li>Patent Protection: Intellectual property moat</li> </ul>"},{"location":"user-guide/product/executive-summary-revolutionary-loan-experience/#executive-decision-framework","title":"Executive Decision Framework","text":""},{"location":"user-guide/product/executive-summary-revolutionary-loan-experience/#green-light-criteria-all-must-be-met","title":"Green Light Criteria (All Must Be Met)","text":"<ul> <li>\u2705 Market Opportunity: $2.1B addressable market with 15% growth</li> <li>\u2705 Technical Feasibility: 2-minute processing capability confirmed</li> <li>\u2705 Business Case: 36% Year 1 ROI with 8.7 month payback</li> <li>\u2705 Risk Management: 85% success probability with mitigation</li> <li>\u2705 Competitive Advantage: Clear differentiation and defensibility</li> </ul>"},{"location":"user-guide/product/executive-summary-revolutionary-loan-experience/#success-validation-gates","title":"Success Validation Gates","text":"<ul> <li>Month 2: Beta testing validates 70%+ completion rate improvement</li> <li>Month 6: Soft launch achieves 80%+ target metrics</li> <li>Month 12: Full launch demonstrates sustainable competitive advantage</li> <li>Month 18: Market leadership established with award recognition</li> </ul>"},{"location":"user-guide/product/executive-summary-revolutionary-loan-experience/#recommendation","title":"Recommendation","text":""},{"location":"user-guide/product/executive-summary-revolutionary-loan-experience/#strategic-imperative-proceed-with-full-investment","title":"Strategic Imperative: PROCEED WITH FULL INVESTMENT","text":"<p>Rationale: 1. Transformative Opportunity: Revolutionary user experience with clear competitive moat 2. Strong Business Case: 36% Year 1 ROI scaling to &gt;1000% by Year 3 3. Market Timing: First-mover advantage in emerging conversational AI lending 4. Risk Profile: Medium-high risk with strong mitigation strategies (85% success probability) 5. Strategic Alignment: Positions company as innovation leader in financial services</p>"},{"location":"user-guide/product/executive-summary-revolutionary-loan-experience/#immediate-next-steps-30-days","title":"Immediate Next Steps (30 Days)","text":"<ol> <li>Secure Budget Approval: $2.49M total investment authorization</li> <li>Assemble Core Team: 8.5 FTE development team hiring</li> <li>Initiate Legal Review: Regulatory compliance consultation</li> <li>Begin User Research: Target persona validation and testing</li> <li>Patent Filing: Intellectual property protection initiation</li> </ol>"},{"location":"user-guide/product/executive-summary-revolutionary-loan-experience/#success-commitment","title":"Success Commitment","text":"<p>With proper execution of this strategy, we will: - Transform loan applications from necessary evil to exciting milestone - Achieve industry-leading 85% completion rates and 70+ NPS scores - Generate $3M+ annual incremental revenue starting Year 1 - Establish market leadership in conversational financial services - Create sustainable competitive advantage through innovation and user loyalty</p> <p>Executive Approval Required: This revolutionary loan experience represents our opportunity to define the future of financial services and establish unassailable market leadership through superior user experience and technological innovation.</p> <p>Documents Referenced: - User Journey Mapping - Conversational Design Strategy - Feature Prioritization &amp; Roadmap - Success Metrics Framework - Risk Mitigation Strategy</p>"},{"location":"user-guide/product/feature-prioritization-roadmap/","title":"Feature Prioritization &amp; Implementation Roadmap","text":""},{"location":"user-guide/product/feature-prioritization-roadmap/#prioritization-framework-impact-vs-effort-matrix","title":"Prioritization Framework: Impact vs Effort Matrix","text":""},{"location":"user-guide/product/feature-prioritization-roadmap/#evaluation-criteria","title":"Evaluation Criteria","text":"<p>Impact Scoring (1-5 scale): - User Experience Improvement (0-20 points) - Business Revenue Impact (0-20 points) - Competitive Differentiation (0-20 points) - Market Expansion Potential (0-20 points) - Risk Mitigation Value (0-20 points)</p> <p>Effort Scoring (1-5 scale): - Development Complexity (1=Simple, 5=Very Complex) - Integration Requirements (1=Minimal, 5=Extensive) - Regulatory Compliance (1=Standard, 5=High Risk) - Timeline to MVP (1=&lt;4 weeks, 5=&gt;16 weeks)</p>"},{"location":"user-guide/product/feature-prioritization-roadmap/#feature-analysis-prioritization","title":"Feature Analysis &amp; Prioritization","text":""},{"location":"user-guide/product/feature-prioritization-roadmap/#must-have-features-mvp-phase-1","title":"MUST-HAVE Features (MVP - Phase 1)","text":""},{"location":"user-guide/product/feature-prioritization-roadmap/#1-ai-specialist-personalities-priority-1","title":"1. AI Specialist Personalities \u2b50 PRIORITY 1","text":"<p>Impact Score: 95/100 - User Experience: 20 (Core differentiation) - Revenue Impact: 20 (Conversion driver) - Competitive Advantage: 20 (Unique in market) - Market Expansion: 15 (Appeals to digital-first users) - Risk Mitigation: 20 (Reduces abandonment)</p> <p>Effort Score: 12/20 (Medium complexity) - Development: 3 (Personality templates and conversation flow) - Integration: 2 (Works with existing agent framework) - Compliance: 2 (Standard financial communications) - Timeline: 5 (8-10 weeks for full implementation)</p> <p>Business Rationale: Core product differentiation that enables all other conversational features. Without distinct AI personalities, the experience becomes generic chatbot interaction.</p> <p>User Story: \"As a loan applicant, I want to interact with named specialists who have expertise in specific areas, so I feel like I'm working with a real team rather than a faceless system.\"</p>"},{"location":"user-guide/product/feature-prioritization-roadmap/#2-conversational-loan-application-flow-priority-1","title":"2. Conversational Loan Application Flow \u2b50 PRIORITY 1","text":"<p>Impact Score: 90/100 - User Experience: 20 (Eliminates form friction) - Revenue Impact: 20 (Direct conversion impact) - Competitive Advantage: 18 (Few competitors doing this) - Market Expansion: 12 (Attracts form-averse users) - Risk Mitigation: 20 (Reduces primary abandonment cause)</p> <p>Effort Score: 15/20 (High complexity) - Development: 4 (NLP, conversation state management) - Integration: 4 (Complex data collection and validation) - Compliance: 3 (Must ensure regulatory compliance) - Timeline: 4 (10-12 weeks)</p> <p>Business Rationale: Primary value proposition delivery mechanism. Converts the core differentiator (no forms) into functional capability.</p>"},{"location":"user-guide/product/feature-prioritization-roadmap/#3-real-time-processing-visualization-priority-2","title":"3. Real-Time Processing Visualization \u2b50 PRIORITY 2","text":"<p>Impact Score: 85/100 - User Experience: 20 (Transparency reduces anxiety) - Revenue Impact: 18 (Keeps users engaged during processing) - Competitive Advantage: 17 (Visual differentiation) - Market Expansion: 10 (Appeals to transparency-seeking users) - Risk Mitigation: 20 (Prevents abandonment during wait)</p> <p>Effort Score: 10/20 (Medium complexity) - Development: 2 (Progress visualization components) - Integration: 3 (Real-time status from processing system) - Compliance: 2 (Standard processing transparency) - Timeline: 3 (6-8 weeks)</p> <p>Business Rationale: Critical for user retention during 2-minute processing window. Without visible progress, users may assume system failure.</p>"},{"location":"user-guide/product/feature-prioritization-roadmap/#4-pre-configured-data-integration-priority-2","title":"4. Pre-configured Data Integration \u2b50 PRIORITY 2","text":"<p>Impact Score: 80/100 - User Experience: 18 (Eliminates redundant data entry) - Revenue Impact: 16 (Reduces friction-based abandonment) - Competitive Advantage: 15 (Table stakes becoming) - Market Expansion: 11 (Efficiency appeals to busy users) - Risk Mitigation: 20 (Prevents data entry errors)</p> <p>Effort Score: 13/20 (Medium-high complexity) - Development: 3 (Data integration and validation) - Integration: 4 (Multiple data source connections) - Compliance: 3 (Privacy and security requirements) - Timeline: 3 (6-8 weeks)</p> <p>Business Rationale: Enables rapid loan processing and supports conversational flow. Essential for delivering on speed promises.</p>"},{"location":"user-guide/product/feature-prioritization-roadmap/#should-have-features-phase-2","title":"SHOULD-HAVE Features (Phase 2)","text":""},{"location":"user-guide/product/feature-prioritization-roadmap/#5-voice-input-capabilities","title":"5. Voice Input Capabilities","text":"<p>Impact Score: 75/100 - User Experience: 18 (Modern interaction paradigm) - Revenue Impact: 12 (Marginal conversion improvement) - Competitive Advantage: 20 (Highly differentiated) - Market Expansion: 15 (Appeals to mobile-first users) - Risk Mitigation: 10 (Alternative input method)</p> <p>Effort Score: 16/20 (High complexity) - Development: 4 (Voice recognition, NLP integration) - Integration: 3 (Audio processing infrastructure) - Compliance: 4 (Audio storage and transcription regulations) - Timeline: 5 (12-16 weeks)</p> <p>Business Rationale: Significant differentiation opportunity but high development cost. Prioritize after core conversational flow is proven.</p>"},{"location":"user-guide/product/feature-prioritization-roadmap/#6-advanced-progress-animations","title":"6. Advanced Progress Animations","text":"<p>Impact Score: 70/100 - User Experience: 17 (Enhanced engagement) - Revenue Impact: 10 (Marginal conversion impact) - Competitive Advantage: 18 (Visual differentiation) - Market Expansion: 10 (Appeals to experience-focused users) - Risk Mitigation: 15 (Improved user engagement)</p> <p>Effort Score: 8/20 (Low-medium complexity) - Development: 2 (Animation libraries and components) - Integration: 2 (Frontend enhancement only) - Compliance: 1 (No regulatory impact) - Timeline: 3 (4-6 weeks)</p> <p>Business Rationale: High visual impact with relatively low development effort. Good ROI for user experience enhancement.</p>"},{"location":"user-guide/product/feature-prioritization-roadmap/#7-social-sharing-celebration-features","title":"7. Social Sharing &amp; Celebration Features","text":"<p>Impact Score: 65/100 - User Experience: 15 (Positive emotional experience) - Revenue Impact: 15 (Referral generation) - Competitive Advantage: 12 (Moderate differentiation) - Market Expansion: 13 (Appeals to social media users) - Risk Mitigation: 10 (Brand awareness)</p> <p>Effort Score: 6/20 (Low complexity) - Development: 2 (Social sharing components) - Integration: 1 (Standard social media APIs) - Compliance: 2 (Financial privacy considerations) - Timeline: 1 (2-3 weeks)</p> <p>Business Rationale: Low effort, moderate impact feature that supports viral growth and user satisfaction.</p>"},{"location":"user-guide/product/feature-prioritization-roadmap/#could-have-features-phase-3","title":"COULD-HAVE Features (Phase 3+)","text":""},{"location":"user-guide/product/feature-prioritization-roadmap/#8-video-ai-specialist-avatars","title":"8. Video AI Specialist Avatars","text":"<p>Impact Score: 60/100 - User Experience: 18 (High engagement potential) - Revenue Impact: 8 (Minimal conversion impact) - Competitive Advantage: 20 (Highly unique) - Market Expansion: 9 (Appeals to video-first users) - Risk Mitigation: 5 (No significant risk mitigation)</p> <p>Effort Score: 20/20 (Very high complexity) - Development: 5 (AI avatars, video streaming) - Integration: 5 (Complex multimedia infrastructure) - Compliance: 5 (Video storage and AI representation regulations) - Timeline: 5 (16+ weeks)</p> <p>Business Rationale: High development cost with uncertain ROI. Prioritize only after core features prove successful.</p>"},{"location":"user-guide/product/feature-prioritization-roadmap/#9-advanced-personalization-engine","title":"9. Advanced Personalization Engine","text":"<p>Impact Score: 70/100 - User Experience: 16 (Tailored experience) - Revenue Impact: 18 (Improved conversion through relevance) - Competitive Advantage: 16 (Moderate differentiation) - Market Expansion: 10 (Appeals to personalization-seeking users) - Risk Mitigation: 10 (Better user targeting)</p> <p>Effort Score: 18/20 (Very high complexity) - Development: 5 (ML algorithms, behavior analysis) - Integration: 4 (Data pipeline and analytics infrastructure) - Compliance: 4 (Privacy and algorithmic fairness) - Timeline: 5 (16+ weeks)</p> <p>Business Rationale: Significant long-term value but requires substantial data and infrastructure investment.</p>"},{"location":"user-guide/product/feature-prioritization-roadmap/#implementation-phases","title":"Implementation Phases","text":""},{"location":"user-guide/product/feature-prioritization-roadmap/#phase-1-mvp-foundation-12-16-weeks","title":"Phase 1: MVP Foundation (12-16 weeks)","text":"<p>Goal: Deliver core conversational loan experience with AI specialists</p> <p>Sprint 1-2 (Weeks 1-4): Foundation - [ ] AI specialist personality framework - [ ] Basic conversation engine - [ ] User authentication and profile integration - [ ] Core data models and API design</p> <p>Sprint 3-4 (Weeks 5-8): Core Features - [ ] Conversational loan application flow - [ ] Pre-configured data integration - [ ] Basic progress visualization - [ ] Document upload and processing</p> <p>Sprint 5-6 (Weeks 9-12): Polish &amp; Integration - [ ] Real-time processing visualization - [ ] Error handling and edge cases - [ ] Mobile responsive design - [ ] Basic analytics and monitoring</p> <p>Sprint 7-8 (Weeks 13-16): Launch Preparation - [ ] User acceptance testing - [ ] Security and compliance review - [ ] Performance optimization - [ ] Launch infrastructure setup</p> <p>Success Criteria: - 80%+ application completion rate - Sub-20 minute average completion time - 70+ Net Promoter Score - 95%+ system uptime</p>"},{"location":"user-guide/product/feature-prioritization-roadmap/#phase-2-enhanced-experience-8-10-weeks","title":"Phase 2: Enhanced Experience (8-10 weeks)","text":"<p>Goal: Add advanced interaction capabilities and visual enhancements</p> <p>Sprint 9-10 (Weeks 17-20): Advanced Interactions - [ ] Voice input capabilities - [ ] Advanced progress animations - [ ] Enhanced error recovery - [ ] Conversation context improvement</p> <p>Sprint 11-12 (Weeks 21-24): Social &amp; Growth Features - [ ] Social sharing functionality - [ ] Referral tracking system - [ ] Enhanced celebration experiences - [ ] User feedback collection</p> <p>Sprint 13 (Weeks 25-26): Optimization - [ ] Performance enhancements - [ ] A/B testing framework - [ ] Advanced analytics - [ ] Conversion optimization</p> <p>Success Criteria: - 90%+ application completion rate - Voice input adoption &gt;40% - Referral rate &gt;15% - Page load time &lt;2 seconds</p>"},{"location":"user-guide/product/feature-prioritization-roadmap/#phase-3-growth-intelligence-ongoing","title":"Phase 3: Growth &amp; Intelligence (Ongoing)","text":"<p>Goal: Advanced personalization and market expansion features</p> <p>Ongoing Development: - [ ] Machine learning personalization - [ ] Advanced conversation AI - [ ] Additional loan products - [ ] Integration partnerships</p> <p>Success Criteria: - Market leadership in conversational lending - 50%+ market share growth - Industry recognition and awards - Expansion to additional financial products</p>"},{"location":"user-guide/product/feature-prioritization-roadmap/#resource-requirements","title":"Resource Requirements","text":""},{"location":"user-guide/product/feature-prioritization-roadmap/#phase-1-team-mvp","title":"Phase 1 Team (MVP)","text":"<ul> <li>Product Manager: 1 FTE (overall coordination)</li> <li>UX/UI Designer: 1 FTE (conversation design and interface)</li> <li>Frontend Developers: 2 FTE (React/TypeScript specialists)</li> <li>Backend Developers: 2 FTE (API and integration specialists)</li> <li>AI/NLP Engineer: 1 FTE (conversation engine and personality implementation)</li> <li>DevOps Engineer: 0.5 FTE (infrastructure and deployment)</li> <li>QA Engineer: 1 FTE (testing and quality assurance)</li> </ul> <p>Total Phase 1: 8.5 FTE for 16 weeks</p>"},{"location":"user-guide/product/feature-prioritization-roadmap/#phase-2-team-enhanced-features","title":"Phase 2 Team (Enhanced Features)","text":"<ul> <li>Maintain Core Team: 6 FTE (reduced as features mature)</li> <li>Mobile Specialist: 1 FTE (voice input and mobile optimization)</li> <li>Growth Engineer: 1 FTE (social features and analytics)</li> </ul> <p>Total Phase 2: 8 FTE for 10 weeks</p>"},{"location":"user-guide/product/feature-prioritization-roadmap/#budget-estimates","title":"Budget Estimates","text":"<p>Phase 1 (MVP): - Development Team: $1.2M (16 weeks \u00d7 8.5 FTE \u00d7 $9K/month) - Infrastructure &amp; Tools: $50K - Third-party Services: $30K - Total Phase 1: $1.28M</p> <p>Phase 2 (Enhanced): - Development Team: $720K (10 weeks \u00d7 8 FTE \u00d7 $9K/month) - Additional Infrastructure: $20K - Total Phase 2: $740K</p> <p>Total Investment: $2.02M for complete revolutionary loan experience</p>"},{"location":"user-guide/product/feature-prioritization-roadmap/#risk-mitigation-strategies","title":"Risk Mitigation Strategies","text":""},{"location":"user-guide/product/feature-prioritization-roadmap/#technical-risks","title":"Technical Risks","text":"<ul> <li>NLP accuracy: Build extensive testing suite with edge cases</li> <li>Real-time processing: Implement robust fallback mechanisms</li> <li>Scale handling: Cloud-native architecture with auto-scaling</li> </ul>"},{"location":"user-guide/product/feature-prioritization-roadmap/#user-adoption-risks","title":"User Adoption Risks","text":"<ul> <li>Paradigm shift resistance: Progressive disclosure and education</li> <li>Trust in AI specialists: Transparent explanation of AI capabilities</li> <li>Accessibility concerns: Comprehensive accessibility testing</li> </ul>"},{"location":"user-guide/product/feature-prioritization-roadmap/#business-risks","title":"Business Risks","text":"<ul> <li>Regulatory compliance: Early and ongoing compliance review</li> <li>Competitive response: Patent key innovations where possible</li> <li>ROI timeline: Phased rollout with early success measurement</li> </ul>"},{"location":"user-guide/product/feature-prioritization-roadmap/#mitigation-timeline","title":"Mitigation Timeline","text":"<ul> <li>Week 1: Risk assessment and mitigation plan approval</li> <li>Week 4: Compliance review initiation</li> <li>Week 8: User testing program launch</li> <li>Week 12: Performance and scale testing</li> <li>Week 16: Full risk assessment review</li> </ul> <p>Recommendation: Proceed with Phase 1 development focusing on core conversational experience. The revolutionary potential justifies the investment, with clear success metrics and risk mitigation strategies in place.</p>"},{"location":"user-guide/product/loan-experience-analysis/","title":"Revolutionary Loan Experience - Product Analysis &amp; Strategy","text":""},{"location":"user-guide/product/loan-experience-analysis/#product-manager-analysis","title":"Product Manager Analysis","text":"<p>Based on the vision for a revolutionary loan application experience, I'm conducting a comprehensive analysis to build the right product strategy.</p>"},{"location":"user-guide/product/loan-experience-analysis/#key-business-questions-need-clarification","title":"Key Business Questions (Need Clarification)","text":"<p>1. Target User Specifics: - Primary age range: 25-35 (first-time buyers) or 30-45 (refinancers)? - Financial sophistication: First-time borrowers or experienced real estate investors? - Primary use case priority: Purchase loans, refinances, or investment properties?</p> <p>2. Business Model Context: - Current conversion rates and abandonment points we're trying to improve? - Revenue impact expectations from improved experience? - Competitive pressure or market opportunity driving this initiative?</p> <p>3. Success Measurement Priority: - Primary goal: Conversion rate improvement, customer satisfaction, or speed? - Target improvements: What baseline are we trying to beat? - Timeline: When do we need to see ROI from this investment?</p>"},{"location":"user-guide/product/loan-experience-analysis/#product-opportunity-assessment","title":"Product Opportunity Assessment","text":"<p>Market Context: - Traditional lenders: 60-70% abandonment rates due to form fatigue - Fintech competitors: Focus on speed but still form-based approaches - User expectation shift: Mobile-first, conversational interfaces becoming standard</p> <p>Competitive Advantage Potential: 1. Unique Experience: Only conversational loan platform with named AI specialists 2. Technical Capability: 2-minute processing time vs industry 24-48 hours 3. Data Leverage: Pre-configured user profiles eliminate redundant entry 4. Emotional Transformation: Anxiety to excitement paradigm shift</p>"},{"location":"user-guide/product/loan-experience-analysis/#user-jobs-to-be-done-analysis","title":"User Jobs-to-be-Done Analysis","text":"<p>Primary Functional Job: \"When I need a loan, I want to understand my options and get approved quickly, so I can move forward with my financial goals.\"</p> <p>Emotional Jobs: - Reduce anxiety about complex financial processes - Feel confident about making the right financial decision - Experience progress toward life goals (homeownership, investment) - Feel valued as an individual, not just a credit score</p> <p>Social Jobs: - Share positive lending experience with friends/family - Demonstrate financial progress and decision-making capability - Recommend trusted financial service provider</p>"},{"location":"user-guide/product/loan-experience-analysis/#proposed-user-journey-framework","title":"Proposed User Journey Framework","text":"<p>Phase 1: Discovery &amp; Engagement - User learns about conversational loan experience - Meets their \"AI Dream Team\" (Hawk-Income, Scarlet Witch-Credit, Doctor Strange-Risk, Cap-ital America) - Initial curiosity and interest building</p> <p>Phase 2: Personalized Onboarding - AI team introductions with role explanations - Quick pre-qualification conversation - Data privacy and security transparency</p> <p>Phase 3: Conversational Application - Natural language loan building process - Real-time progress visualization - Intelligent follow-up questions - Document requests handled conversationally</p> <p>Phase 4: Processing &amp; Updates - 2-minute AI agent workflow execution - Real-time progress streaming - Transparent status updates - Educational content during processing</p> <p>Phase 5: Decision &amp; Next Steps - Personalized loan decision delivery - Clear explanation of terms and conditions - Celebration of approval or supportive guidance for alternatives - Seamless transition to closing process</p>"},{"location":"user-guide/product/loan-experience-analysis/#feature-prioritization-framework","title":"Feature Prioritization Framework","text":"<p>Must-Have (MVP): 1. Named AI specialist personalities and introductions 2. Conversational loan application flow 3. Real-time progress visualization 4. Pre-configured data integration 5. 2-minute processing with status updates</p> <p>Should-Have (V1.1): 1. Voice input capabilities 2. Advanced visual progress animations 3. Educational content integration 4. Social sharing features 5. Mobile-optimized experience</p> <p>Could-Have (Future): 1. Video AI specialist avatars 2. Advanced personalization algorithms 3. Integration with external financial accounts 4. AI-powered financial advice and planning 5. Referral program integration</p>"},{"location":"user-guide/product/loan-experience-analysis/#success-metrics-framework","title":"Success Metrics Framework","text":"<p>Primary Metrics (Business Impact): - Conversion Rate: Applications completed vs started - Time to Complete: Average application duration - User Satisfaction: Net Promoter Score (NPS) - Processing Speed: Time from submission to decision</p> <p>Secondary Metrics (User Experience): - Engagement Rate: Conversation depth and quality - Abandonment Points: Where users drop off - Feature Usage: Which AI specialists and features are used most - Error Resolution: How quickly issues are resolved</p> <p>Leading Indicators: - User session duration - Return visits before completion - Social sharing and referrals - Support ticket volume</p>"},{"location":"user-guide/product/loan-experience-analysis/#risk-assessment","title":"Risk Assessment","text":"<p>High-Risk Areas: 1. User adoption of new conversational paradigm 2. Regulatory compliance in conversational format 3. AI conversation quality and edge case handling 4. Data privacy concerns with personalization</p> <p>Mitigation Strategies: 1. Progressive disclosure and user education 2. Compliance review of all conversation flows 3. Extensive testing and fallback mechanisms 4. Transparent privacy controls and opt-out options</p>"},{"location":"user-guide/product/loan-experience-analysis/#implementation-roadmap-outline","title":"Implementation Roadmap Outline","text":"<p>Phase 1 (MVP - 12 weeks): - Core conversational flow development - AI specialist personality implementation - Basic progress visualization - Integration with existing loan processing system</p> <p>Phase 2 (Enhanced Experience - 8 weeks): - Advanced animations and visual storytelling - Voice input capabilities - Mobile optimization - Performance optimization</p> <p>Phase 3 (Growth Features - Ongoing): - Advanced personalization - Social features and sharing - Analytics and optimization - Expansion to additional loan products</p>"},{"location":"user-guide/product/loan-experience-analysis/#next-steps-required","title":"Next Steps Required","text":"<ol> <li>User Research Validation: Conduct interviews with target users to validate conversation approach</li> <li>Technical Feasibility Review: Confirm 2-minute processing integration capabilities</li> <li>Compliance Review: Ensure conversational format meets regulatory requirements</li> <li>Competitive Analysis: Deep dive into current market solutions and differentiation opportunities</li> <li>Business Case Development: ROI projections based on conversion improvement estimates</li> </ol>"},{"location":"user-guide/product/loan-experience-analysis/#questions-for-stakeholder-input","title":"Questions for Stakeholder Input","text":"<ol> <li>Target Market Priority: First-time homebuyers vs refinancing customers vs investment properties?</li> <li>Success Metric Priority: Conversion rates vs customer satisfaction vs processing speed?</li> <li>Investment Level: MVP budget and timeline expectations?</li> <li>Risk Tolerance: Comfort level with conversational AI approach in financial services?</li> <li>Integration Requirements: Existing systems that must be integrated or replaced?</li> </ol> <p>Recommendation: Proceed with user research and technical feasibility assessment before committing to full development. The opportunity is significant, but execution complexity requires careful validation.</p> <p>Next Action: Schedule user interviews and technical architecture review.</p>"},{"location":"user-guide/product/loan-experience-user-journey/","title":"Revolutionary Loan Experience - User Journey Map","text":""},{"location":"user-guide/product/loan-experience-user-journey/#user-persona-the-digital-first-borrower","title":"User Persona: The Digital-First Borrower","text":"<p>Who: Hawk-Income Chen, 31, Software Engineer, San Francisco - Income: $120K, tech-savvy, mobile-first user - Experience: First-time homebuyer, comfortable with AI assistants - Goal: Get approved for a mortgage to buy a condo - Context: Evenings/weekends, often multitasking, prefers voice/chat over forms - Pain Points: Hates paperwork, anxious about loan approval, wants transparency</p>"},{"location":"user-guide/product/loan-experience-user-journey/#current-state-journey-traditional-lender","title":"Current State Journey (Traditional Lender)","text":""},{"location":"user-guide/product/loan-experience-user-journey/#1-awareness-research-frustrated","title":"1. Awareness &amp; Research (Frustrated)","text":"<ul> <li>Action: Googles \"best mortgage rates\"</li> <li>Current Experience: Generic rate tables, no personalization</li> <li>Pain Points: Overwhelming options, unclear qualification criteria</li> <li>Emotion: Confused and overwhelmed</li> <li>Time: 2-3 hours of research</li> </ul>"},{"location":"user-guide/product/loan-experience-user-journey/#2-initial-contact-cautious","title":"2. Initial Contact (Cautious)","text":"<ul> <li>Action: Fills out basic info form for rate quote</li> <li>Current Experience: 20+ field form, immediate phone calls from multiple lenders</li> <li>Pain Points: Form fatigue, pushy sales calls, no immediate feedback</li> <li>Emotion: Annoyed and pressured</li> <li>Drop-off Risk: 35% abandon at this stage</li> </ul>"},{"location":"user-guide/product/loan-experience-user-journey/#3-application-process-anxious","title":"3. Application Process (Anxious)","text":"<ul> <li>Action: Starts full mortgage application</li> <li>Current Experience: 60-90 minute form, document upload requirements</li> <li>Pain Points: Complex terminology, unclear requirements, no progress indication</li> <li>Emotion: Stressed and uncertain</li> <li>Drop-off Risk: 45% abandon before completion</li> </ul>"},{"location":"user-guide/product/loan-experience-user-journey/#4-processing-limbo-worried","title":"4. Processing Limbo (Worried)","text":"<ul> <li>Action: Waits for approval decision</li> <li>Current Experience: \"We'll get back to you in 24-48 hours\"</li> <li>Pain Points: No visibility, anxiety about rejection</li> <li>Emotion: Helpless and worried</li> <li>Time: 1-2 days of uncertainty</li> </ul>"},{"location":"user-guide/product/loan-experience-user-journey/#5-decision-communication-relief-or-disappointment","title":"5. Decision Communication (Relief or Disappointment)","text":"<ul> <li>Action: Receives approval/rejection via email or phone call</li> <li>Current Experience: Generic approval letter or confusing rejection reasons</li> <li>Pain Points: Impersonal communication, unclear next steps</li> <li>Outcome: If rejected, starts over elsewhere</li> </ul>"},{"location":"user-guide/product/loan-experience-user-journey/#future-state-journey-revolutionary-experience","title":"Future State Journey (Revolutionary Experience)","text":""},{"location":"user-guide/product/loan-experience-user-journey/#1-discovery-engagement-curious","title":"1. Discovery &amp; Engagement (Curious)","text":"<ul> <li>Trigger: Sees ad \"Meet Your AI Loan Dream Team\"</li> <li>Action: Clicks to learn about conversational loan experience</li> <li>Experience:</li> <li>Landing page shows AI team: \"Meet Hawk-Income (Credit Expert), Scarlet Witch-Credit (Income Specialist), Doctor Strange-Risk (Risk Advisor), Cap-ital America (Loan Orchestrator)\"</li> <li>30-second video: \"No forms. No waiting. Just conversation.\"</li> <li>Social proof: \"95% of users complete their application in one session\"</li> <li>Emotion: Intrigued and excited</li> <li>Success Metric: 80% click-through to start process</li> </ul>"},{"location":"user-guide/product/loan-experience-user-journey/#2-ai-team-introduction-welcomed","title":"2. AI Team Introduction (Welcomed)","text":"<ul> <li>Action: Starts conversation with Cap-ital America (Orchestrator)</li> <li>Experience:</li> <li>Cap-ital America: \"Hi! I'm Cap-ital America, your personal loan orchestrator. I work with three amazing specialists to get you the perfect loan. What's your name?\"</li> <li>User: \"Hawk-Income\"</li> <li>Cap-ital America: \"Great to meet you, Hawk-Income! I'm going to connect you with my team. First, let me ask - are you looking to buy your first home, refinance, or invest in property?\"</li> <li>Innovation:</li> <li>Natural conversation vs form fields</li> <li>Personalization from first interaction</li> <li>Clear role explanation builds trust</li> <li>Emotion: Welcomed and understood</li> <li>Time: 30 seconds to feel connected</li> </ul>"},{"location":"user-guide/product/loan-experience-user-journey/#3-personalized-assessment-confident","title":"3. Personalized Assessment (Confident)","text":"<ul> <li>Action: Conversational loan qualification</li> <li>Experience:</li> <li>Hawk-Income (Credit): \"I'm Hawk-Income, your credit specialist! I can see from your profile you have excellent payment history. Based on your income and credit, you qualify for rates as low as 6.2%. Want to see what that means for your monthly payments?\"</li> <li>Scarlet Witch-Credit (Income): \"This is Scarlet Witch-Credit! I verified your employment - nice work at TechCorp! Your income is solid for the loan amount you're considering.\"</li> <li>Doctor Strange-Risk (Risk): \"Hey, I'm Doctor Strange-Risk! I've analyzed your financial profile and see zero red flags. You're in great shape for approval.\"</li> <li>Innovation:</li> <li>Pre-populated data eliminates re-entry</li> <li>Specialists explain their role and findings</li> <li>Positive reinforcement builds confidence</li> <li>Real-time rate and payment calculations</li> <li>Emotion: Confident and informed</li> <li>Time: 2-3 minutes for complete assessment</li> </ul>"},{"location":"user-guide/product/loan-experience-user-journey/#4-interactive-loan-building-excited","title":"4. Interactive Loan Building (Excited)","text":"<ul> <li>Action: Loan customization through conversation</li> <li>Experience:</li> <li>Cap-ital America: \"Let's build your perfect loan! I'm showing you three options:\"<ul> <li>\"30-year fixed at 6.2% = $1,847/month\"</li> <li>\"15-year fixed at 5.9% = $2,521/month\"</li> <li>\"ARM starting at 5.8% = $1,759/month\"</li> </ul> </li> <li>Visual: Animated cards showing loan options with key details</li> <li>Cap-ital America: \"Which payment fits your budget best?\"</li> <li>Interactive sliders: \"Want to see how a larger down payment changes things?\"</li> <li>Innovation:</li> <li>Visual loan building vs static forms</li> <li>Real-time payment calculations</li> <li>Interactive exploration of options</li> <li>Educational guidance throughout</li> <li>Emotion: Excited and empowered</li> <li>Time: 5-7 minutes to explore and choose</li> </ul>"},{"location":"user-guide/product/loan-experience-user-journey/#5-streamlined-documentation-efficient","title":"5. Streamlined Documentation (Efficient)","text":"<ul> <li>Action: Document verification and final details</li> <li>Experience:</li> <li>Cap-ital America: \"Perfect choice! I need three quick documents to finalize everything:\"</li> <li>Smart document requests: \"I can see your bank account from your profile. Just need to verify your last two pay stubs and we're set!\"</li> <li>Document upload: Drag &amp; drop or mobile photo capture</li> <li>Real-time processing: \"Got it! Hawk-Income is verifying your income now...\"</li> <li>Innovation:</li> <li>Minimal document requests using existing data</li> <li>Smart document recognition</li> <li>Real-time processing feedback</li> <li>Mobile-optimized upload experience</li> <li>Emotion: Efficient and professional</li> <li>Time: 3-4 minutes for document submission</li> </ul>"},{"location":"user-guide/product/loan-experience-user-journey/#6-real-time-processing-engaged","title":"6. Real-Time Processing (Engaged)","text":"<ul> <li>Action: Loan processing with live updates</li> <li>Experience:</li> <li>Animated progress cards showing each specialist working:<ul> <li>Hawk-Income: \"Credit analysis complete \u2713 (30 seconds)\"</li> <li>Scarlet Witch-Credit: \"Income verification done \u2713 (45 seconds)\"</li> <li>Doctor Strange-Risk: \"Risk assessment finished \u2713 (60 seconds)\"</li> <li>Cap-ital America: \"Final approval processing... \u2713 (90 seconds)\"</li> </ul> </li> <li>Educational content during wait: \"Did you know your credit score puts you in the top 15% of borrowers?\"</li> <li>Progress bar: \"Your loan is 75% approved...\"</li> <li>Innovation:</li> <li>Transparent multi-agent processing</li> <li>Educational content reduces perceived wait time</li> <li>Progress visualization creates anticipation</li> <li>Real-time status updates</li> <li>Emotion: Engaged and anticipatory</li> <li>Time: 2 minutes actual processing feels like 30 seconds</li> </ul>"},{"location":"user-guide/product/loan-experience-user-journey/#7-celebration-next-steps-triumphant","title":"7. Celebration &amp; Next Steps (Triumphant)","text":"<ul> <li>Action: Approval delivery and celebration</li> <li>Experience:</li> <li>Confetti animation and celebration music</li> <li>Cap-ital America: \"Congratulations! You're approved for $485,000 at 6.2%!\"</li> <li>Team congratulations from each specialist</li> <li>Immediate next steps: \"Your closing coordinator Maria will contact you within 24 hours\"</li> <li>Share moment: \"Want to share this exciting news?\"</li> <li>Action items: \"Here's what happens next...\" with clear timeline</li> <li>Innovation:</li> <li>Celebration moment vs boring approval email</li> <li>Team congratulations create personal connection</li> <li>Immediate next steps reduce post-approval anxiety</li> <li>Social sharing opportunity</li> <li>Clear expectations for next phase</li> <li>Emotion: Triumphant and excited</li> <li>Time: 2-3 minutes to celebrate and understand next steps</li> </ul>"},{"location":"user-guide/product/loan-experience-user-journey/#journey-comparison-metrics","title":"Journey Comparison Metrics","text":"Stage Traditional Time Revolutionary Time Emotion Change Research 2-3 hours 30 seconds Confused \u2192 Curious Initial Contact 20+ minutes 30 seconds Pressured \u2192 Welcomed Application 60-90 minutes 5-7 minutes Stressed \u2192 Excited Processing 24-48 hours 2 minutes Worried \u2192 Engaged Decision Impersonal Celebration Relief \u2192 Triumphant <p>Total Time Reduction: 3+ hours \u2192 12 minutes (94% reduction) Emotional Transformation: Anxiety-driven \u2192 Excitement-driven</p>"},{"location":"user-guide/product/loan-experience-user-journey/#key-ux-innovations","title":"Key UX Innovations","text":""},{"location":"user-guide/product/loan-experience-user-journey/#1-conversational-interface-design","title":"1. Conversational Interface Design","text":"<ul> <li>Natural Language Processing: Users speak/type naturally, no form fields</li> <li>Contextual Follow-ups: AI asks intelligent follow-up questions</li> <li>Progressive Disclosure: Information revealed as needed, not all at once</li> </ul>"},{"location":"user-guide/product/loan-experience-user-journey/#2-visual-progress-system","title":"2. Visual Progress System","text":"<ul> <li>Animated Progress Cards: Each specialist shows their work visually</li> <li>Real-time Updates: Live streaming of processing status</li> <li>Achievement Milestones: Celebrate completion of each stage</li> </ul>"},{"location":"user-guide/product/loan-experience-user-journey/#3-personalization-at-scale","title":"3. Personalization at Scale","text":"<ul> <li>Named AI Specialists: Each has distinct personality and expertise</li> <li>Data Integration: Pre-populate known information</li> <li>Adaptive Conversations: Flow changes based on user responses</li> </ul>"},{"location":"user-guide/product/loan-experience-user-journey/#4-emotional-design","title":"4. Emotional Design","text":"<ul> <li>Anxiety Reduction: Transparent process vs black box</li> <li>Confidence Building: Positive reinforcement throughout</li> <li>Celebration Moments: Turn approval into achievement</li> </ul>"},{"location":"user-guide/product/loan-experience-user-journey/#accessibility-considerations","title":"Accessibility Considerations","text":""},{"location":"user-guide/product/loan-experience-user-journey/#screen-reader-support","title":"Screen Reader Support","text":"<ul> <li>All AI conversation content properly labeled</li> <li>Progress indicators announced to screen readers</li> <li>Document upload with alternative text descriptions</li> </ul>"},{"location":"user-guide/product/loan-experience-user-journey/#keyboard-navigation","title":"Keyboard Navigation","text":"<ul> <li>Full conversational flow accessible via keyboard</li> <li>Skip links for power users</li> <li>Clear focus indicators throughout</li> </ul>"},{"location":"user-guide/product/loan-experience-user-journey/#visual-accessibility","title":"Visual Accessibility","text":"<ul> <li>High contrast mode for all interface elements</li> <li>Text scaling support up to 200%</li> <li>Color-blind friendly progress indicators</li> <li>Alternative formats for visual progress cards</li> </ul>"},{"location":"user-guide/product/loan-experience-user-journey/#cognitive-accessibility","title":"Cognitive Accessibility","text":"<ul> <li>Simple, clear language throughout conversations</li> <li>Option to repeat or clarify any AI response</li> <li>Progress saving and resume functionality</li> <li>Help context available at every step</li> </ul>"},{"location":"user-guide/product/loan-experience-user-journey/#mobile-first-design","title":"Mobile-First Design","text":""},{"location":"user-guide/product/loan-experience-user-journey/#voice-input-integration","title":"Voice Input Integration","text":"<ul> <li>Voice-to-text for all conversation inputs</li> <li>Voice confirmation of key decisions</li> <li>Background noise handling for mobile environments</li> </ul>"},{"location":"user-guide/product/loan-experience-user-journey/#touch-optimization","title":"Touch Optimization","text":"<ul> <li>Large touch targets for document upload</li> <li>Swipe gestures for progress navigation</li> <li>Haptic feedback for completion milestones</li> </ul>"},{"location":"user-guide/product/loan-experience-user-journey/#performance-optimization","title":"Performance Optimization","text":"<ul> <li>Progressive loading of conversation elements</li> <li>Offline mode for document preparation</li> <li>Bandwidth-aware streaming of progress updates</li> </ul>"},{"location":"user-guide/product/loan-experience-user-journey/#implementation-priorities","title":"Implementation Priorities","text":""},{"location":"user-guide/product/loan-experience-user-journey/#phase-1-core-conversation-flow","title":"Phase 1: Core Conversation Flow","text":"<ol> <li>AI specialist personality implementation</li> <li>Basic conversational loan application</li> <li>Real-time progress visualization</li> <li>Document upload and processing</li> </ol>"},{"location":"user-guide/product/loan-experience-user-journey/#phase-2-enhanced-experience","title":"Phase 2: Enhanced Experience","text":"<ol> <li>Voice input capabilities</li> <li>Advanced animations and celebrations</li> <li>Social sharing functionality</li> <li>Mobile optimization</li> </ol>"},{"location":"user-guide/product/loan-experience-user-journey/#phase-3-advanced-features","title":"Phase 3: Advanced Features","text":"<ol> <li>Video AI specialist avatars</li> <li>Advanced personalization algorithms</li> <li>Predictive conversation flows</li> <li>Integration with external financial accounts</li> </ol>"},{"location":"user-guide/product/loan-experience-user-journey/#success-metrics","title":"Success Metrics","text":""},{"location":"user-guide/product/loan-experience-user-journey/#user-experience-kpis","title":"User Experience KPIs","text":"<ul> <li>Application Completion Rate: Target 85% (vs industry 30-40%)</li> <li>Time to Complete: Target sub-15 minutes (vs industry 60-90 minutes)</li> <li>User Satisfaction (NPS): Target 70+ (vs industry 20-30)</li> <li>Emotional Response: Measure excitement vs anxiety through sentiment analysis</li> </ul>"},{"location":"user-guide/product/loan-experience-user-journey/#business-impact-kpis","title":"Business Impact KPIs","text":"<ul> <li>Conversion Rate: Applications to approvals</li> <li>Cost per Acquisition: Reduced through better experience</li> <li>Referral Rate: Organic growth through word-of-mouth</li> <li>Brand Differentiation: Market share growth</li> </ul> <p>Next Steps: 1. User testing with conversational prototypes 2. Technical feasibility review for 2-minute processing 3. Regulatory compliance review for conversational format 4. A/B testing framework development</p>"},{"location":"user-guide/product/revolutionary-loan-experience-strategy/","title":"Revolutionary Loan Experience - Product Strategy","text":""},{"location":"user-guide/product/revolutionary-loan-experience-strategy/#executive-summary","title":"Executive Summary","text":"<p>Vision: Transform loan applications from anxiety-inducing paperwork into an exciting, conversational journey toward achieving financial goals.</p> <p>Mission: Create a personalized AI-driven loan experience that eliminates forms, reduces processing anxiety, and builds user excitement through intelligent conversation and visual storytelling.</p> <p>Target: Digital-native users (25-45) seeking seamless financial experiences who expect modern, mobile-first interactions.</p>"},{"location":"user-guide/product/revolutionary-loan-experience-strategy/#user-context-analysis","title":"User Context Analysis","text":""},{"location":"user-guide/product/revolutionary-loan-experience-strategy/#primary-user-persona-the-digital-first-borrower","title":"Primary User Persona: \"The Digital-First Borrower\"","text":"<ul> <li>Age: 28-42 (Millennials/Elder Gen Z)</li> <li>Behavior: Mobile-first, voice-assistant users, expects instant responses</li> <li>Financial sophistication: Mixed (first-time homebuyers to experienced refinancers)</li> <li>Current pain points:</li> <li>Form fatigue (average 45-90 minutes for traditional applications)</li> <li>Anxiety from lack of transparency (\"black box\" decisions)</li> <li>Document hunting and uploading friction</li> <li>Impersonal, transactional experience</li> </ul>"},{"location":"user-guide/product/revolutionary-loan-experience-strategy/#jobs-to-be-done-framework","title":"Jobs-to-be-Done Framework","text":"<p>Primary Job: \"When I need a loan, I want to understand my options and get approved quickly, so I can move forward with my life goals confidently.\"</p> <p>Emotional Jobs: - Feel confident about financial decisions - Reduce anxiety about approval uncertainty - Experience progress toward dreams (homeownership, etc.) - Feel respected as an individual, not just a credit score</p> <p>Functional Jobs: - Get accurate pre-qualification quickly - Understand loan terms in plain language - Track application progress transparently - Submit required information efficiently</p>"},{"location":"user-guide/product/revolutionary-loan-experience-strategy/#business-value-proposition","title":"Business Value Proposition","text":""},{"location":"user-guide/product/revolutionary-loan-experience-strategy/#competitive-advantage","title":"Competitive Advantage","text":"<ol> <li>Experience Differentiation: Only conversational loan platform with named AI specialists</li> <li>Speed: 2-minute processing vs 24-48 hour traditional timelines</li> <li>Conversion: Reduce abandonment from 60-70% to target 15-20%</li> <li>Customer Satisfaction: Transform anxiety into excitement</li> <li>Data Leverage: Use existing profiles to eliminate redundant data entry</li> </ol>"},{"location":"user-guide/product/revolutionary-loan-experience-strategy/#market-positioning","title":"Market Positioning","text":"<ul> <li>Against Traditional Lenders: \"The future of lending is here - no more forms\"</li> <li>Against Fintech Competitors: \"Not just faster, but actually enjoyable\"</li> <li>Value Proposition: \"Your AI Dream Team makes lending personal again\"</li> </ul>"},{"location":"user-guide/product/revolutionary-loan-experience-strategy/#revenue-impact-model","title":"Revenue Impact Model","text":"<ul> <li>Conversion Improvement: 50% reduction in abandonment = 2x application completions</li> <li>Customer Acquisition Cost: Lower CAC through word-of-mouth and social sharing</li> <li>Lifetime Value: Higher satisfaction \u2192 increased loyalty and referrals</li> <li>Premium Pricing: Superior experience justifies competitive rates</li> </ul>"},{"location":"user-guide/product/revolutionary-loan-experience-strategy/#product-strategy-framework","title":"Product Strategy Framework","text":""},{"location":"user-guide/product/revolutionary-loan-experience-strategy/#core-principles","title":"Core Principles","text":"<ol> <li>Conversation Over Forms: Natural language interaction eliminates traditional form friction</li> <li>Personalization at Scale: Named AI specialists create personal connection</li> <li>Transparency Breeds Trust: Real-time progress and clear communication</li> <li>Mobile-First Voice: Modern interaction patterns for digital natives</li> <li>Excitement Over Anxiety: Reframe lending from necessary evil to exciting step</li> </ol>"},{"location":"user-guide/product/revolutionary-loan-experience-strategy/#strategic-pillars","title":"Strategic Pillars","text":""},{"location":"user-guide/product/revolutionary-loan-experience-strategy/#1-conversational-intelligence","title":"1. Conversational Intelligence","text":"<ul> <li>Named AI specialists with distinct personalities</li> <li>Natural language processing with intelligent follow-ups</li> <li>Context-aware conversations that remember user preferences</li> <li>Proactive guidance and education</li> </ul>"},{"location":"user-guide/product/revolutionary-loan-experience-strategy/#2-visual-progress-experience","title":"2. Visual Progress Experience","text":"<ul> <li>Animated loan building with progress cards</li> <li>Real-time status updates during 2-minute processing</li> <li>Achievement milestones and celebration moments</li> <li>Clear next steps and expectations</li> </ul>"},{"location":"user-guide/product/revolutionary-loan-experience-strategy/#3-data-driven-personalization","title":"3. Data-Driven Personalization","text":"<ul> <li>Leverage existing user profiles and financial data</li> <li>Pre-populate known information to reduce friction</li> <li>Personalized loan options based on user context</li> <li>Adaptive conversation flow based on user responses</li> </ul>"},{"location":"user-guide/product/revolutionary-loan-experience-strategy/#4-emotional-design","title":"4. Emotional Design","text":"<ul> <li>Transform anxiety into excitement through design</li> <li>Celebration of progress and achievements</li> <li>Empathetic language and supportive guidance</li> <li>Social proof and success stories integration</li> </ul>"},{"location":"user-guide/product/revolutionary-loan-experience-strategy/#target-user-scenarios","title":"Target User Scenarios","text":""},{"location":"user-guide/product/revolutionary-loan-experience-strategy/#scenario-1-first-time-homebuyer","title":"Scenario 1: First-Time Homebuyer","text":"<p>User: Hawk-Income, 29, software engineer, renting, $85K income Journey: Discovery \u2192 Pre-qualification \u2192 Application \u2192 Approval Key Needs: Education, confidence building, clear next steps Success Criteria: Completes application in one session, refers friends</p>"},{"location":"user-guide/product/revolutionary-loan-experience-strategy/#scenario-2-refinancing-expert","title":"Scenario 2: Refinancing Expert","text":"<p>User: Scarlet Witch-Credit, 38, business owner, current mortgage holder Journey: Rate comparison \u2192 Quick application \u2192 Fast approval Key Needs: Efficiency, rate transparency, minimal documentation Success Criteria: Sub-10 minute application, immediate rate comparison</p>"},{"location":"user-guide/product/revolutionary-loan-experience-strategy/#scenario-3-investment-property","title":"Scenario 3: Investment Property","text":"<p>User: Doctor Strange-Risk, 34, real estate investor, portfolio owner Journey: Property analysis \u2192 Investment loan \u2192 Portfolio integration Key Needs: Investment-specific guidance, portfolio view, tax implications Success Criteria: Complex loan approved with investment guidance</p>"},{"location":"user-guide/product/revolutionary-loan-experience-strategy/#next-steps","title":"Next Steps","text":"<p>This strategy document requires input on specific user context questions (see questions in original request) to complete:</p> <ol> <li>User Demographics: Specific age range and financial sophistication level</li> <li>Primary Use Cases: Home purchase vs refinance vs investment focus</li> <li>Success Metrics Priority: Conversion vs satisfaction vs speed</li> <li>Market Positioning: Traditional lender disruption vs new market creation</li> <li>Business Model: Volume increase expectations and pricing strategy</li> </ol> <p>Once these are clarified, we'll complete: - Detailed user journey mapping - Conversational script examples - Feature prioritization matrix - Success metrics and KPIs - Implementation roadmap - Risk mitigation strategies</p> <p>Document Status: Draft - Awaiting user context clarification Next Action: Product Manager consultation for user journey development</p>"},{"location":"user-guide/product/risk-mitigation-strategy/","title":"Risk Mitigation Strategy - Revolutionary Loan Experience","text":""},{"location":"user-guide/product/risk-mitigation-strategy/#executive-risk-overview","title":"Executive Risk Overview","text":"<p>The revolutionary loan experience represents a significant paradigm shift in financial services. While the potential returns are substantial, we must proactively address adoption, technical, regulatory, and business risks to ensure successful market introduction.</p> <p>Overall Risk Profile: Medium-High (due to innovation scope) Mitigation Investment: $200K additional budget (10% of development cost) Success Probability with Mitigation: 85% (vs 60% without)</p>"},{"location":"user-guide/product/risk-mitigation-strategy/#critical-risk-categories","title":"Critical Risk Categories","text":""},{"location":"user-guide/product/risk-mitigation-strategy/#1-user-adoption-risks-high-priority","title":"1. USER ADOPTION RISKS (HIGH PRIORITY)","text":""},{"location":"user-guide/product/risk-mitigation-strategy/#risk-1a-paradigm-shift-resistance","title":"Risk 1A: Paradigm Shift Resistance","text":"<p>Probability: 60% of users initially hesitant Impact: 30-50% reduction in target completion rates Root Cause: Users expect traditional forms and may distrust conversational AI for financial decisions</p> <p>Mitigation Strategy: - Progressive Disclosure Approach: Start with familiar elements, gradually introduce conversational features - Hybrid Mode Option: Offer traditional form backup for users who prefer it - Trust Building Sequence:   - Week 1: Show both form and conversation options (A/B test)   - Week 3: Default to conversation with \"switch to form\" option   - Week 6: Full conversational experience with emergency form fallback</p> <p>Implementation: - [ ] Build dual-mode interface capability - [ ] Create user education sequence and onboarding - [ ] Implement fallback mechanisms - [ ] Design trust indicators (security badges, testimonials)</p> <p>Success Metrics: - Conversation mode adoption: Target 70% by month 3 - User satisfaction with new paradigm: Target 4.2/5 - Form fallback usage: Target &lt;15% by month 6</p> <p>Investment: $50K development, $15K user research</p>"},{"location":"user-guide/product/risk-mitigation-strategy/#risk-1b-ai-trust-and-transparency-concerns","title":"Risk 1B: AI Trust and Transparency Concerns","text":"<p>Probability: 45% of users express AI concerns Impact: 20-30% completion rate reduction Root Cause: Financial decisions feel too important for AI, \"black box\" concerns</p> <p>Mitigation Strategy: - AI Explainability: Show AI reasoning and data sources - Human Backup Options: Clear escalation paths to human specialists - Transparency Dashboard:   - \"How we made this decision\" explanations   - Data sources used in assessment   - Human review checkpoints</p> <p>Implementation: - [ ] Build AI decision explanation engine - [ ] Create human escalation workflow - [ ] Design transparency interface components - [ ] Establish AI audit trail capabilities</p> <p>Success Metrics: - User comfort with AI decisions: Target 4.0/5 - Human escalation requests: Target &lt;10% - AI explanation usage: Monitor for engagement</p> <p>Investment: $30K development, $10K compliance review</p>"},{"location":"user-guide/product/risk-mitigation-strategy/#risk-1c-accessibility-and-inclusion-barriers","title":"Risk 1C: Accessibility and Inclusion Barriers","text":"<p>Probability: 25% of users face accessibility challenges Impact: Legal liability, reduced market reach Root Cause: Conversational interfaces can be challenging for users with disabilities</p> <p>Mitigation Strategy: - Universal Design Principles: Build accessibility from ground up - Multiple Interaction Modes:   - Screen reader optimization   - Keyboard navigation   - High contrast modes   - Text scaling support - Comprehensive Testing: Disability user testing throughout development</p> <p>Implementation: - [ ] Conduct accessibility audit with external experts - [ ] Implement WCAG 2.1 AA compliance - [ ] User testing with disabled users - [ ] Alternative format options (large print, audio)</p> <p>Success Metrics: - WCAG 2.1 AA compliance: Target 100% - Accessibility user satisfaction: Target 4.0/5 - Alternative format usage: Monitor adoption</p> <p>Investment: $25K accessibility development, $15K expert consultation</p>"},{"location":"user-guide/product/risk-mitigation-strategy/#2-technical-risks-medium-high-priority","title":"2. TECHNICAL RISKS (MEDIUM-HIGH PRIORITY)","text":""},{"location":"user-guide/product/risk-mitigation-strategy/#risk-2a-natural-language-processing-accuracy","title":"Risk 2A: Natural Language Processing Accuracy","text":"<p>Probability: 15-20% conversation failures Impact: User frustration, abandoned applications Root Cause: Financial terminology complexity, user input variety</p> <p>Mitigation Strategy: - Comprehensive NLP Training:   - Financial domain-specific training data   - Edge case scenario development   - Continuous learning from user interactions - Graceful Degradation:   - Human handoff triggers   - Clarification request protocols   - Context preservation during errors</p> <p>Implementation: - [ ] Build extensive financial terminology training dataset - [ ] Implement confidence scoring and fallback triggers - [ ] Create human handoff protocols - [ ] Develop error recovery conversation flows</p> <p>Success Metrics: - Intent recognition accuracy: Target 95% - Conversation completion rate: Target 90% - Human handoff rate: Target &lt;5%</p> <p>Investment: $40K NLP development, $20K training data</p>"},{"location":"user-guide/product/risk-mitigation-strategy/#risk-2b-real-time-processing-system-failures","title":"Risk 2B: Real-Time Processing System Failures","text":"<p>Probability: 5-10% system overload scenarios Impact: User experience degradation, completion drop-off Root Cause: Multi-agent processing complexity, external API dependencies</p> <p>Mitigation Strategy: - Robust Infrastructure Design:   - Auto-scaling cloud architecture   - Circuit breakers for external APIs   - Graceful degradation modes - Performance Monitoring:   - Real-time system health dashboards   - Proactive alert systems   - Automated recovery protocols</p> <p>Implementation: - [ ] Build cloud-native, auto-scaling infrastructure - [ ] Implement circuit breaker patterns - [ ] Create system health monitoring - [ ] Design graceful degradation workflows</p> <p>Success Metrics: - System uptime: Target 99.9% - Processing time consistency: Target &lt;2 minutes 95% of time - API failure recovery: Target &lt;30 seconds</p> <p>Investment: $35K infrastructure, $10K monitoring tools</p>"},{"location":"user-guide/product/risk-mitigation-strategy/#risk-2c-data-integration-and-accuracy-issues","title":"Risk 2C: Data Integration and Accuracy Issues","text":"<p>Probability: 10-15% data synchronization problems Impact: User trust loss, regulatory compliance issues Root Cause: Multiple data source integration complexity</p> <p>Mitigation Strategy: - Data Validation Framework:   - Multi-source verification   - Real-time accuracy checking   - User confirmation protocols - Error Handling:   - Clear error communication   - Manual correction options   - Audit trail maintenance</p> <p>Implementation: - [ ] Build data validation and verification system - [ ] Create user confirmation workflows - [ ] Implement comprehensive audit logging - [ ] Design manual correction interfaces</p> <p>Success Metrics: - Data accuracy rate: Target 99.5% - User correction frequency: Monitor and minimize - Audit trail completeness: Target 100%</p> <p>Investment: $30K development, $5K compliance tools</p>"},{"location":"user-guide/product/risk-mitigation-strategy/#3-regulatory-and-compliance-risks-high-priority","title":"3. REGULATORY AND COMPLIANCE RISKS (HIGH PRIORITY)","text":""},{"location":"user-guide/product/risk-mitigation-strategy/#risk-3a-financial-services-regulatory-compliance","title":"Risk 3A: Financial Services Regulatory Compliance","text":"<p>Probability: 30% chance of compliance gaps Impact: Launch delays, legal liability, regulatory penalties Root Cause: Conversational format may not align with traditional compliance requirements</p> <p>Mitigation Strategy: - Early Compliance Integration:   - Legal review at every development milestone   - Regulatory body consultation   - Compliance-by-design approach - Documentation and Audit:   - Complete conversation logging   - Decision audit trails   - Regulatory reporting capabilities</p> <p>Implementation: - [ ] Engage financial services compliance attorney - [ ] Conduct regulatory body consultation - [ ] Build comprehensive audit and logging system - [ ] Create compliance reporting dashboard</p> <p>Success Metrics: - Regulatory approval: Target 100% compliance - Audit trail completeness: Target 100% - Compliance review pass rate: Target 100%</p> <p>Investment: $60K legal consultation, $40K compliance development</p>"},{"location":"user-guide/product/risk-mitigation-strategy/#risk-3b-data-privacy-and-security-concerns","title":"Risk 3B: Data Privacy and Security Concerns","text":"<p>Probability: 20% chance of privacy incidents Impact: Legal liability, user trust loss, regulatory penalties Root Cause: Conversational data collection and AI processing complexity</p> <p>Mitigation Strategy: - Privacy-by-Design:   - Minimal data collection principles   - End-to-end encryption   - User control over data usage - Security Framework:   - Regular security audits   - Penetration testing   - Incident response protocols</p> <p>Implementation: - [ ] Implement comprehensive encryption - [ ] Conduct third-party security audit - [ ] Build user privacy controls - [ ] Create incident response procedures</p> <p>Success Metrics: - Security audit pass rate: Target 100% - Privacy incidents: Target 0 - User privacy satisfaction: Target 4.5/5</p> <p>Investment: $50K security audit, $30K privacy development</p>"},{"location":"user-guide/product/risk-mitigation-strategy/#4-business-and-market-risks-medium-priority","title":"4. BUSINESS AND MARKET RISKS (MEDIUM PRIORITY)","text":""},{"location":"user-guide/product/risk-mitigation-strategy/#risk-4a-competitive-response-and-market-dynamics","title":"Risk 4A: Competitive Response and Market Dynamics","text":"<p>Probability: 70% chance competitors copy features within 12 months Impact: Reduced differentiation, pricing pressure Root Cause: Success will attract rapid competitive imitation</p> <p>Mitigation Strategy: - Intellectual Property Protection:   - Patent key innovations where possible   - Trade secret protection for algorithms   - First-mover advantage maximization - Continuous Innovation:   - Advanced feature pipeline   - User experience refinement   - Technology leadership maintenance</p> <p>Implementation: - [ ] File patents for core conversational loan innovations - [ ] Develop advanced feature roadmap - [ ] Build continuous user feedback loops - [ ] Create innovation partnerships</p> <p>Success Metrics: - Patent portfolio development: Target 3-5 patents - Feature differentiation maintenance: Monitor competitor gap - User loyalty metrics: Target 90% retention</p> <p>Investment: $40K patent development, $20K competitive intelligence</p>"},{"location":"user-guide/product/risk-mitigation-strategy/#risk-4b-user-acquisition-and-marketing-challenges","title":"Risk 4B: User Acquisition and Marketing Challenges","text":"<p>Probability: 40% chance of slower than expected adoption Impact: Extended payback period, reduced ROI Root Cause: Educational marketing required for new paradigm</p> <p>Mitigation Strategy: - Educational Marketing Approach:   - Demonstration videos and tutorials   - Influencer partnerships and testimonials   - Free trial or preview experiences - Viral Growth Mechanisms:   - Social sharing features   - Referral incentive programs   - Word-of-mouth optimization</p> <p>Implementation: - [ ] Create educational content and demo videos - [ ] Build influencer partnership program - [ ] Implement viral sharing features - [ ] Design referral tracking and incentives</p> <p>Success Metrics: - Cost of customer acquisition: Target 25% reduction - Viral coefficient: Target 1.2x - Brand awareness in target market: Target 40% by year 1</p> <p>Investment: $60K marketing content, $30K influencer partnerships</p>"},{"location":"user-guide/product/risk-mitigation-strategy/#risk-monitoring-and-response-framework","title":"Risk Monitoring and Response Framework","text":""},{"location":"user-guide/product/risk-mitigation-strategy/#early-warning-system","title":"Early Warning System","text":""},{"location":"user-guide/product/risk-mitigation-strategy/#week-1-4-foundation-monitoring","title":"Week 1-4: Foundation Monitoring","text":"<ul> <li>User Research Feedback: Weekly user testing sessions</li> <li>Technical Performance: Daily system health monitoring</li> <li>Compliance Review: Bi-weekly legal consultation</li> <li>Competitive Intelligence: Monthly market analysis</li> </ul>"},{"location":"user-guide/product/risk-mitigation-strategy/#week-5-12-development-monitoring","title":"Week 5-12: Development Monitoring","text":"<ul> <li>Feature Adoption: Weekly usage analytics review</li> <li>Error Rate Tracking: Daily conversation failure analysis</li> <li>Security Assessment: Monthly security audit updates</li> <li>Regulatory Compliance: Ongoing legal review</li> </ul>"},{"location":"user-guide/product/risk-mitigation-strategy/#week-13-16-launch-preparation","title":"Week 13-16: Launch Preparation","text":"<ul> <li>User Acceptance Testing: Comprehensive usability testing</li> <li>Load Testing: System performance under peak load</li> <li>Compliance Certification: Final regulatory approval</li> <li>Risk Assessment Review: Complete risk mitigation evaluation</li> </ul>"},{"location":"user-guide/product/risk-mitigation-strategy/#response-protocols","title":"Response Protocols","text":""},{"location":"user-guide/product/risk-mitigation-strategy/#green-status-low-risk","title":"Green Status (Low Risk)","text":"<ul> <li>Continue standard development and monitoring</li> <li>Monthly risk assessment reviews</li> <li>Quarterly mitigation strategy updates</li> </ul>"},{"location":"user-guide/product/risk-mitigation-strategy/#yellow-status-elevated-risk","title":"Yellow Status (Elevated Risk)","text":"<ul> <li>Weekly risk review meetings</li> <li>Accelerated mitigation implementation</li> <li>Increased monitoring frequency</li> <li>Stakeholder communication alerts</li> </ul>"},{"location":"user-guide/product/risk-mitigation-strategy/#red-status-high-risk","title":"Red Status (High Risk)","text":"<ul> <li>Daily risk management meetings</li> <li>Immediate mitigation activation</li> <li>Development priority adjustment</li> <li>Emergency response team activation</li> </ul>"},{"location":"user-guide/product/risk-mitigation-strategy/#crisis-status-critical-risk","title":"Crisis Status (Critical Risk)","text":"<ul> <li>Emergency response protocols</li> <li>Immediate senior leadership involvement</li> <li>Potential project timeline adjustment</li> <li>External expert consultation</li> </ul>"},{"location":"user-guide/product/risk-mitigation-strategy/#investment-summary","title":"Investment Summary","text":"Risk Category Mitigation Investment Expected ROI Priority User Adoption $115K High (addresses primary success factor) Critical Technical Risks $105K Medium-High (protects user experience) High Regulatory Compliance $100K Critical (enables market entry) Critical Business/Market $150K Medium (protects competitive advantage) Medium <p>Total Risk Mitigation Investment: $470K As % of Development Budget: 23% Expected Success Probability Improvement: +25 percentage points</p>"},{"location":"user-guide/product/risk-mitigation-strategy/#success-criteria-for-risk-mitigation","title":"Success Criteria for Risk Mitigation","text":""},{"location":"user-guide/product/risk-mitigation-strategy/#phase-1-weeks-1-8-foundation","title":"Phase 1 (Weeks 1-8): Foundation","text":"<ul> <li> All critical risk mitigation strategies in development</li> <li> User adoption testing shows 60%+ conversation mode acceptance</li> <li> Technical architecture passes security and performance audits</li> <li> Regulatory consultation confirms compliance approach</li> </ul>"},{"location":"user-guide/product/risk-mitigation-strategy/#phase-2-weeks-9-16-implementation","title":"Phase 2 (Weeks 9-16): Implementation","text":"<ul> <li> User adoption rate &gt;70% in beta testing</li> <li> System reliability &gt;99% in testing environment</li> <li> Compliance requirements fully implemented</li> <li> Competitive differentiation maintained</li> </ul>"},{"location":"user-guide/product/risk-mitigation-strategy/#launch-readiness-week-16","title":"Launch Readiness (Week 16+)","text":"<ul> <li> All risk mitigation measures operational</li> <li> Success metrics tracking implemented</li> <li> Emergency response procedures tested</li> <li> Stakeholder approval for market launch</li> </ul> <p>Executive Recommendation: The revolutionary loan experience has transformative potential that justifies the risk mitigation investment. With proactive risk management, the probability of success increases significantly while protecting against potential failures that could damage brand reputation or market position.</p>"},{"location":"user-guide/product/success-metrics-framework/","title":"Success Metrics &amp; KPI Framework - Revolutionary Loan Experience","text":""},{"location":"user-guide/product/success-metrics-framework/#north-star-metrics","title":"North Star Metrics","text":""},{"location":"user-guide/product/success-metrics-framework/#primary-success-metric-loan-application-experience-score-laes","title":"Primary Success Metric: Loan Application Experience Score (LAES)","text":"<p>Formula: (Completion Rate \u00d7 0.3) + (User Satisfaction \u00d7 0.3) + (Speed Index \u00d7 0.2) + (Referral Rate \u00d7 0.2) Target: 85+ out of 100 (Industry benchmark: 45-55) Business Impact: Composite metric that balances conversion, satisfaction, efficiency, and growth</p>"},{"location":"user-guide/product/success-metrics-framework/#secondary-north-star-conversion-velocity","title":"Secondary North Star: Conversion Velocity","text":"<p>Definition: Time from first interaction to approved loan application Target: &lt;15 minutes (Industry benchmark: 60-90 minutes + 24-48 hour processing) Business Impact: Direct correlation with competitive advantage and user satisfaction</p>"},{"location":"user-guide/product/success-metrics-framework/#tier-1-kpis-executive-dashboard","title":"Tier 1 KPIs (Executive Dashboard)","text":""},{"location":"user-guide/product/success-metrics-framework/#business-impact-metrics","title":"Business Impact Metrics","text":""},{"location":"user-guide/product/success-metrics-framework/#1-application-completion-rate","title":"1. Application Completion Rate","text":"<ul> <li>Definition: % of started applications that reach final submission</li> <li>Current Industry: 30-40%</li> <li>Target: 85%</li> <li>Measurement: Real-time tracking with funnel analysis</li> <li>Business Value: Direct revenue impact - each 1% improvement = ~$50K annual revenue</li> </ul>"},{"location":"user-guide/product/success-metrics-framework/#2-user-satisfaction-net-promoter-score","title":"2. User Satisfaction (Net Promoter Score)","text":"<ul> <li>Definition: Likelihood to recommend (0-10 scale, NPS = % Promoters - % Detractors)</li> <li>Current Industry: 20-30 NPS</li> <li>Target: 70+ NPS</li> <li>Measurement: Post-application survey, quarterly brand tracking</li> <li>Business Value: Referral generation and brand differentiation</li> </ul>"},{"location":"user-guide/product/success-metrics-framework/#3-processing-speed-time-to-decision","title":"3. Processing Speed (Time to Decision)","text":"<ul> <li>Definition: Minutes from application submission to approval/denial</li> <li>Current Industry: 24-48 hours</li> <li>Target: &lt;2 minutes</li> <li>Measurement: Automated timestamp tracking</li> <li>Business Value: Competitive moat and user anxiety reduction</li> </ul>"},{"location":"user-guide/product/success-metrics-framework/#4-customer-acquisition-cost-cac-efficiency","title":"4. Customer Acquisition Cost (CAC) Efficiency","text":"<ul> <li>Definition: Marketing spend per completed application</li> <li>Current Baseline: $150-200 CAC</li> <li>Target: 25% reduction ($112-150 CAC)</li> <li>Measurement: Attribution tracking with improved conversion rates</li> <li>Business Value: Marketing efficiency and profitability</li> </ul>"},{"location":"user-guide/product/success-metrics-framework/#user-experience-metrics","title":"User Experience Metrics","text":""},{"location":"user-guide/product/success-metrics-framework/#5-conversation-engagement-quality","title":"5. Conversation Engagement Quality","text":"<ul> <li>Definition: Average conversation depth and user response quality</li> <li>Measurement:</li> <li>Messages per session (Target: 15-25)</li> <li>Conversation completion rate (Target: 95%)</li> <li>User satisfaction with AI specialists (Target: 4.5/5)</li> <li>Business Value: Indicator of experience quality and future improvement areas</li> </ul>"},{"location":"user-guide/product/success-metrics-framework/#6-error-recovery-success-rate","title":"6. Error Recovery Success Rate","text":"<ul> <li>Definition: % of conversations that successfully recover from misunderstandings</li> <li>Target: 95%</li> <li>Measurement: Conversation flow analysis with error detection</li> <li>Business Value: User frustration prevention and completion rate protection</li> </ul>"},{"location":"user-guide/product/success-metrics-framework/#tier-2-kpis-product-management-dashboard","title":"Tier 2 KPIs (Product Management Dashboard)","text":""},{"location":"user-guide/product/success-metrics-framework/#feature-adoption-metrics","title":"Feature Adoption Metrics","text":""},{"location":"user-guide/product/success-metrics-framework/#7-ai-specialist-preference-distribution","title":"7. AI Specialist Preference Distribution","text":"<ul> <li>Measurement: Which specialists users interact with most</li> <li>Analysis: Conversation patterns and user feedback by specialist</li> <li>Target: Balanced usage across all specialists (20-30% each)</li> <li>Optimization: Personality refinement and capability balancing</li> </ul>"},{"location":"user-guide/product/success-metrics-framework/#8-voice-input-adoption-rate-phase-2","title":"8. Voice Input Adoption Rate (Phase 2)","text":"<ul> <li>Definition: % of users who try voice input during application</li> <li>Target: 40% trial rate, 80% completion rate for voice users</li> <li>Measurement: Feature usage analytics</li> <li>Business Value: Differentiation indicator and mobile optimization success</li> </ul>"},{"location":"user-guide/product/success-metrics-framework/#9-social-sharing-referral-rate","title":"9. Social Sharing &amp; Referral Rate","text":"<ul> <li>Definition: % of approved users who share their success</li> <li>Target: 15% sharing rate, 25% referral conversion</li> <li>Measurement: Social media tracking and referral attribution</li> <li>Business Value: Organic growth and brand advocacy</li> </ul>"},{"location":"user-guide/product/success-metrics-framework/#operational-excellence-metrics","title":"Operational Excellence Metrics","text":""},{"location":"user-guide/product/success-metrics-framework/#10-system-reliability-uptime","title":"10. System Reliability (Uptime)","text":"<ul> <li>Target: 99.9% uptime during business hours</li> <li>Measurement: Real-time monitoring and alerting</li> <li>Business Impact: User trust and completion rate protection</li> </ul>"},{"location":"user-guide/product/success-metrics-framework/#11-data-processing-accuracy","title":"11. Data Processing Accuracy","text":"<ul> <li>Definition: Accuracy of pre-populated data and AI assessments</li> <li>Target: 99.5% accuracy for financial data, 98% for AI assessments</li> <li>Measurement: Automated validation and human audit sampling</li> <li>Business Impact: Trust building and regulatory compliance</li> </ul>"},{"location":"user-guide/product/success-metrics-framework/#12-mobile-experience-quality","title":"12. Mobile Experience Quality","text":"<ul> <li>Metrics:</li> <li>Mobile completion rate vs desktop (Target: 95% parity)</li> <li>Mobile page load time (Target: &lt;2 seconds)</li> <li>Mobile conversation quality (Target: equivalent to desktop)</li> <li>Business Impact: Market reach and user accessibility</li> </ul>"},{"location":"user-guide/product/success-metrics-framework/#tier-3-kpis-development-team-dashboard","title":"Tier 3 KPIs (Development Team Dashboard)","text":""},{"location":"user-guide/product/success-metrics-framework/#technical-performance-metrics","title":"Technical Performance Metrics","text":""},{"location":"user-guide/product/success-metrics-framework/#13-conversation-flow-performance","title":"13. Conversation Flow Performance","text":"<ul> <li>Response time per AI specialist (Target: &lt;500ms)</li> <li>Natural language processing accuracy (Target: 95%)</li> <li>Context retention across conversation (Target: 98%)</li> </ul>"},{"location":"user-guide/product/success-metrics-framework/#14-real-time-processing-visualization","title":"14. Real-Time Processing Visualization","text":"<ul> <li>Update frequency accuracy (Target: Real-time with &lt;100ms delay)</li> <li>Progress bar synchronization (Target: 99% accuracy with actual processing)</li> <li>Error state handling (Target: 100% graceful degradation)</li> </ul>"},{"location":"user-guide/product/success-metrics-framework/#15-integration-reliability","title":"15. Integration Reliability","text":"<ul> <li>Third-party API success rates (Target: 99.5%)</li> <li>Data synchronization accuracy (Target: 99.9%)</li> <li>Fallback mechanism activation rate (Target: &lt;0.1%)</li> </ul>"},{"location":"user-guide/product/success-metrics-framework/#development-velocity-metrics","title":"Development Velocity Metrics","text":""},{"location":"user-guide/product/success-metrics-framework/#16-feature-delivery-velocity","title":"16. Feature Delivery Velocity","text":"<ul> <li>Sprint completion rate (Target: 90%)</li> <li>Bug resolution time (Target: 24 hours for critical, 1 week for minor)</li> <li>Feature adoption post-launch (Target: 50% user trial within first month)</li> </ul>"},{"location":"user-guide/product/success-metrics-framework/#success-measurement-timeline","title":"Success Measurement Timeline","text":""},{"location":"user-guide/product/success-metrics-framework/#week-1-4-baseline-establishment","title":"Week 1-4: Baseline Establishment","text":"<ul> <li> Implement analytics infrastructure</li> <li> Establish current industry benchmarks</li> <li> Define measurement protocols</li> <li> Launch initial user feedback collection</li> </ul>"},{"location":"user-guide/product/success-metrics-framework/#week-5-8-early-indicators","title":"Week 5-8: Early Indicators","text":"<ul> <li> Monitor conversation engagement quality</li> <li> Track initial completion rates</li> <li> Assess technical performance</li> <li> Gather user sentiment feedback</li> </ul>"},{"location":"user-guide/product/success-metrics-framework/#week-9-12-feature-validation","title":"Week 9-12: Feature Validation","text":"<ul> <li> Measure AI specialist effectiveness</li> <li> Analyze user journey completion patterns</li> <li> Evaluate processing speed impact</li> <li> Test error recovery mechanisms</li> </ul>"},{"location":"user-guide/product/success-metrics-framework/#week-13-16-launch-readiness","title":"Week 13-16: Launch Readiness","text":"<ul> <li> Validate all Tier 1 KPIs against targets</li> <li> Confirm system reliability under load</li> <li> Complete user satisfaction assessment</li> <li> Prepare success metrics dashboard</li> </ul>"},{"location":"user-guide/product/success-metrics-framework/#post-launch-continuous-optimization","title":"Post-Launch: Continuous Optimization","text":""},{"location":"user-guide/product/success-metrics-framework/#month-1-performance-validation","title":"Month 1: Performance Validation","text":"<ul> <li>Daily monitoring of completion rates and user satisfaction</li> <li>Weekly analysis of conversation quality and technical performance</li> <li>Immediate optimization for any metrics below target</li> </ul>"},{"location":"user-guide/product/success-metrics-framework/#month-2-3-feature-refinement","title":"Month 2-3: Feature Refinement","text":"<ul> <li>A/B testing of conversation flows and specialist personalities</li> <li>User research to validate satisfaction drivers</li> <li>Performance optimization based on usage patterns</li> </ul>"},{"location":"user-guide/product/success-metrics-framework/#month-4-6-growth-acceleration","title":"Month 4-6: Growth Acceleration","text":"<ul> <li>Referral program effectiveness measurement</li> <li>Competitive differentiation impact assessment</li> <li>Market share growth tracking</li> </ul>"},{"location":"user-guide/product/success-metrics-framework/#analytics-infrastructure","title":"Analytics Infrastructure","text":""},{"location":"user-guide/product/success-metrics-framework/#real-time-dashboard-components","title":"Real-Time Dashboard Components","text":"<ol> <li>Executive View: North Star metrics and business impact</li> <li>Product View: Feature adoption and user experience quality</li> <li>Technical View: System performance and reliability</li> <li>User Journey View: Funnel analysis and drop-off identification</li> </ol>"},{"location":"user-guide/product/success-metrics-framework/#data-collection-strategy","title":"Data Collection Strategy","text":""},{"location":"user-guide/product/success-metrics-framework/#user-interaction-tracking","title":"User Interaction Tracking","text":"<ul> <li>Conversation flow progression and timing</li> <li>AI specialist interaction patterns</li> <li>Error occurrences and recovery success</li> <li>Feature usage and adoption rates</li> </ul>"},{"location":"user-guide/product/success-metrics-framework/#business-performance-tracking","title":"Business Performance Tracking","text":"<ul> <li>Application submission and approval rates</li> <li>Revenue attribution and CAC calculation</li> <li>Customer lifetime value projection</li> <li>Referral and organic growth measurement</li> </ul>"},{"location":"user-guide/product/success-metrics-framework/#technical-performance-monitoring","title":"Technical Performance Monitoring","text":"<ul> <li>API response times and error rates</li> <li>System load and auto-scaling effectiveness</li> <li>Third-party integration reliability</li> <li>Mobile vs desktop performance comparison</li> </ul>"},{"location":"user-guide/product/success-metrics-framework/#privacy-compliant-analytics","title":"Privacy-Compliant Analytics","text":"<ul> <li>Data Minimization: Collect only metrics necessary for improvement</li> <li>Anonymization: Personal information removed from analytics data</li> <li>User Control: Opt-out options for non-essential tracking</li> <li>Regulatory Compliance: GDPR, CCPA, and financial privacy regulations</li> </ul>"},{"location":"user-guide/product/success-metrics-framework/#success-thresholds-escalation","title":"Success Thresholds &amp; Escalation","text":""},{"location":"user-guide/product/success-metrics-framework/#green-zone-target-achievement","title":"Green Zone (Target Achievement)","text":"<ul> <li>Application completion rate &gt;80%</li> <li>NPS score &gt;65</li> <li>Processing time &lt;3 minutes</li> <li>System uptime &gt;99.5%</li> <li>Action: Continue optimization and feature development</li> </ul>"},{"location":"user-guide/product/success-metrics-framework/#yellow-zone-performance-monitoring","title":"Yellow Zone (Performance Monitoring)","text":"<ul> <li>Application completion rate 65-80%</li> <li>NPS score 45-65</li> <li>Processing time 3-5 minutes</li> <li>System uptime 98-99.5%</li> <li>Action: Investigate root causes, implement improvements</li> </ul>"},{"location":"user-guide/product/success-metrics-framework/#red-zone-immediate-intervention","title":"Red Zone (Immediate Intervention)","text":"<ul> <li>Application completion rate &lt;65%</li> <li>NPS score &lt;45</li> <li>Processing time &gt;5 minutes</li> <li>System uptime &lt;98%</li> <li>Action: Halt feature development, focus on core issues, escalate to leadership</li> </ul>"},{"location":"user-guide/product/success-metrics-framework/#crisis-threshold-emergency-response","title":"Crisis Threshold (Emergency Response)","text":"<ul> <li>Application completion rate &lt;50%</li> <li>NPS score &lt;20</li> <li>Processing time &gt;10 minutes</li> <li>System uptime &lt;95%</li> <li>Action: Emergency response team, potential rollback, immediate user communication</li> </ul>"},{"location":"user-guide/product/success-metrics-framework/#roi-calculation-framework","title":"ROI Calculation Framework","text":""},{"location":"user-guide/product/success-metrics-framework/#revenue-impact-model","title":"Revenue Impact Model","text":"<p>Baseline: 1000 monthly applications \u00d7 35% completion \u00d7 $500 avg revenue = $175K monthly revenue</p> <p>Improved Experience: 1000 monthly applications \u00d7 85% completion \u00d7 $500 avg revenue = $425K monthly revenue</p> <p>Monthly Revenue Increase: $250K (+143%) Annual Revenue Increase: $3M</p>"},{"location":"user-guide/product/success-metrics-framework/#cost-benefit-analysis","title":"Cost-Benefit Analysis","text":"<p>Development Investment: $2.02M (Phase 1 + 2) Monthly Operating Costs: $15K (infrastructure, maintenance, monitoring) Annual Operating Costs: $180K</p> <p>Year 1 ROI: ($3M - $2.02M - $180K) \u00f7 $2.2M = 36% Year 2+ ROI: ($3M - $180K) \u00f7 $180K = 1567%</p>"},{"location":"user-guide/product/success-metrics-framework/#break-even-timeline","title":"Break-Even Timeline","text":"<p>Break-even point: 8.7 months post-launch Payback period: Full ROI achieved by month 13</p>"},{"location":"user-guide/product/success-metrics-framework/#competitive-benchmarking","title":"Competitive Benchmarking","text":""},{"location":"user-guide/product/success-metrics-framework/#industry-comparison-metrics","title":"Industry Comparison Metrics","text":"<ul> <li>Application abandonment rates vs top 5 competitors</li> <li>User satisfaction scores vs industry leaders</li> <li>Processing speed vs fastest competitors</li> <li>Mobile experience quality vs digital-first lenders</li> </ul>"},{"location":"user-guide/product/success-metrics-framework/#differentiation-tracking","title":"Differentiation Tracking","text":"<ul> <li>Unique feature adoption (conversational interface, AI specialists)</li> <li>Brand recognition for innovation (industry awards, media coverage)</li> <li>Market share growth in target demographics</li> <li>User preference vs traditional and fintech competitors</li> </ul>"},{"location":"user-guide/product/success-metrics-framework/#success-recognition-indicators","title":"Success Recognition Indicators","text":"<ul> <li>Industry awards for innovation and user experience</li> <li>Case study requests from financial services organizations</li> <li>Speaking opportunities at fintech conferences</li> <li>Media coverage as industry leader</li> </ul> <p>Implementation Priority: Establish Tier 1 KPIs immediately with real-time monitoring. Tier 2 and 3 metrics can be phased in over 8-12 weeks as features mature.</p> <p>Review Cadence: - Daily: Tier 1 metrics monitoring - Weekly: Tier 2 performance review - Monthly: Comprehensive success assessment - Quarterly: Strategic metric evaluation and goal adjustment</p>"},{"location":"user-guide/ux/jobs-to-be-done/","title":"Jobs-to-be-Done Framework for Loan Processing","text":""},{"location":"user-guide/ux/jobs-to-be-done/#overview","title":"Overview","text":"<p>The Jobs-to-be-Done (JTBD) framework is the foundation of our multi-agent system design. Rather than organizing around internal processes, our agents are designed around the jobs customers are trying to accomplish when applying for loans.</p> <p>Connected Framework: This JTBD analysis is built on detailed user personas and supports the business case by ensuring our solution addresses real customer needs rather than just operational efficiency.</p>"},{"location":"user-guide/ux/jobs-to-be-done/#jtbd-theory-in-loan-processing","title":"JTBD Theory in Loan Processing","text":""},{"location":"user-guide/ux/jobs-to-be-done/#core-principle","title":"Core Principle","text":"<p>\"People don't want a quarter-inch drill. They want a quarter-inch hole.\"</p> <p>Applied to lending:</p> <p>\"People don't want a loan application process. They want confident access to capital for their life goals.\"</p>"},{"location":"user-guide/ux/jobs-to-be-done/#the-customers-perspective","title":"The Customer's Perspective","text":"<p>When someone applies for a loan, they're not just seeking money. They're hiring our loan process to: - Achieve a life goal (buy a home, start a business, consolidate debt) - Reduce anxiety about their financial future - Gain confidence that they're making the right decision - Preserve dignity throughout the evaluation process - Maintain control over their financial narrative</p>"},{"location":"user-guide/ux/jobs-to-be-done/#core-job-architecture","title":"Core Job Architecture","text":""},{"location":"user-guide/ux/jobs-to-be-done/#primary-customer-job-statement","title":"Primary Customer Job Statement","text":"<p>\"When I need financing for [specific purpose], I want to get a fair evaluation of my application quickly and transparently, so I can move forward with confidence that I'm getting appropriate terms for my situation.\"</p> <p>This breaks down into: - Situation: Need financing for specific purpose - Motivation: Fair, quick, transparent evaluation - Outcome: Confidence in appropriate terms</p>"},{"location":"user-guide/ux/jobs-to-be-done/#job-types-hierarchy","title":"Job Types Hierarchy","text":""},{"location":"user-guide/ux/jobs-to-be-done/#1-functional-jobs-what-needs-to-be-accomplished","title":"1. Functional Jobs (What needs to be accomplished)","text":"<ul> <li>Submit complete application information</li> <li>Get creditworthiness evaluated fairly</li> <li>Have income and employment verified</li> <li>Receive appropriate loan terms</li> <li>Understand decision rationale</li> </ul>"},{"location":"user-guide/ux/jobs-to-be-done/#2-emotional-jobs-how-they-want-to-feel","title":"2. Emotional Jobs (How they want to feel)","text":"<ul> <li>Confident in the fairness of the process</li> <li>Respected as a person, not just a credit score</li> <li>Informed about what's happening and why</li> <li>Hopeful about approval chances</li> <li>Validated for their financial responsibility</li> </ul>"},{"location":"user-guide/ux/jobs-to-be-done/#3-social-jobs-how-they-want-to-be-perceived","title":"3. Social Jobs (How they want to be perceived)","text":"<ul> <li>Demonstrate financial competence to family/partners</li> <li>Maintain professional credibility</li> <li>Show responsible borrowing behavior</li> <li>Preserve relationships with financial institutions</li> <li>Build reputation for future financial needs</li> </ul>"},{"location":"user-guide/ux/jobs-to-be-done/#agent-specific-jtbd-analysis","title":"Agent-Specific JTBD Analysis","text":""},{"location":"user-guide/ux/jobs-to-be-done/#intake-agent-jobs","title":"Intake Agent Jobs","text":"<p>Primary Job: \"Make this process smooth and complete the first time\"</p> <p>Functional Jobs: - Submit all required information efficiently - Avoid repetitive data entry - Get immediate feedback on completeness - Understand what documentation is needed</p> <p>Emotional Jobs: - Feel confident the process will be different/better - Reduce anxiety about missing information - Trust that data is secure and properly handled - Experience momentum rather than obstacles</p> <p>Pain Points Addressed: - Repetitive forms across multiple systems - Uncertainty about completeness - Data security concerns - Lengthy application processes</p> <p>Value Created: - Intelligent pre-population of fields - Real-time validation and guidance - Secure, streamlined data collection - Clear progress indicators</p>"},{"location":"user-guide/ux/jobs-to-be-done/#credit-agent-jobs","title":"Credit Agent Jobs","text":"<p>Primary Job: \"Get fair credit evaluation considering my full story\"</p> <p>Functional Jobs: - Have credit history analyzed accurately - Get alternative credit data considered - Understand factors affecting creditworthiness - Receive explanation of credit impact</p> <p>Emotional Jobs: - Feel confident the assessment is thorough - Trust that past issues won't unfairly penalize - Experience fairness despite credit imperfections - Gain understanding of improvement strategies</p> <p>Pain Points Addressed: - One-size-fits-all credit scoring - Bias against non-traditional credit patterns - Lack of context for credit events - Opaque credit decision processes</p> <p>Value Created: - Holistic credit assessment - Alternative data integration - Clear factor explanations - Improvement guidance</p>"},{"location":"user-guide/ux/jobs-to-be-done/#income-agent-jobs","title":"Income Agent Jobs","text":"<p>Primary Job: \"Have my earning capacity properly recognized and valued\"</p> <p>Functional Jobs: - Provide income verification conveniently - Have all income sources considered - Get accurate debt-to-income calculations - Demonstrate income stability</p> <p>Emotional Jobs: - Feel validated for professional accomplishments - Trust that earning capacity is maximized - Experience efficiency in verification - Gain confidence in income presentation</p> <p>Pain Points Addressed: - Undervaluation of non-traditional income - Complex verification requirements - Invasive verification processes - Confusion about qualifying income</p> <p>Value Created: - Comprehensive income optimization - Streamlined verification process - Recognition of diverse income patterns - Clear calculation methodology</p>"},{"location":"user-guide/ux/jobs-to-be-done/#risk-agent-jobs","title":"Risk Agent Jobs","text":"<p>Primary Job: \"Get loan terms that match my actual risk level\"</p> <p>Functional Jobs: - Receive comprehensive risk evaluation - Have compensating factors considered - Understand risk assessment rationale - Obtain appropriate loan structure</p> <p>Emotional Jobs: - Feel confident the evaluation is fair - Trust that all factors are weighted properly - Experience validation of risk mitigation efforts - Gain understanding of risk profile</p> <p>Pain Points Addressed: - Oversimplified risk categorization - Lack of compensating factor consideration - Opaque risk assessment processes - Inflexible risk policies</p> <p>Value Created: - Holistic risk assessment - Compensating factor integration - Clear risk explanations - Optimized loan structuring</p>"},{"location":"user-guide/ux/jobs-to-be-done/#orchestrator-agent-jobs","title":"Orchestrator Agent Jobs","text":"<p>Primary Job: \"Get a well-reasoned decision I can act on with confidence\"</p> <p>Functional Jobs: - Receive timely final decision - Understand decision rationale clearly - Get appropriate next steps - Have all factors considered</p> <p>Emotional Jobs: - Feel confident the decision is well-reasoned - Experience closure and clarity - Trust the institutional relationship - Gain satisfaction from transparent process</p> <p>Pain Points Addressed: - Decision timing uncertainty - Lack of clear rationale - Poor coordination between departments - Inconsistent decision processes</p> <p>Value Created: - Comprehensive decision rationale - Proactive timeline communication - Optimal loan structuring - Transparent audit trail</p>"},{"location":"user-guide/ux/jobs-to-be-done/#jtbd-implementation-framework","title":"JTBD Implementation Framework","text":""},{"location":"user-guide/ux/jobs-to-be-done/#1-job-mapping-process","title":"1. Job Mapping Process","text":"<p>For each customer interaction, we map: 1. Triggering Event: What caused the customer to start this job? 2. Job Steps: What are they trying to accomplish at each stage? 3. Desired Outcomes: What would success look like to them? 4. Pain Points: What typically goes wrong or causes frustration? 5. Emotional Needs: How do they want to feel throughout?</p>"},{"location":"user-guide/ux/jobs-to-be-done/#2-solution-design","title":"2. Solution Design","text":"<p>Each agent capability is designed to: - Complete a job step more effectively than alternatives - Eliminate a pain point that customers commonly experience - Create emotional value beyond just functional completion - Enable the next job step to proceed smoothly</p>"},{"location":"user-guide/ux/jobs-to-be-done/#3-success-measurement","title":"3. Success Measurement","text":"<p>We measure success through customer-centric metrics: - Job Completion Rate: How often do customers successfully complete their jobs? - Effort Score: How much effort does it take to complete each job? - Emotional Satisfaction: How do customers feel about the experience? - Recommendation Likelihood: Would they hire our process again?</p>"},{"location":"user-guide/ux/jobs-to-be-done/#jtbd-vs-traditional-process-design","title":"JTBD vs. Traditional Process Design","text":""},{"location":"user-guide/ux/jobs-to-be-done/#traditional-approach","title":"Traditional Approach","text":"<ul> <li>Organized around internal departments</li> <li>Optimized for operational efficiency</li> <li>Measured by process metrics</li> <li>Designed from institution's perspective</li> </ul>"},{"location":"user-guide/ux/jobs-to-be-done/#jtbd-approach","title":"JTBD Approach","text":"<ul> <li>Organized around customer jobs</li> <li>Optimized for job completion</li> <li>Measured by customer outcomes</li> <li>Designed from customer's perspective</li> </ul>"},{"location":"user-guide/ux/jobs-to-be-done/#example-comparison","title":"Example Comparison","text":"<p>Traditional: \"Process credit application efficiently\" - Metric: Applications processed per hour - Design: Minimize processing time and cost - Result: Fast processing, poor customer experience</p> <p>JTBD: \"Help customer get fair credit evaluation\" - Metric: Customer confidence in fairness + speed - Design: Thorough, explainable, fast evaluation - Result: Customer satisfaction + operational efficiency</p>"},{"location":"user-guide/ux/jobs-to-be-done/#benefits-of-jtbd-driven-agent-design","title":"Benefits of JTBD-Driven Agent Design","text":""},{"location":"user-guide/ux/jobs-to-be-done/#customer-benefits","title":"Customer Benefits","text":"<ul> <li>Better Outcomes: Agents designed around customer jobs deliver what customers actually want</li> <li>Reduced Friction: Pain points are systematically identified and eliminated</li> <li>Emotional Satisfaction: Addresses not just functional but emotional needs</li> <li>Predictable Experience: Consistent job completion across all interactions</li> </ul>"},{"location":"user-guide/ux/jobs-to-be-done/#business-benefits","title":"Business Benefits","text":"<ul> <li>Competitive Differentiation: Unique value proposition based on job completion</li> <li>Customer Loyalty: Satisfied customers become repeat customers and advocates</li> <li>Operational Focus: Clear priorities based on customer impact</li> <li>Improvement Direction: Framework for identifying enhancement opportunities</li> </ul>"},{"location":"user-guide/ux/jobs-to-be-done/#technical-benefits","title":"Technical Benefits","text":"<ul> <li>Clear Requirements: Agent capabilities directly tied to customer jobs</li> <li>Success Metrics: Measurable outcomes based on job completion</li> <li>Prioritization Framework: Feature development guided by job importance</li> <li>Integration Points: Agents coordinate around customer job flow</li> </ul>"},{"location":"user-guide/ux/jobs-to-be-done/#implementation-guidelines","title":"Implementation Guidelines","text":""},{"location":"user-guide/ux/jobs-to-be-done/#for-product-teams","title":"For Product Teams","text":"<ol> <li>Start with customer jobs, not internal processes</li> <li>Map the complete job journey, not just touchpoints</li> <li>Design for job completion, not just task completion</li> <li>Measure customer outcomes, not just operational metrics</li> </ol>"},{"location":"user-guide/ux/jobs-to-be-done/#for-engineering-teams","title":"For Engineering Teams","text":"<ol> <li>Agent capabilities should map to specific job steps</li> <li>Error handling should preserve job completion ability</li> <li>Performance optimization should prioritize job-critical paths</li> <li>Integration design should support smooth job flow</li> </ol>"},{"location":"user-guide/ux/jobs-to-be-done/#for-business-teams","title":"For Business Teams","text":"<ol> <li>Value proposition should focus on job completion benefits</li> <li>Success metrics should include customer job outcomes</li> <li>Competitive analysis should compare job completion effectiveness</li> <li>Strategic planning should prioritize highest-impact jobs</li> </ol>"},{"location":"user-guide/ux/jobs-to-be-done/#continuous-improvement-through-jtbd","title":"Continuous Improvement through JTBD","text":""},{"location":"user-guide/ux/jobs-to-be-done/#job-performance-monitoring","title":"Job Performance Monitoring","text":"<ul> <li>Track job completion rates by segment</li> <li>Identify common failure points</li> <li>Measure effort required for each job step</li> <li>Monitor emotional satisfaction throughout journey</li> </ul>"},{"location":"user-guide/ux/jobs-to-be-done/#improvement-opportunities","title":"Improvement Opportunities","text":"<ul> <li>Jobs that are underserved by current solutions</li> <li>Job steps where customers expend significant effort</li> <li>Emotional needs that aren't being met</li> <li>Social needs that create competitive advantage</li> </ul>"},{"location":"user-guide/ux/jobs-to-be-done/#agent-evolution","title":"Agent Evolution","text":"<ul> <li>Enhance capabilities based on job performance data</li> <li>Add new capabilities for underserved job steps</li> <li>Improve coordination for better job completion</li> <li>Optimize for both functional and emotional job success</li> </ul> <p>This JTBD framework ensures our multi-agent system remains customer-centric while delivering exceptional business results through superior job completion.</p>"},{"location":"user-guide/ux/processing-workflow-implementation-guide/","title":"Implementation Guide: Single Message Processing Workflow","text":"<p>Component: ApplicationPage.tsx - Processing Step Date: 2025-10-01 Estimated Implementation Time: 4-6 hours Complexity: Medium</p>"},{"location":"user-guide/ux/processing-workflow-implementation-guide/#quick-start-summary","title":"Quick Start Summary","text":"<p>What You're Building: Replace the stacked message cards (lines 443-475) with a single dynamic message container that smoothly transitions between agent states.</p> <p>Key Changes: 1. Replace <code>agentMessages</code> array state with single <code>currentMessage</code> state 2. Update useEffect to orchestrate message sequence with fade transitions 3. Add CSS animations for fade-in/fade-out 4. Implement ARIA live region for accessibility</p>"},{"location":"user-guide/ux/processing-workflow-implementation-guide/#step-by-step-implementation","title":"Step-by-Step Implementation","text":""},{"location":"user-guide/ux/processing-workflow-implementation-guide/#step-1-update-state-management-5-minutes","title":"Step 1: Update State Management (5 minutes)","text":"<p>Location: <code>/workspaces/loan-avengers/loan_avengers/ui/src/pages/application/ApplicationPage.tsx</code></p> <p>Current Code (lines 18): <pre><code>const [agentMessages, setAgentMessages] = useState&lt;Array&lt;{agent: string, message: string, icon: string}&gt;&gt;([]);\n</code></pre></p> <p>Replace With: <pre><code>// Remove agentMessages state, add these instead:\nconst [currentMessage, setCurrentMessage] = useState&lt;{\n  agentName: string;\n  icon: string;\n  text: string;\n  state: 'PROCESSING' | 'COMPLETE' | 'TRANSITION';\n  progress: number;\n}&gt;({\n  agentName: '',\n  icon: '',\n  text: '',\n  state: 'PROCESSING',\n  progress: 0\n});\n\nconst [animationClass, setAnimationClass] = useState&lt;string&gt;('');\n</code></pre></p>"},{"location":"user-guide/ux/processing-workflow-implementation-guide/#step-2-create-message-sequence-configuration-10-minutes","title":"Step 2: Create Message Sequence Configuration (10 minutes)","text":"<p>Add this constant BEFORE the component (around line 10):</p> <pre><code>interface MessageSequence {\n  id: string;\n  agentName: string;\n  icon: string;\n  processingText: string;\n  completeText: string;\n  transitionText?: string;\n  progressStart: number;\n  progressEnd: number;\n  timing: {\n    processingDelay: number;\n    completeDuration: number;\n    transitionDuration: number;\n  };\n}\n\nconst MESSAGE_SEQUENCE: MessageSequence[] = [\n  {\n    id: 'intake',\n    agentName: 'Cap-ital America',\n    icon: '\ud83e\uddb8\u200d\u2642\ufe0f',\n    processingText: 'Cap-ital America is reviewing your application...',\n    completeText: '\u2705 Application validated! All information looks great.',\n    transitionText: '\ud83e\udd1d Handing over to Sarah for credit analysis...',\n    progressStart: 0,\n    progressEnd: 25,\n    timing: {\n      processingDelay: 0,\n      completeDuration: 500,\n      transitionDuration: 500\n    }\n  },\n  {\n    id: 'credit',\n    agentName: 'Sarah (Credit Analyst)',\n    icon: '\ud83e\uddb8\u200d\u2640\ufe0f',\n    processingText: 'Sarah is analyzing your credit profile...',\n    completeText: '\u2705 Credit profile looks strong! Good payment history detected.',\n    transitionText: '\ud83e\udd1d Handing over to Marcus for income verification...',\n    progressStart: 25,\n    progressEnd: 50,\n    timing: {\n      processingDelay: 1000,\n      completeDuration: 500,\n      transitionDuration: 500\n    }\n  },\n  {\n    id: 'income',\n    agentName: 'Marcus (Income Verifier)',\n    icon: '\ud83e\uddb8',\n    processingText: 'Marcus is verifying your income and employment...',\n    completeText: '\u2705 Income verified! Debt-to-income ratio is healthy.',\n    transitionText: '\ud83e\udd1d Handing over to Alex for risk assessment...',\n    progressStart: 50,\n    progressEnd: 75,\n    timing: {\n      processingDelay: 3000,\n      completeDuration: 500,\n      transitionDuration: 500\n    }\n  },\n  {\n    id: 'risk',\n    agentName: 'Alex (Risk Assessor)',\n    icon: '\ud83e\uddb9\u200d\u2642\ufe0f',\n    processingText: 'Alex is performing final risk assessment...',\n    completeText: '\u2705 Risk assessment complete! All metrics look excellent.\\n\ud83c\udf89 Your application has been APPROVED!',\n    transitionText: undefined,\n    progressStart: 75,\n    progressEnd: 100,\n    timing: {\n      processingDelay: 5000,\n      completeDuration: 2000,\n      transitionDuration: 0\n    }\n  }\n];\n</code></pre>"},{"location":"user-guide/ux/processing-workflow-implementation-guide/#step-3-replace-useeffect-logic-20-minutes","title":"Step 3: Replace useEffect Logic (20 minutes)","text":"<p>Current Code (lines 54-102): <pre><code>useEffect(() =&gt; {\n  if (currentStep !== 'processing') {\n    return;\n  }\n\n  const stages = [\n    // ... existing stages array ...\n  ];\n\n  const timers = stages.map(stage =&gt;\n    setTimeout(() =&gt; {\n      setProcessingProgress(stage.progress);\n      setAgentMessages(prev =&gt; [...prev, {\n        agent: stage.agent,\n        message: stage.message,\n        icon: stage.icon\n      }]);\n    }, stage.delay)\n  );\n\n  return () =&gt; timers.forEach(clearTimeout);\n}, [currentStep]);\n</code></pre></p> <p>Replace With: <pre><code>useEffect(() =&gt; {\n  if (currentStep !== 'processing') {\n    return;\n  }\n\n  const timers: NodeJS.Timeout[] = [];\n\n  MESSAGE_SEQUENCE.forEach((sequence, index) =&gt; {\n    // 1. Show COMPLETE state immediately (for first agent) or after processing\n    const completeDelay = sequence.timing.processingDelay;\n\n    timers.push(setTimeout(() =&gt; {\n      setCurrentMessage({\n        agentName: sequence.agentName,\n        icon: sequence.icon,\n        text: sequence.completeText,\n        state: 'COMPLETE',\n        progress: sequence.progressEnd\n      });\n      setProcessingProgress(sequence.progressEnd);\n    }, completeDelay));\n\n    // 2. Show TRANSITION state (if not last agent)\n    if (sequence.transitionText &amp;&amp; index &lt; MESSAGE_SEQUENCE.length - 1) {\n      const transitionDelay = completeDelay + sequence.timing.completeDuration;\n\n      timers.push(setTimeout(() =&gt; {\n        setCurrentMessage({\n          agentName: sequence.agentName,\n          icon: '\ud83e\udd1d',\n          text: sequence.transitionText!,\n          state: 'TRANSITION',\n          progress: sequence.progressEnd\n        });\n      }, transitionDelay));\n\n      // 3. Trigger fade-out animation before next agent\n      const fadeOutDelay = transitionDelay + sequence.timing.transitionDuration - 200;\n\n      timers.push(setTimeout(() =&gt; {\n        setAnimationClass('message-fade-out');\n      }, fadeOutDelay));\n\n      // 4. Show next agent's PROCESSING state with fade-in\n      const nextSequence = MESSAGE_SEQUENCE[index + 1];\n      const nextProcessingDelay = transitionDelay + sequence.timing.transitionDuration;\n\n      timers.push(setTimeout(() =&gt; {\n        setAnimationClass('message-fade-in');\n        setCurrentMessage({\n          agentName: nextSequence.agentName,\n          icon: nextSequence.icon,\n          text: nextSequence.processingText,\n          state: 'PROCESSING',\n          progress: nextSequence.progressStart\n        });\n\n        // Remove animation class after animation completes\n        setTimeout(() =&gt; setAnimationClass(''), 300);\n      }, nextProcessingDelay));\n    }\n  });\n\n  return () =&gt; timers.forEach(clearTimeout);\n}, [currentStep]);\n</code></pre></p>"},{"location":"user-guide/ux/processing-workflow-implementation-guide/#step-4-add-css-animations-5-minutes","title":"Step 4: Add CSS Animations (5 minutes)","text":"<p>Location: <code>/workspaces/loan-avengers/loan_avengers/ui/src/index.css</code> or <code>/workspaces/loan-avengers/loan_avengers/ui/src/styles/global.css</code></p> <p>Add these styles:</p> <pre><code>/* Fade Out Animation */\n@keyframes fadeOut {\n  from {\n    opacity: 1;\n    transform: translateY(0);\n  }\n  to {\n    opacity: 0;\n    transform: translateY(-10px);\n  }\n}\n\n.message-fade-out {\n  animation: fadeOut 200ms ease-out forwards;\n}\n\n/* Fade In Animation */\n@keyframes fadeIn {\n  from {\n    opacity: 0;\n    transform: translateY(10px);\n  }\n  to {\n    opacity: 1;\n    transform: translateY(0);\n  }\n}\n\n.message-fade-in {\n  animation: fadeIn 300ms ease-in forwards;\n}\n\n/* Pulse Animation for Processing State */\n@keyframes pulse-soft {\n  0%, 100% {\n    opacity: 1;\n  }\n  50% {\n    opacity: 0.7;\n  }\n}\n\n.message-pulse {\n  animation: pulse-soft 2s ease-in-out infinite;\n}\n\n/* Respect reduced motion preference */\n@media (prefers-reduced-motion: reduce) {\n  .message-fade-out,\n  .message-fade-in,\n  .message-pulse {\n    animation: none;\n    transition: none;\n  }\n}\n</code></pre>"},{"location":"user-guide/ux/processing-workflow-implementation-guide/#step-5-update-jsx-15-minutes","title":"Step 5: Update JSX (15 minutes)","text":"<p>Current Code (lines 443-475): <pre><code>{/* Agent Messages Ticker */}\n{agentMessages.length &gt; 0 &amp;&amp; (\n  &lt;div className=\"mt-10 space-y-3\"&gt;\n    &lt;h3 className=\"text-lg font-semibold text-center mb-4\"&gt;\n      &lt;span className=\"bg-gradient-to-r from-brand-600 via-accent-600 to-brand-500 bg-clip-text text-transparent\"&gt;\n        \ud83d\udcac What Your AI Team Says\n      &lt;/span&gt;\n    &lt;/h3&gt;\n    &lt;div className=\"space-y-3 max-h-64 overflow-y-auto\"&gt;\n      {agentMessages.map((msg, idx) =&gt; (\n        &lt;div key={idx} className=\"bg-gradient-to-r from-gray-50 to-blue-50 rounded-lg p-4 border animate-fade-in-up\"&gt;\n          {/* ... message content ... */}\n        &lt;/div&gt;\n      ))}\n    &lt;/div&gt;\n  &lt;/div&gt;\n)}\n</code></pre></p> <p>Replace With: <pre><code>{/* Single Agent Message Container */}\n{currentMessage.agentName &amp;&amp; (\n  &lt;div className=\"mt-10\"&gt;\n    &lt;h3 className=\"text-lg font-semibold text-center mb-4\"&gt;\n      &lt;span className=\"bg-gradient-to-r from-brand-600 via-accent-600 to-brand-500 bg-clip-text text-transparent\"&gt;\n        \ud83d\udcac What Your AI Team Says\n      &lt;/span&gt;\n    &lt;/h3&gt;\n\n    {/* Single Message Container with ARIA live region */}\n    &lt;div\n      role=\"status\"\n      aria-live=\"polite\"\n      aria-atomic=\"true\"\n      aria-label={`${currentMessage.agentName} says: ${currentMessage.text}. Progress: ${currentMessage.progress} percent complete.`}\n      className={`\n        bg-gradient-to-r from-gray-50 to-blue-50\n        dark:from-dark-bg-tertiary dark:to-dark-bg-card\n        rounded-lg p-6 border border-gray-200\n        dark:border-gray-700 shadow-md\n        min-h-[120px] flex items-center\n        transition-all duration-300\n        ${animationClass}\n      `}\n    &gt;\n      &lt;div className=\"flex items-start space-x-4 w-full\"&gt;\n        {/* Agent Icon */}\n        &lt;div className=\"w-12 h-12 bg-gradient-to-br from-brand-500 to-brand-600 rounded-full flex items-center justify-center flex-shrink-0\"&gt;\n          &lt;span className=\"text-2xl\" aria-hidden=\"true\"&gt;\n            {currentMessage.icon}\n          &lt;/span&gt;\n        &lt;/div&gt;\n\n        {/* Message Content */}\n        &lt;div className=\"flex-1\"&gt;\n          &lt;p className=\"font-semibold text-gray-900 dark:text-dark-text-primary text-sm mb-2\"&gt;\n            {currentMessage.agentName}\n          &lt;/p&gt;\n          &lt;p className=\"text-gray-700 dark:text-dark-text-secondary text-base leading-relaxed whitespace-pre-line\"&gt;\n            {currentMessage.text}\n          &lt;/p&gt;\n        &lt;/div&gt;\n\n        {/* Processing Indicator (show only during PROCESSING state) */}\n        {currentMessage.state === 'PROCESSING' &amp;&amp; (\n          &lt;div className=\"flex space-x-1 items-center\" aria-hidden=\"true\"&gt;\n            &lt;div className=\"w-2 h-2 bg-brand-500 rounded-full animate-bounce\" style={{ animationDelay: '0ms' }}&gt;&lt;/div&gt;\n            &lt;div className=\"w-2 h-2 bg-brand-500 rounded-full animate-bounce\" style={{ animationDelay: '150ms' }}&gt;&lt;/div&gt;\n            &lt;div className=\"w-2 h-2 bg-brand-500 rounded-full animate-bounce\" style={{ animationDelay: '300ms' }}&gt;&lt;/div&gt;\n          &lt;/div&gt;\n        )}\n      &lt;/div&gt;\n    &lt;/div&gt;\n  &lt;/div&gt;\n)}\n</code></pre></p>"},{"location":"user-guide/ux/processing-workflow-implementation-guide/#step-6-mobile-responsiveness-5-minutes","title":"Step 6: Mobile Responsiveness (5 minutes)","text":"<p>Update the container classes to be responsive:</p> <pre><code>&lt;div\n  className={`\n    bg-gradient-to-r from-gray-50 to-blue-50\n    dark:from-dark-bg-tertiary dark:to-dark-bg-card\n    rounded-lg p-4 sm:p-6 border border-gray-200\n    dark:border-gray-700 shadow-md\n    min-h-[100px] sm:min-h-[120px]\n    flex items-center\n    transition-all duration-300\n    ${animationClass}\n  `}\n&gt;\n  &lt;div className=\"flex items-start space-x-3 sm:space-x-4 w-full\"&gt;\n    {/* Agent Icon - responsive sizing */}\n    &lt;div className=\"w-10 h-10 sm:w-12 sm:h-12 bg-gradient-to-br from-brand-500 to-brand-600 rounded-full flex items-center justify-center flex-shrink-0\"&gt;\n      &lt;span className=\"text-xl sm:text-2xl\" aria-hidden=\"true\"&gt;\n        {currentMessage.icon}\n      &lt;/span&gt;\n    &lt;/div&gt;\n\n    {/* Message Content - responsive text sizing */}\n    &lt;div className=\"flex-1\"&gt;\n      &lt;p className=\"font-semibold text-gray-900 dark:text-dark-text-primary text-xs sm:text-sm mb-1 sm:mb-2\"&gt;\n        {currentMessage.agentName}\n      &lt;/p&gt;\n      &lt;p className=\"text-gray-700 dark:text-dark-text-secondary text-sm sm:text-base leading-relaxed whitespace-pre-line\"&gt;\n        {currentMessage.text}\n      &lt;/p&gt;\n    &lt;/div&gt;\n\n    {/* Processing Indicator */}\n    {currentMessage.state === 'PROCESSING' &amp;&amp; (\n      &lt;div className=\"flex space-x-1 items-center\" aria-hidden=\"true\"&gt;\n        &lt;div className=\"w-1.5 h-1.5 sm:w-2 sm:h-2 bg-brand-500 rounded-full animate-bounce\" style={{ animationDelay: '0ms' }}&gt;&lt;/div&gt;\n        &lt;div className=\"w-1.5 h-1.5 sm:w-2 sm:h-2 bg-brand-500 rounded-full animate-bounce\" style={{ animationDelay: '150ms' }}&gt;&lt;/div&gt;\n        &lt;div className=\"w-1.5 h-1.5 sm:w-2 sm:h-2 bg-brand-500 rounded-full animate-bounce\" style={{ animationDelay: '300ms' }}&gt;&lt;/div&gt;\n      &lt;/div&gt;\n    )}\n  &lt;/div&gt;\n&lt;/div&gt;\n</code></pre>"},{"location":"user-guide/ux/processing-workflow-implementation-guide/#testing-checklist","title":"Testing Checklist","text":""},{"location":"user-guide/ux/processing-workflow-implementation-guide/#functional-testing","title":"Functional Testing","text":"<p>Before Committing: - [ ] Run <code>uv run ruff check . --fix</code> (auto-fix linting issues) - [ ] Run <code>uv run ruff format .</code> (auto-format code) - [ ] Run frontend build: <code>cd loan_avengers/ui &amp;&amp; npm run build</code> - [ ] Test in development: <code>npm run dev</code></p>"},{"location":"user-guide/ux/processing-workflow-implementation-guide/#visual-testing","title":"Visual Testing","text":"<p>Test these scenarios: - [ ] Message transitions smoothly from one agent to next - [ ] Fade-out animation completes before fade-in starts - [ ] Processing dots animate correctly - [ ] No layout shift during transitions - [ ] Dark mode renders properly - [ ] Mobile view (test at 375px width) - [ ] Tablet view (test at 768px width) - [ ] Desktop view (test at 1440px width)</p>"},{"location":"user-guide/ux/processing-workflow-implementation-guide/#timing-validation","title":"Timing Validation","text":"<p>Use browser DevTools: <pre><code>// In browser console, test timing:\nconsole.time('workflow');\n// Navigate to processing page\n// When 100% complete:\nconsole.timeEnd('workflow');\n// Should show ~6 seconds\n</code></pre></p> <p>Expected Timeline: - 0.0s: Cap-ital America complete - 0.5s: Handoff to Sarah - 1.0s: Sarah processing - 2.0s: Sarah complete - 2.5s: Handoff to Marcus - 3.0s: Marcus processing - 4.0s: Marcus complete - 4.5s: Handoff to Alex - 5.0s: Alex processing - 6.0s: Alex complete (100%)</p>"},{"location":"user-guide/ux/processing-workflow-implementation-guide/#accessibility-testing","title":"Accessibility Testing","text":"<p>Manual Tests: - [ ] Turn on screen reader (macOS VoiceOver: Cmd+F5) - [ ] Navigate to processing page - [ ] Verify screen reader announces each message update - [ ] Check that ARIA label includes full context - [ ] Test with keyboard navigation (Tab key) - [ ] Verify reduced motion preference respected</p> <p>Automated Tests: <pre><code># Install axe-core if not already installed\nnpm install --save-dev @axe-core/cli\n\n# Run accessibility audit\nnpx axe http://localhost:5173/application --include '.single-message-container'\n</code></pre></p>"},{"location":"user-guide/ux/processing-workflow-implementation-guide/#performance-testing","title":"Performance Testing","text":"<p>Chrome DevTools Performance: 1. Open DevTools \u2192 Performance tab 2. Click Record 3. Navigate to processing page 4. Let workflow complete 5. Stop recording 6. Check for:    - Frame rate stays above 60fps    - No long tasks &gt;50ms    - No layout thrashing</p> <p>Expected Performance: - Initial render: &lt;100ms - Animation frame time: &lt;16ms (60fps) - Memory usage: No leaks (test by repeating workflow 10x)</p>"},{"location":"user-guide/ux/processing-workflow-implementation-guide/#common-issues-solutions","title":"Common Issues &amp; Solutions","text":""},{"location":"user-guide/ux/processing-workflow-implementation-guide/#issue-1-animations-dont-play","title":"Issue 1: Animations Don't Play","text":"<p>Symptoms: Messages update instantly without fade transitions</p> <p>Solution: Check that CSS animations are loaded <pre><code>// Verify animation class is applied\nconsole.log('Animation class:', animationClass);\n\n// Check if CSS is loaded in browser DevTools \u2192 Elements \u2192 Computed\n</code></pre></p> <p>Fix: Ensure <code>index.css</code> or <code>global.css</code> is imported in your component or main entry point</p>"},{"location":"user-guide/ux/processing-workflow-implementation-guide/#issue-2-timing-feels-off","title":"Issue 2: Timing Feels Off","text":"<p>Symptoms: Transitions too fast or too slow</p> <p>Solution: Adjust timing constants in <code>MESSAGE_SEQUENCE</code></p> <pre><code>// Too fast? Increase delays:\ntiming: {\n  processingDelay: 1500,  // Was 1000\n  completeDuration: 750,  // Was 500\n  transitionDuration: 750 // Was 500\n}\n\n// Too slow? Decrease delays:\ntiming: {\n  processingDelay: 750,   // Was 1000\n  completeDuration: 300,  // Was 500\n  transitionDuration: 300 // Was 500\n}\n</code></pre>"},{"location":"user-guide/ux/processing-workflow-implementation-guide/#issue-3-screen-reader-announces-too-much","title":"Issue 3: Screen Reader Announces Too Much","text":"<p>Symptoms: Screen reader reads multiple messages in rapid succession</p> <p>Solution: Verify <code>aria-live=\"polite\"</code> (NOT \"assertive\")</p> <pre><code>&lt;div\n  role=\"status\"\n  aria-live=\"polite\"  // \u2705 Correct - waits for user to be idle\n  // NOT aria-live=\"assertive\" \u274c - interrupts immediately\n  aria-atomic=\"true\"\n&gt;\n</code></pre>"},{"location":"user-guide/ux/processing-workflow-implementation-guide/#issue-4-layout-shifts-on-mobile","title":"Issue 4: Layout Shifts on Mobile","text":"<p>Symptoms: Content jumps when message updates</p> <p>Solution: Set minimum height on container</p> <pre><code>&lt;div className=\"min-h-[100px] sm:min-h-[120px]\"&gt;\n  {/* Prevents layout shift */}\n&lt;/div&gt;\n</code></pre>"},{"location":"user-guide/ux/processing-workflow-implementation-guide/#issue-5-dark-mode-colors-look-wrong","title":"Issue 5: Dark Mode Colors Look Wrong","text":"<p>Symptoms: Poor contrast in dark mode</p> <p>Solution: Test both modes and adjust colors</p> <pre><code>&lt;div className=\"\n  bg-gradient-to-r from-gray-50 to-blue-50\n  dark:from-dark-bg-tertiary dark:to-dark-bg-card\n  text-gray-700 dark:text-dark-text-secondary\n\"&gt;\n</code></pre> <p>Verify with DevTools: - Toggle dark mode in browser - Check contrast ratios (should be &gt;4.5:1 for text)</p>"},{"location":"user-guide/ux/processing-workflow-implementation-guide/#code-review-checklist","title":"Code Review Checklist","text":"<p>Before requesting code review: - [ ] All pre-commit checks pass (ruff, tests, build) - [ ] TypeScript types are correct (no <code>any</code> types) - [ ] CSS animations work in all browsers (Chrome, Firefox, Safari) - [ ] Mobile responsiveness tested on real device or emulator - [ ] Accessibility attributes present (<code>role</code>, <code>aria-live</code>, <code>aria-label</code>) - [ ] No console errors or warnings - [ ] Code follows existing patterns in codebase - [ ] Comments added for complex logic - [ ] No hardcoded values (use constants)</p>"},{"location":"user-guide/ux/processing-workflow-implementation-guide/#deployment-steps","title":"Deployment Steps","text":""},{"location":"user-guide/ux/processing-workflow-implementation-guide/#1-local-testing","title":"1. Local Testing","text":"<pre><code># Frontend\ncd loan_avengers/ui\nnpm run dev\n# Test at http://localhost:5173/application\n\n# Backend (if needed)\ncd ../..\nuv run python -m loan_avengers.api.app\n</code></pre>"},{"location":"user-guide/ux/processing-workflow-implementation-guide/#2-pre-deployment-checks","title":"2. Pre-Deployment Checks","text":"<pre><code># Run all quality checks\nuv run ruff check . --fix\nuv run ruff format .\ncd loan_avengers/ui &amp;&amp; npm run build\ncd ../.. &amp;&amp; uv run pytest tests/ -v\n\n# Verify no TypeScript errors\ncd loan_avengers/ui &amp;&amp; npm run type-check\n</code></pre>"},{"location":"user-guide/ux/processing-workflow-implementation-guide/#3-create-pull-request","title":"3. Create Pull Request","text":"<pre><code>git add .\ngit commit -m \"feat: implement single message processing workflow\n\n- Replace stacked message cards with single dynamic container\n- Add smooth fade transitions between agent messages\n- Include handoff messaging for workflow clarity\n- Implement ARIA live region for accessibility\n- Add mobile-responsive design\n\nCloses #[issue-number]\"\n\ngit push origin feat/single-message-workflow\n</code></pre>"},{"location":"user-guide/ux/processing-workflow-implementation-guide/#4-pr-description-template","title":"4. PR Description Template","text":"<pre><code>## Summary\nImplements single message processing workflow to improve user experience during loan application processing.\n\n## Changes\n- Replaced stacked message cards with single dynamic container\n- Added fade-in/fade-out transitions between agent messages\n- Implemented handoff messaging (\"Handing over to Sarah...\")\n- Added ARIA live region for screen reader accessibility\n- Made container mobile-responsive\n\n## Testing\n- [x] Visual testing on Chrome, Firefox, Safari\n- [x] Mobile testing on iPhone, Android\n- [x] Screen reader testing with VoiceOver\n- [x] Performance profiling (60fps maintained)\n- [x] Dark mode compatibility verified\n\n## Screenshots\n[Add before/after screenshots]\n\n## Related Documentation\n- UX Design: `/docs/ux/processing-workflow-single-message-design.md`\n- User Journey: `/docs/ux/processing-workflow-user-journey.md`\n\nCloses #[issue-number]\n</code></pre>"},{"location":"user-guide/ux/processing-workflow-implementation-guide/#post-deployment-monitoring","title":"Post-Deployment Monitoring","text":""},{"location":"user-guide/ux/processing-workflow-implementation-guide/#analytics-to-track","title":"Analytics to Track","text":"<ul> <li>Average workflow completion time: Should be ~6 seconds</li> <li>User abandonment rate: Should decrease from current baseline</li> <li>Mobile vs Desktop usage: Track experience differences</li> <li>Accessibility tool usage: Monitor screen reader interactions</li> </ul>"},{"location":"user-guide/ux/processing-workflow-implementation-guide/#user-feedback-collection","title":"User Feedback Collection","text":"<ul> <li>Add in-app survey after processing completes</li> <li>Question: \"How clear was the processing workflow?\" (1-5 scale)</li> <li>Optional comment: \"Any suggestions for improvement?\"</li> </ul>"},{"location":"user-guide/ux/processing-workflow-implementation-guide/#ab-testing-optional","title":"A/B Testing (Optional)","text":"<ul> <li>Group A: New single message design (50% of users)</li> <li>Group B: Old stacked messages design (50% of users)</li> <li>Duration: 2 weeks</li> <li>Primary Metric: User satisfaction rating</li> <li>Secondary Metrics: Abandonment rate, time to results view</li> </ul>"},{"location":"user-guide/ux/processing-workflow-implementation-guide/#related-files","title":"Related Files","text":"<p>Modified Files: - <code>/workspaces/loan-avengers/loan_avengers/ui/src/pages/application/ApplicationPage.tsx</code> (lines 18, 54-102, 443-475) - <code>/workspaces/loan-avengers/loan_avengers/ui/src/index.css</code> (add animations)</p> <p>Reference Documentation: - UX Design Spec: <code>/workspaces/loan-avengers/docs/ux/processing-workflow-single-message-design.md</code> - User Journey: <code>/workspaces/loan-avengers/docs/ux/processing-workflow-user-journey.md</code></p> <p>Supporting Tools: - Tailwind CSS: https://tailwindcss.com/docs - React Hooks: https://react.dev/reference/react - ARIA Authoring Practices: https://www.w3.org/WAI/ARIA/apg/</p>"},{"location":"user-guide/ux/processing-workflow-implementation-guide/#support-questions","title":"Support &amp; Questions","text":"<p>Need Help?: - Review UX design spec for design rationale - Check user journey doc for user experience context - Consult code-reviewer agent for implementation feedback - Ask ux-ui-designer agent for design clarifications</p> <p>Common Questions:</p> <p>Q: Can I adjust the timing? A: Yes! Update <code>MESSAGE_SEQUENCE</code> timing values. Recommended to keep total workflow between 5-8 seconds.</p> <p>Q: Can I add more agents? A: Yes! Add new entries to <code>MESSAGE_SEQUENCE</code> array. Adjust timing to keep workflow under 10 seconds total.</p> <p>Q: What if animations cause performance issues? A: Use GPU-accelerated properties (transform, opacity). Test with Chrome DevTools Performance profiler.</p> <p>Q: How do I test accessibility? A: Use screen reader (VoiceOver on macOS, NVDA on Windows), run axe-core automated tests, verify ARIA attributes.</p> <p>Implementation Status: Ready for development Next Step: Create GitHub issue and assign to developer</p>"},{"location":"user-guide/ux/processing-workflow-single-message-design/","title":"UX Design: Single Message Processing Workflow","text":"<p>Date: 2025-10-01 Component: ApplicationPage.tsx - Processing Step Designer: UX Designer Agent Status: Design Approved - Ready for Implementation</p>"},{"location":"user-guide/ux/processing-workflow-single-message-design/#executive-summary","title":"Executive Summary","text":"<p>Replace the current stacked multi-message agent cards with a single dynamic message container that smoothly transitions between agent states, providing a cleaner, more focused user experience during loan processing.</p> <p>Key Improvements: - Reduce visual clutter from 4 stacked cards to 1 dynamic container - Add smooth fade transitions between agent messages - Include handoff messaging to explain workflow progression - Maintain clear progress communication throughout 6-second workflow</p>"},{"location":"user-guide/ux/processing-workflow-single-message-design/#user-experience-flow","title":"User Experience Flow","text":""},{"location":"user-guide/ux/processing-workflow-single-message-design/#current-state-problems","title":"Current State Problems","text":"<ol> <li>Visual Clutter: 4 message cards stacking creates overwhelming UI</li> <li>Lost Focus: User attention divided across multiple messages</li> <li>No Handoff Context: Abrupt jumps between agent completions</li> <li>Screen Real Estate: Unnecessary scrolling on smaller screens</li> </ol>"},{"location":"user-guide/ux/processing-workflow-single-message-design/#proposed-solution-benefits","title":"Proposed Solution Benefits","text":"<ol> <li>Single Focus Point: One message container keeps user attention centered</li> <li>Smooth Transitions: Fade animations create polished, professional feel</li> <li>Clear Handoffs: Explicit \"handing over\" messages explain workflow</li> <li>Better Mobile UX: No scrolling, consistent positioning</li> </ol>"},{"location":"user-guide/ux/processing-workflow-single-message-design/#state-machine-design","title":"State Machine Design","text":""},{"location":"user-guide/ux/processing-workflow-single-message-design/#message-states-5-states-per-agent","title":"Message States (5 states per agent)","text":"<pre><code>Agent Workflow Cycle:\n1. PROCESSING \u2192 Agent is actively working\n2. COMPLETE \u2192 Agent finished their analysis\n3. TRANSITION \u2192 \"Handing over to [Next Agent]...\"\n4. FADE_OUT \u2192 Previous message fading out\n5. FADE_IN \u2192 Next agent's message fading in\n</code></pre>"},{"location":"user-guide/ux/processing-workflow-single-message-design/#complete-state-timeline-6-seconds","title":"Complete State Timeline (6 seconds)","text":"<pre><code>Time | Progress | State           | Agent      | Message Type\n-----|----------|-----------------|------------|------------------\n0.0s | 25%      | COMPLETE        | Intake     | Completion message\n0.5s | 25%      | TRANSITION      | Intake     | \"Handing over to Sarah...\"\n1.0s | 25%\u219250%  | FADE_OUT/IN     | Credit     | \"Sarah is analyzing...\"\n2.0s | 50%      | COMPLETE        | Credit     | Completion message\n2.5s | 50%      | TRANSITION      | Credit     | \"Handing over to Marcus...\"\n3.0s | 50%\u219275%  | FADE_OUT/IN     | Income     | \"Marcus is verifying...\"\n4.0s | 75%      | COMPLETE        | Income     | Completion message\n4.5s | 75%      | TRANSITION      | Income     | \"Handing over to Alex...\"\n5.0s | 75%\u2192100% | FADE_OUT/IN     | Risk       | \"Alex is assessing...\"\n6.0s | 100%     | COMPLETE        | Risk       | Final completion message\n</code></pre>"},{"location":"user-guide/ux/processing-workflow-single-message-design/#message-copy-specification","title":"Message Copy Specification","text":""},{"location":"user-guide/ux/processing-workflow-single-message-design/#agent-1-cap-ital-america-intake-agent","title":"Agent 1: Cap-ital America (Intake Agent)","text":"<p>PROCESSING (0.0s - shown immediately when processing starts): <pre><code>\ud83e\uddb8\u200d\u2642\ufe0f Cap-ital America is reviewing your application...\n</code></pre></p> <p>COMPLETE (0.0s - immediately replace PROCESSING): <pre><code>\u2705 Application validated! All information looks great.\n</code></pre></p> <p>TRANSITION (0.5s delay): <pre><code>\ud83e\udd1d Handing over to Sarah for credit analysis...\n</code></pre></p>"},{"location":"user-guide/ux/processing-workflow-single-message-design/#agent-2-sarah-credit-analyst","title":"Agent 2: Sarah (Credit Analyst)","text":"<p>PROCESSING (1.0s - fade in): <pre><code>\ud83e\uddb8\u200d\u2640\ufe0f Sarah is analyzing your credit profile...\n</code></pre></p> <p>COMPLETE (2.0s): <pre><code>\u2705 Credit profile looks strong! Good payment history detected.\n</code></pre></p> <p>TRANSITION (2.5s delay): <pre><code>\ud83e\udd1d Handing over to Marcus for income verification...\n</code></pre></p>"},{"location":"user-guide/ux/processing-workflow-single-message-design/#agent-3-marcus-income-verifier","title":"Agent 3: Marcus (Income Verifier)","text":"<p>PROCESSING (3.0s - fade in): <pre><code>\ud83e\uddb8 Marcus is verifying your income and employment...\n</code></pre></p> <p>COMPLETE (4.0s): <pre><code>\u2705 Income verified! Debt-to-income ratio is healthy.\n</code></pre></p> <p>TRANSITION (4.5s delay): <pre><code>\ud83e\udd1d Handing over to Alex for risk assessment...\n</code></pre></p>"},{"location":"user-guide/ux/processing-workflow-single-message-design/#agent-4-alex-risk-assessor","title":"Agent 4: Alex (Risk Assessor)","text":"<p>PROCESSING (5.0s - fade in): <pre><code>\ud83e\uddb9\u200d\u2642\ufe0f Alex is performing final risk assessment...\n</code></pre></p> <p>COMPLETE (6.0s): <pre><code>\u2705 Risk assessment complete! All metrics look excellent.\n\ud83c\udf89 Your application has been APPROVED!\n</code></pre></p>"},{"location":"user-guide/ux/processing-workflow-single-message-design/#animation-specifications","title":"Animation Specifications","text":""},{"location":"user-guide/ux/processing-workflow-single-message-design/#timing-constants","title":"Timing Constants","text":"<pre><code>const ANIMATION_TIMING = {\n  COMPLETE_DISPLAY: 500,      // How long completion message shows (0.5s)\n  TRANSITION_DISPLAY: 500,    // How long handoff message shows (0.5s)\n  FADE_OUT_DURATION: 200,     // Fade out animation time (0.2s)\n  FADE_IN_DURATION: 300,      // Fade in animation time (0.3s)\n  PROCESSING_MIN_TIME: 1000,  // Minimum time showing \"processing...\" (1s)\n} as const;\n</code></pre>"},{"location":"user-guide/ux/processing-workflow-single-message-design/#css-animation-classes","title":"CSS Animation Classes","text":"<pre><code>/* Fade Out Animation */\n.message-fade-out {\n  animation: fadeOut 200ms ease-out forwards;\n  opacity: 0;\n}\n\n@keyframes fadeOut {\n  from { opacity: 1; transform: translateY(0); }\n  to { opacity: 0; transform: translateY(-10px); }\n}\n\n/* Fade In Animation */\n.message-fade-in {\n  animation: fadeIn 300ms ease-in forwards;\n  opacity: 1;\n}\n\n@keyframes fadeIn {\n  from { opacity: 0; transform: translateY(10px); }\n  to { opacity: 1; transform: translateY(0); }\n}\n\n/* Pulse for Processing State */\n.message-pulse {\n  animation: pulse 2s ease-in-out infinite;\n}\n\n@keyframes pulse {\n  0%, 100% { opacity: 1; }\n  50% { opacity: 0.7; }\n}\n</code></pre>"},{"location":"user-guide/ux/processing-workflow-single-message-design/#transition-behavior","title":"Transition Behavior","text":"<ol> <li>Completion \u2192 Transition: Instant replacement (no animation)</li> <li>Transition \u2192 Processing: Fade out (200ms) \u2192 Fade in (300ms)</li> <li>Processing \u2192 Complete: Instant replacement (no animation)</li> </ol>"},{"location":"user-guide/ux/processing-workflow-single-message-design/#component-structure","title":"Component Structure","text":""},{"location":"user-guide/ux/processing-workflow-single-message-design/#message-container-layout","title":"Message Container Layout","text":"<pre><code>&lt;div className=\"single-message-container\"&gt;\n  {/* Icon Badge */}\n  &lt;div className=\"agent-icon-badge\"&gt;\n    &lt;span className=\"text-2xl\"&gt;{currentMessage.icon}&lt;/span&gt;\n  &lt;/div&gt;\n\n  {/* Message Content */}\n  &lt;div className=\"message-content\"&gt;\n    &lt;p className=\"agent-name\"&gt;{currentMessage.agentName}&lt;/p&gt;\n    &lt;p className=\"message-text\"&gt;{currentMessage.text}&lt;/p&gt;\n  &lt;/div&gt;\n\n  {/* Status Indicator (optional) */}\n  {currentMessage.isProcessing &amp;&amp; (\n    &lt;div className=\"processing-spinner\"&gt;\n      {/* Animated spinner or dots */}\n    &lt;/div&gt;\n  )}\n&lt;/div&gt;\n</code></pre>"},{"location":"user-guide/ux/processing-workflow-single-message-design/#visual-styling","title":"Visual Styling","text":"<pre><code>// Container (replaces lines 444-475 in ApplicationPage.tsx)\n&lt;div className=\"mt-10\"&gt;\n  &lt;h3 className=\"text-lg font-semibold text-center mb-4\"&gt;\n    &lt;span className=\"bg-gradient-to-r from-brand-600 via-accent-600 to-brand-500 bg-clip-text text-transparent\"&gt;\n      \ud83d\udcac What Your AI Team Says\n    &lt;/span&gt;\n  &lt;/h3&gt;\n\n  {/* Single Message Container */}\n  &lt;div\n    className={`\n      bg-gradient-to-r from-gray-50 to-blue-50\n      dark:from-dark-bg-tertiary dark:to-dark-bg-card\n      rounded-lg p-6 border border-gray-200\n      dark:border-gray-700 shadow-md\n      min-h-[120px] flex items-center\n      transition-all duration-300\n      ${animationClass}\n    `}\n  &gt;\n    &lt;div className=\"flex items-start space-x-4 w-full\"&gt;\n      {/* Agent Icon */}\n      &lt;div className=\"w-12 h-12 bg-gradient-to-br from-brand-500 to-brand-600 rounded-full flex items-center justify-center flex-shrink-0\"&gt;\n        &lt;span className=\"text-2xl\"&gt;{currentMessage.icon}&lt;/span&gt;\n      &lt;/div&gt;\n\n      {/* Message Content */}\n      &lt;div className=\"flex-1\"&gt;\n        &lt;p className=\"font-semibold text-gray-900 dark:text-dark-text-primary text-sm mb-2\"&gt;\n          {currentMessage.agentName}\n        &lt;/p&gt;\n        &lt;p className=\"text-gray-700 dark:text-dark-text-secondary text-base leading-relaxed\"&gt;\n          {currentMessage.text}\n        &lt;/p&gt;\n      &lt;/div&gt;\n\n      {/* Processing Indicator (show only during PROCESSING state) */}\n      {currentMessage.state === 'PROCESSING' &amp;&amp; (\n        &lt;div className=\"flex space-x-1\"&gt;\n          &lt;div className=\"w-2 h-2 bg-brand-500 rounded-full animate-bounce\"&gt;&lt;/div&gt;\n          &lt;div className=\"w-2 h-2 bg-brand-500 rounded-full animate-bounce delay-100\"&gt;&lt;/div&gt;\n          &lt;div className=\"w-2 h-2 bg-brand-500 rounded-full animate-bounce delay-200\"&gt;&lt;/div&gt;\n        &lt;/div&gt;\n      )}\n    &lt;/div&gt;\n  &lt;/div&gt;\n&lt;/div&gt;\n</code></pre>"},{"location":"user-guide/ux/processing-workflow-single-message-design/#state-management-pattern","title":"State Management Pattern","text":""},{"location":"user-guide/ux/processing-workflow-single-message-design/#message-state-type","title":"Message State Type","text":"<pre><code>interface AgentMessage {\n  agentName: string;\n  icon: string;\n  text: string;\n  state: 'PROCESSING' | 'COMPLETE' | 'TRANSITION';\n  progress: number;\n}\n\ninterface MessageSequence {\n  id: string;\n  agentName: string;\n  icon: string;\n  processingText: string;\n  completeText: string;\n  transitionText?: string; // For all except last agent\n  progressStart: number;\n  progressEnd: number;\n  timing: {\n    processingDelay: number;\n    completeDuration: number;\n    transitionDuration: number;\n  };\n}\n</code></pre>"},{"location":"user-guide/ux/processing-workflow-single-message-design/#react-state-implementation","title":"React State Implementation","text":"<pre><code>const [currentMessage, setCurrentMessage] = useState&lt;AgentMessage&gt;({\n  agentName: 'Cap-ital America',\n  icon: '\ud83e\uddb8\u200d\u2642\ufe0f',\n  text: 'Application received and validated. All information looks great.',\n  state: 'COMPLETE',\n  progress: 25\n});\n\nconst [animationClass, setAnimationClass] = useState&lt;string&gt;('');\n</code></pre>"},{"location":"user-guide/ux/processing-workflow-single-message-design/#message-sequence-configuration","title":"Message Sequence Configuration","text":"<pre><code>const MESSAGE_SEQUENCE: MessageSequence[] = [\n  {\n    id: 'intake',\n    agentName: 'Cap-ital America',\n    icon: '\ud83e\uddb8\u200d\u2642\ufe0f',\n    processingText: 'Cap-ital America is reviewing your application...',\n    completeText: '\u2705 Application validated! All information looks great.',\n    transitionText: '\ud83e\udd1d Handing over to Sarah for credit analysis...',\n    progressStart: 0,\n    progressEnd: 25,\n    timing: {\n      processingDelay: 0,        // Show immediately\n      completeDuration: 500,     // Show completion for 0.5s\n      transitionDuration: 500    // Show transition for 0.5s\n    }\n  },\n  {\n    id: 'credit',\n    agentName: 'Sarah (Credit Analyst)',\n    icon: '\ud83e\uddb8\u200d\u2640\ufe0f',\n    processingText: 'Sarah is analyzing your credit profile...',\n    completeText: '\u2705 Credit profile looks strong! Good payment history detected.',\n    transitionText: '\ud83e\udd1d Handing over to Marcus for income verification...',\n    progressStart: 25,\n    progressEnd: 50,\n    timing: {\n      processingDelay: 1000,     // Start after 1s\n      completeDuration: 500,\n      transitionDuration: 500\n    }\n  },\n  {\n    id: 'income',\n    agentName: 'Marcus (Income Verifier)',\n    icon: '\ud83e\uddb8',\n    processingText: 'Marcus is verifying your income and employment...',\n    completeText: '\u2705 Income verified! Debt-to-income ratio is healthy.',\n    transitionText: '\ud83e\udd1d Handing over to Alex for risk assessment...',\n    progressStart: 50,\n    progressEnd: 75,\n    timing: {\n      processingDelay: 3000,     // Start after 3s\n      completeDuration: 500,\n      transitionDuration: 500\n    }\n  },\n  {\n    id: 'risk',\n    agentName: 'Alex (Risk Assessor)',\n    icon: '\ud83e\uddb9\u200d\u2642\ufe0f',\n    processingText: 'Alex is performing final risk assessment...',\n    completeText: '\u2705 Risk assessment complete! All metrics look excellent.\\n\ud83c\udf89 Your application has been APPROVED!',\n    transitionText: undefined,  // No transition - this is the final agent\n    progressStart: 75,\n    progressEnd: 100,\n    timing: {\n      processingDelay: 5000,     // Start after 5s\n      completeDuration: 2000,    // Show final message longer (2s)\n      transitionDuration: 0\n    }\n  }\n];\n</code></pre>"},{"location":"user-guide/ux/processing-workflow-single-message-design/#useeffect-logic","title":"useEffect Logic","text":"<pre><code>useEffect(() =&gt; {\n  if (currentStep !== 'processing') {\n    return;\n  }\n\n  const timers: NodeJS.Timeout[] = [];\n  let cumulativeDelay = 0;\n\n  MESSAGE_SEQUENCE.forEach((sequence, index) =&gt; {\n    // 1. Show PROCESSING state\n    timers.push(setTimeout(() =&gt; {\n      setAnimationClass('message-fade-in');\n      setCurrentMessage({\n        agentName: sequence.agentName,\n        icon: sequence.icon,\n        text: sequence.processingText,\n        state: 'PROCESSING',\n        progress: sequence.progressStart\n      });\n      setProcessingProgress(sequence.progressStart);\n\n      // Remove animation class after animation completes\n      setTimeout(() =&gt; setAnimationClass(''), 300);\n    }, sequence.timing.processingDelay));\n\n    cumulativeDelay = sequence.timing.processingDelay + sequence.timing.completeDuration;\n\n    // 2. Show COMPLETE state (after processing finishes)\n    timers.push(setTimeout(() =&gt; {\n      setCurrentMessage({\n        agentName: sequence.agentName,\n        icon: sequence.icon,\n        text: sequence.completeText,\n        state: 'COMPLETE',\n        progress: sequence.progressEnd\n      });\n      setProcessingProgress(sequence.progressEnd);\n    }, cumulativeDelay));\n\n    // 3. Show TRANSITION state (if not last agent)\n    if (sequence.transitionText &amp;&amp; index &lt; MESSAGE_SEQUENCE.length - 1) {\n      cumulativeDelay += sequence.timing.completeDuration;\n\n      timers.push(setTimeout(() =&gt; {\n        setCurrentMessage({\n          agentName: sequence.agentName,\n          icon: '\ud83e\udd1d',\n          text: sequence.transitionText!,\n          state: 'TRANSITION',\n          progress: sequence.progressEnd\n        });\n      }, cumulativeDelay));\n\n      // 4. Trigger fade-out before next agent\n      cumulativeDelay += sequence.timing.transitionDuration - 200; // Start fade 200ms before next\n\n      timers.push(setTimeout(() =&gt; {\n        setAnimationClass('message-fade-out');\n      }, cumulativeDelay));\n    }\n  });\n\n  return () =&gt; timers.forEach(clearTimeout);\n}, [currentStep]);\n</code></pre>"},{"location":"user-guide/ux/processing-workflow-single-message-design/#accessibility-implementation","title":"Accessibility Implementation","text":""},{"location":"user-guide/ux/processing-workflow-single-message-design/#aria-live-regions","title":"ARIA Live Regions","text":"<pre><code>&lt;div\n  role=\"status\"\n  aria-live=\"polite\"\n  aria-atomic=\"true\"\n  className=\"single-message-container\"\n&gt;\n  {/* Message content */}\n&lt;/div&gt;\n</code></pre> <p>Why <code>aria-live=\"polite\"</code>: - Updates announced by screen readers when user is idle - Doesn't interrupt current reading - Appropriate for progress updates that aren't critical alerts</p> <p>Why <code>aria-atomic=\"true\"</code>: - Screen reader reads entire message on each update - Prevents partial/confusing updates - User gets complete context every time</p>"},{"location":"user-guide/ux/processing-workflow-single-message-design/#screen-reader-announcements","title":"Screen Reader Announcements","text":"<pre><code>// Enhanced message with screen reader text\ninterface AccessibleMessage extends AgentMessage {\n  ariaLabel: string; // Full context for screen readers\n}\n\n// Example implementation\nconst accessibleMessage: AccessibleMessage = {\n  agentName: 'Sarah (Credit Analyst)',\n  icon: '\ud83e\uddb8\u200d\u2640\ufe0f',\n  text: 'Credit profile looks strong! Good payment history detected.',\n  state: 'COMPLETE',\n  progress: 50,\n  ariaLabel: 'Credit analysis complete. Sarah says: Credit profile looks strong! Good payment history detected. Progress: 50 percent complete.'\n};\n</code></pre>"},{"location":"user-guide/ux/processing-workflow-single-message-design/#keyboard-navigation","title":"Keyboard Navigation","text":"<pre><code>{/* Ensure container is not focusable (it's status only, not interactive) */}\n&lt;div\n  className=\"single-message-container\"\n  role=\"status\"\n  aria-live=\"polite\"\n  tabIndex={-1}\n&gt;\n  {/* Content */}\n&lt;/div&gt;\n</code></pre>"},{"location":"user-guide/ux/processing-workflow-single-message-design/#reduced-motion-support","title":"Reduced Motion Support","text":"<pre><code>/* Respect user's motion preferences */\n@media (prefers-reduced-motion: reduce) {\n  .message-fade-out,\n  .message-fade-in {\n    animation: none;\n    transition: opacity 0ms;\n  }\n\n  .message-pulse {\n    animation: none;\n  }\n}\n</code></pre>"},{"location":"user-guide/ux/processing-workflow-single-message-design/#color-contrast-compliance","title":"Color Contrast Compliance","text":"<p>WCAG AA Compliance: - Text color: <code>text-gray-900</code> (contrast ratio &gt; 7:1 on white background) - Agent name: <code>text-gray-900 font-semibold</code> (enhanced contrast) - Icon background: Sufficient contrast with icon emoji - Border: Visible in both light and dark modes</p>"},{"location":"user-guide/ux/processing-workflow-single-message-design/#mobile-responsiveness","title":"Mobile Responsiveness","text":""},{"location":"user-guide/ux/processing-workflow-single-message-design/#container-sizing","title":"Container Sizing","text":"<pre><code>{/* Responsive container with min-height for content stability */}\n&lt;div className=\"\n  min-h-[100px] sm:min-h-[120px]\n  p-4 sm:p-6\n  rounded-lg\n\"&gt;\n  {/* Content */}\n&lt;/div&gt;\n</code></pre>"},{"location":"user-guide/ux/processing-workflow-single-message-design/#icon-sizing","title":"Icon Sizing","text":"<pre><code>{/* Responsive icon sizing */}\n&lt;div className=\"\n  w-10 h-10 sm:w-12 sm:h-12\n  rounded-full\n  flex items-center justify-center\n\"&gt;\n  &lt;span className=\"text-xl sm:text-2xl\"&gt;\n    {currentMessage.icon}\n  &lt;/span&gt;\n&lt;/div&gt;\n</code></pre>"},{"location":"user-guide/ux/processing-workflow-single-message-design/#text-sizing","title":"Text Sizing","text":"<pre><code>{/* Responsive text sizing */}\n&lt;p className=\"\n  text-sm sm:text-base\n  leading-relaxed\n\"&gt;\n  {currentMessage.text}\n&lt;/p&gt;\n</code></pre>"},{"location":"user-guide/ux/processing-workflow-single-message-design/#testing-checklist","title":"Testing Checklist","text":""},{"location":"user-guide/ux/processing-workflow-single-message-design/#visual-testing","title":"Visual Testing","text":"<ul> <li> Message transitions smoothly between states</li> <li> No visual \"jump\" or layout shift during transitions</li> <li> Icons display correctly in all states</li> <li> Dark mode renders properly</li> <li> Mobile layout doesn't overflow or wrap awkwardly</li> </ul>"},{"location":"user-guide/ux/processing-workflow-single-message-design/#timing-testing","title":"Timing Testing","text":"<ul> <li> PROCESSING state shows for minimum 1 second</li> <li> COMPLETE state displays for 0.5 seconds</li> <li> TRANSITION message visible for 0.5 seconds</li> <li> Total workflow completes in ~6 seconds</li> <li> Progress bar syncs with message updates</li> </ul>"},{"location":"user-guide/ux/processing-workflow-single-message-design/#accessibility-testing","title":"Accessibility Testing","text":"<ul> <li> Screen reader announces each message update</li> <li> Full message context provided (not just partial updates)</li> <li> No interruption during user interaction</li> <li> Reduced motion preference respected</li> <li> Color contrast meets WCAG AA standards</li> </ul>"},{"location":"user-guide/ux/processing-workflow-single-message-design/#edge-case-testing","title":"Edge Case Testing","text":"<ul> <li> Rapid navigation away during processing</li> <li> Browser tab backgrounded during workflow</li> <li> Network interruption during processing</li> <li> Multiple rapid clicks on \"Submit Application\"</li> </ul>"},{"location":"user-guide/ux/processing-workflow-single-message-design/#performance-considerations","title":"Performance Considerations","text":""},{"location":"user-guide/ux/processing-workflow-single-message-design/#memory-management","title":"Memory Management","text":"<pre><code>// Always cleanup timers in useEffect return\nuseEffect(() =&gt; {\n  const timers: NodeJS.Timeout[] = [];\n\n  // ... setup timers ...\n\n  return () =&gt; {\n    timers.forEach(clearTimeout); // Prevent memory leaks\n  };\n}, [currentStep]);\n</code></pre>"},{"location":"user-guide/ux/processing-workflow-single-message-design/#animation-performance","title":"Animation Performance","text":"<pre><code>/* Use transform and opacity for GPU acceleration */\n@keyframes fadeIn {\n  from {\n    opacity: 0;\n    transform: translateY(10px); /* GPU-accelerated */\n  }\n  to {\n    opacity: 1;\n    transform: translateY(0);\n  }\n}\n\n/* Avoid animating layout properties like height, width, margin */\n</code></pre>"},{"location":"user-guide/ux/processing-workflow-single-message-design/#render-optimization","title":"Render Optimization","text":"<pre><code>// Memoize message sequence to prevent recalculation\nconst messageSequence = useMemo(() =&gt; MESSAGE_SEQUENCE, []);\n\n// Only update DOM when message actually changes\nconst messageKey = `${currentMessage.agentName}-${currentMessage.state}`;\n</code></pre>"},{"location":"user-guide/ux/processing-workflow-single-message-design/#implementation-roadmap","title":"Implementation Roadmap","text":""},{"location":"user-guide/ux/processing-workflow-single-message-design/#phase-1-core-implementation-est-2-3-hours","title":"Phase 1: Core Implementation (Est. 2-3 hours)","text":"<ol> <li>Create message sequence configuration</li> <li>Implement state machine in useEffect</li> <li>Add basic fade animations</li> <li>Update component structure</li> </ol>"},{"location":"user-guide/ux/processing-workflow-single-message-design/#phase-2-polish-accessibility-est-1-2-hours","title":"Phase 2: Polish &amp; Accessibility (Est. 1-2 hours)","text":"<ol> <li>Add ARIA attributes</li> <li>Implement screen reader support</li> <li>Add reduced motion support</li> <li>Test keyboard navigation</li> </ol>"},{"location":"user-guide/ux/processing-workflow-single-message-design/#phase-3-testing-refinement-est-1-hour","title":"Phase 3: Testing &amp; Refinement (Est. 1 hour)","text":"<ol> <li>Cross-browser testing</li> <li>Mobile responsiveness validation</li> <li>Accessibility audit with screen reader</li> <li>Performance profiling</li> </ol> <p>Total Estimated Time: 4-6 hours</p>"},{"location":"user-guide/ux/processing-workflow-single-message-design/#success-metrics","title":"Success Metrics","text":""},{"location":"user-guide/ux/processing-workflow-single-message-design/#user-experience","title":"User Experience","text":"<ul> <li>Reduced cognitive load: Single message vs. 4 stacked cards</li> <li>Improved comprehension: Clear handoff messages explain workflow</li> <li>Better engagement: Smooth animations feel more polished</li> </ul>"},{"location":"user-guide/ux/processing-workflow-single-message-design/#technical","title":"Technical","text":"<ul> <li>Performance: No frame drops during animations (&lt;16ms per frame)</li> <li>Accessibility: WCAG AA compliance (color contrast, screen reader support)</li> <li>Mobile: No layout shifts on devices 320px-1920px wide</li> </ul>"},{"location":"user-guide/ux/processing-workflow-single-message-design/#business","title":"Business","text":"<ul> <li>Reduced abandonment: Cleaner UI keeps users engaged during processing</li> <li>Increased trust: Professional animations convey reliability</li> <li>Better conversion: Clear progress communication reduces anxiety</li> </ul>"},{"location":"user-guide/ux/processing-workflow-single-message-design/#related-documentation","title":"Related Documentation","text":"<ul> <li>Current Implementation: <code>/workspaces/loan-avengers/loan_avengers/ui/src/pages/application/ApplicationPage.tsx</code> (lines 443-475)</li> <li>Type Definitions: <code>/workspaces/loan-avengers/loan_avengers/ui/src/types/index.ts</code></li> <li>Animation Patterns: See Tailwind CSS utilities in existing codebase</li> </ul>"},{"location":"user-guide/ux/processing-workflow-single-message-design/#approval-sign-off","title":"Approval &amp; Sign-off","text":"<p>UX Designer: Approved - Design ready for implementation Responsible AI Agent: Pending - Accessibility review needed Code Reviewer Agent: Pending - Implementation review after coding complete</p> <p>Next Steps: Share with Product Manager agent for business alignment validation, then proceed with implementation.</p>"},{"location":"user-guide/ux/processing-workflow-user-journey/","title":"User Journey: Loan Processing Workflow Experience","text":"<p>Feature: Single Message Processing Workflow Date: 2025-10-01 User Persona: First-time loan applicant Goal: Understand loan processing status without confusion or anxiety</p>"},{"location":"user-guide/ux/processing-workflow-user-journey/#user-persona","title":"User Persona","text":"<p>Name: Jessica Martinez Age: 32 Role: Small business owner applying for first business loan Tech Savvy: Moderate (comfortable with apps, but not a developer) Context: Just finished conversation with Cap-ital America, clicked \"Submit Application\" Device: iPhone 13 (mobile-first user) Emotional State: Nervous but hopeful about loan approval</p> <p>Accessibility Needs: - Uses larger text size (iOS accessibility setting) - Prefers clear, simple language - Appreciates visual progress indicators</p> <p>Pain Points with Current Design: - \"Four messages stacking up feels overwhelming\" - \"I can't tell which agent is working RIGHT NOW\" - \"Do I need to read all four messages or just the latest?\" - \"On my phone, I have to scroll to see everything\"</p>"},{"location":"user-guide/ux/processing-workflow-user-journey/#current-state-journey-before-redesign","title":"Current State Journey (BEFORE Redesign)","text":""},{"location":"user-guide/ux/processing-workflow-user-journey/#step-1-application-submission-0s","title":"Step 1: Application Submission (0s)","text":"<p>User Action: Clicks \"Submit Application\" button System Response: Page transitions to \"Processing Your Application\" User Emotion: \ud83d\ude0a Excited, expectant</p> <p>What User Sees: - Large heading \"Your AI Team is Working Their Magic!\" - 4-stage workflow progress bar (Intake \u2192 Credit \u2192 Income \u2192 Risk) - Empty message area below workflow</p> <p>User Thought: \"Okay, here we go! I wonder how long this takes...\"</p>"},{"location":"user-guide/ux/processing-workflow-user-journey/#step-2-first-message-appears-0s","title":"Step 2: First Message Appears (0s)","text":"<p>System Response: Cap-ital America message card appears User Emotion: \ud83d\ude0a Reassured</p> <p>What User Sees: <pre><code>\u250c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2510\n\u2502 \ud83e\uddb8\u200d\u2642\ufe0f Cap-ital America                    \u2502\n\u2502 Application received and validated.    \u2502\n\u2502 All required information is present.   \u2502\n\u2502 Passing to specialized agents...       \u2502\n\u2514\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2518\n</code></pre></p> <p>User Thought: \"Good, they got my application. What happens next?\"</p> <p>Pain Point: \u274c User doesn't know if this is done or still processing</p>"},{"location":"user-guide/ux/processing-workflow-user-journey/#step-3-second-message-appears-2s","title":"Step 3: Second Message Appears (2s)","text":"<p>System Response: Sarah's message card appears BELOW Cap-ital America's User Emotion: \ud83d\ude10 Slightly confused</p> <p>What User Sees: <pre><code>\u250c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2510\n\u2502 \ud83e\uddb8\u200d\u2642\ufe0f Cap-ital America                    \u2502\n\u2502 Application received and validated...  \u2502\n\u2514\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2518\n\n\u250c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2510\n\u2502 \ud83e\uddb8\u200d\u2640\ufe0f Sarah (Credit Analyst)              \u2502\n\u2502 Credit profile looks strong!           \u2502\n\u2502 Good payment history detected.         \u2502\n\u2514\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2518\n</code></pre></p> <p>User Thought: \"Wait, do I need to keep reading the first message? Is Sarah done or still working?\"</p> <p>Pain Point: \u274c User confused about which message to focus on</p>"},{"location":"user-guide/ux/processing-workflow-user-journey/#step-4-third-message-appears-4s","title":"Step 4: Third Message Appears (4s)","text":"<p>System Response: Marcus's message card appears, pushing others up User Emotion: \ud83d\ude15 Confused and overwhelmed</p> <p>What User Sees (on mobile - requires scrolling): <pre><code>[Scroll up to see]\n\u250c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2510\n\u2502 \ud83e\uddb8\u200d\u2642\ufe0f Cap-ital America                    \u2502\n\u2502 Application received and validated...  \u2502\n\u2514\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2518\n\n\u250c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2510\n\u2502 \ud83e\uddb8\u200d\u2640\ufe0f Sarah (Credit Analyst)              \u2502\n\u2502 Credit profile looks strong!           \u2502\n\u2514\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2518\n\n\u250c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2510 \u2190 Visible on screen\n\u2502 \ud83e\uddb8 Marcus (Income Verifier)             \u2502\n\u2502 Income verified successfully.          \u2502\n\u2502 Debt-to-income ratio is healthy.       \u2502\n\u2514\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2518\n</code></pre></p> <p>User Thought: \"There are three messages now? Should I scroll up to read them all? I'm losing track...\"</p> <p>Pain Point: \u274c Visual clutter causes confusion and anxiety</p>"},{"location":"user-guide/ux/processing-workflow-user-journey/#step-5-fourth-message-appears-6s","title":"Step 5: Fourth Message Appears (6s)","text":"<p>System Response: Alex's message appears, all 4 cards now visible User Emotion: \ud83d\ude2b Overwhelmed</p> <p>What User Sees (mobile - definitely requires scrolling): <pre><code>[Scroll up to see first 2 messages]\n\n\u250c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2510\n\u2502 \ud83e\uddb8 Marcus (Income Verifier)             \u2502\n\u2502 Income verified successfully...        \u2502\n\u2514\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2518\n\n\u250c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2510 \u2190 Visible\n\u2502 \ud83e\uddb9\u200d\u2642\ufe0f Alex (Risk Assessor)                \u2502\n\u2502 Overall risk assessment complete.      \u2502\n\u2502 All metrics within acceptable params.  \u2502\n\u2502 Recommendation: APPROVED!              \u2502\n\u2514\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2518\n\n[View Your Results] Button appears\n</code></pre></p> <p>User Thought: \"Finally done! But wait, do I need to review all those messages? Let me click 'View Results'...\"</p> <p>Drop-off Risk: \u26a0\ufe0f User might miss important information buried in earlier messages</p>"},{"location":"user-guide/ux/processing-workflow-user-journey/#future-state-journey-after-redesign","title":"Future State Journey (AFTER Redesign)","text":""},{"location":"user-guide/ux/processing-workflow-user-journey/#step-1-application-submission-0s_1","title":"Step 1: Application Submission (0s)","text":"<p>User Action: Clicks \"Submit Application\" button System Response: Page transitions to \"Processing Your Application\" User Emotion: \ud83d\ude0a Excited, expectant</p> <p>What User Sees: Same as before - no change to initial state</p>"},{"location":"user-guide/ux/processing-workflow-user-journey/#step-2-processing-starts-0s","title":"Step 2: Processing Starts (0s)","text":"<p>System Response: Single message container appears with Cap-ital America User Emotion: \ud83d\ude0a Focused and reassured</p> <p>What User Sees: <pre><code>\u250c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2510\n\u2502 \ud83e\uddb8\u200d\u2642\ufe0f Cap-ital America                    \u2502\n\u2502 \u2705 Application validated!               \u2502\n\u2502 All information looks great.           \u2502\n\u2514\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2518\n</code></pre></p> <p>User Thought: \"Great! Cap-ital America finished checking my application.\"</p> <p>Improvement: \u2705 Clear checkmark shows completion Improvement: \u2705 Single focus point - no distraction</p>"},{"location":"user-guide/ux/processing-workflow-user-journey/#step-3-handoff-message-05s","title":"Step 3: Handoff Message (0.5s)","text":"<p>System Response: Message updates IN PLACE (same container) User Emotion: \ud83d\ude0a Informed about next step</p> <p>What User Sees: <pre><code>\u250c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2510\n\u2502 \ud83e\udd1d Cap-ital America                     \u2502\n\u2502 Handing over to Sarah for credit       \u2502\n\u2502 analysis...                            \u2502\n\u2514\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2518\n</code></pre></p> <p>User Thought: \"Oh, Sarah is next. They're working together on this.\"</p> <p>Improvement: \u2705 Explicit handoff explains workflow progression Improvement: \u2705 No new cards - just updated content</p>"},{"location":"user-guide/ux/processing-workflow-user-journey/#step-4-credit-analysis-starts-1s","title":"Step 4: Credit Analysis Starts (1s)","text":"<p>System Response: Message fades out, new message fades in User Emotion: \ud83d\ude0a Engaged by smooth transition</p> <p>What User Sees (with smooth fade transition): <pre><code>[Fade out] \ud83e\udd1d Handing over to Sarah...\n\n[Fade in]\n\u250c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2510\n\u2502 \ud83e\uddb8\u200d\u2640\ufe0f Sarah (Credit Analyst)              \u2502\n\u2502 Sarah is analyzing your credit         \u2502\n\u2502 profile... \u2022 \u2022 \u2022                       \u2502\n\u2514\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2518\n</code></pre></p> <p>User Thought: \"Sarah is working on it now. I can see the animated dots showing she's processing.\"</p> <p>Improvement: \u2705 Processing dots show active work Improvement: \u2705 Smooth animation feels professional Improvement: \u2705 Same container location - no scrolling</p>"},{"location":"user-guide/ux/processing-workflow-user-journey/#step-5-credit-analysis-complete-2s","title":"Step 5: Credit Analysis Complete (2s)","text":"<p>System Response: Message updates to show completion User Emotion: \ud83d\ude0a Reassured by positive result</p> <p>What User Sees: <pre><code>\u250c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2510\n\u2502 \ud83e\uddb8\u200d\u2640\ufe0f Sarah (Credit Analyst)              \u2502\n\u2502 \u2705 Credit profile looks strong!         \u2502\n\u2502 Good payment history detected.         \u2502\n\u2514\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2518\n</code></pre></p> <p>User Thought: \"My credit looks good! That's a relief.\"</p> <p>Improvement: \u2705 Instant update - no stacking Improvement: \u2705 Checkmark confirms completion</p>"},{"location":"user-guide/ux/processing-workflow-user-journey/#step-6-handoff-to-marcus-25s","title":"Step 6: Handoff to Marcus (2.5s)","text":"<p>System Response: Handoff message appears User Emotion: \ud83d\ude0a Understanding workflow progression</p> <p>What User Sees: <pre><code>\u250c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2510\n\u2502 \ud83e\udd1d Sarah (Credit Analyst)               \u2502\n\u2502 Handing over to Marcus for income      \u2502\n\u2502 verification...                        \u2502\n\u2514\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2518\n</code></pre></p> <p>User Thought: \"Marcus is next. This is moving along smoothly.\"</p> <p>Improvement: \u2705 Clear explanation of what's happening next</p>"},{"location":"user-guide/ux/processing-workflow-user-journey/#step-7-income-verification-3s-4s","title":"Step 7: Income Verification (3s - 4s)","text":"<p>System Response: Fade transition \u2192 Processing \u2192 Complete User Emotion: \ud83d\ude0a Confident in the process</p> <p>What User Sees (sequence): <pre><code>[Fade transition]\n\n\u250c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2510\n\u2502 \ud83e\uddb8 Marcus (Income Verifier)             \u2502\n\u2502 Marcus is verifying your income and    \u2502\n\u2502 employment... \u2022 \u2022 \u2022                    \u2502\n\u2514\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2518\n\n[After 1 second]\n\n\u250c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2510\n\u2502 \ud83e\uddb8 Marcus (Income Verifier)             \u2502\n\u2502 \u2705 Income verified!                     \u2502\n\u2502 Debt-to-income ratio is healthy.       \u2502\n\u2514\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2518\n</code></pre></p> <p>User Thought: \"Two down, income verified. This is going well!\"</p> <p>Improvement: \u2705 Consistent pattern builds trust Improvement: \u2705 User knows what to expect</p>"},{"location":"user-guide/ux/processing-workflow-user-journey/#step-8-final-risk-assessment-5s-6s","title":"Step 8: Final Risk Assessment (5s - 6s)","text":"<p>System Response: Handoff \u2192 Processing \u2192 Final approval User Emotion: \ud83d\ude01 Excited about final result</p> <p>What User Sees (sequence): <pre><code>[Handoff]\n\u250c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2510\n\u2502 \ud83e\udd1d Marcus (Income Verifier)             \u2502\n\u2502 Handing over to Alex for risk          \u2502\n\u2502 assessment...                          \u2502\n\u2514\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2518\n\n[Processing]\n\u250c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2510\n\u2502 \ud83e\uddb9\u200d\u2642\ufe0f Alex (Risk Assessor)                \u2502\n\u2502 Alex is performing final risk          \u2502\n\u2502 assessment... \u2022 \u2022 \u2022                    \u2502\n\u2514\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2518\n\n[Final Result]\n\u250c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2510\n\u2502 \ud83e\uddb9\u200d\u2642\ufe0f Alex (Risk Assessor)                \u2502\n\u2502 \u2705 Risk assessment complete!            \u2502\n\u2502 All metrics look excellent.            \u2502\n\u2502 \ud83c\udf89 Your application has been APPROVED! \u2502\n\u2514\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2518\n</code></pre></p> <p>User Thought: \"YES! I got approved! That was so smooth and easy to follow.\"</p> <p>Improvement: \u2705 Celebration emoji adds emotional payoff Improvement: \u2705 Clear final status Improvement: \u2705 No scrolling needed to see result</p>"},{"location":"user-guide/ux/processing-workflow-user-journey/#emotional-journey-comparison","title":"Emotional Journey Comparison","text":""},{"location":"user-guide/ux/processing-workflow-user-journey/#current-design-stacked-messages","title":"Current Design (Stacked Messages)","text":"<pre><code>\ud83d\ude0a Excited \u2192 \ud83d\ude10 Confused \u2192 \ud83d\ude15 Overwhelmed \u2192 \ud83d\ude2b Anxious \u2192 \ud83d\ude10 Relieved\n   (0s)        (2s)         (4s)           (6s)       (result)\n\nAnxiety Peak: When 3rd and 4th messages appear and user has to scroll\n</code></pre>"},{"location":"user-guide/ux/processing-workflow-user-journey/#proposed-design-single-message","title":"Proposed Design (Single Message)","text":"<pre><code>\ud83d\ude0a Excited \u2192 \ud83d\ude0a Engaged \u2192 \ud83d\ude0a Confident \u2192 \ud83d\ude0a Trusting \u2192 \ud83d\ude01 Delighted\n   (0s)        (2s)        (4s)          (6s)         (result)\n\nTrust Build: Consistent pattern and smooth transitions build confidence\n</code></pre>"},{"location":"user-guide/ux/processing-workflow-user-journey/#key-improvements-summary","title":"Key Improvements Summary","text":""},{"location":"user-guide/ux/processing-workflow-user-journey/#reduced-cognitive-load","title":"Reduced Cognitive Load","text":"<p>Before: User must track 4 separate messages, unclear which is current After: User focuses on 1 message that updates in real-time</p>"},{"location":"user-guide/ux/processing-workflow-user-journey/#clear-workflow-understanding","title":"Clear Workflow Understanding","text":"<p>Before: Abrupt jumps between agents, no explanation After: Explicit \"handing over\" messages explain transitions</p>"},{"location":"user-guide/ux/processing-workflow-user-journey/#better-mobile-experience","title":"Better Mobile Experience","text":"<p>Before: Requires scrolling, messages push content down After: Single container stays in same position, no scrolling</p>"},{"location":"user-guide/ux/processing-workflow-user-journey/#professional-polish","title":"Professional Polish","text":"<p>Before: Cards popping in feels disconnected After: Smooth fades create cohesive, premium experience</p>"},{"location":"user-guide/ux/processing-workflow-user-journey/#accessibility-benefits","title":"Accessibility Benefits","text":"<p>Before: Screen reader announces 4 separate messages in quick succession After: Screen reader announces clear sequence with handoff context</p>"},{"location":"user-guide/ux/processing-workflow-user-journey/#success-metrics","title":"Success Metrics","text":""},{"location":"user-guide/ux/processing-workflow-user-journey/#user-comprehension","title":"User Comprehension","text":"<ul> <li>Target: 95% of users understand which agent is currently working</li> <li>Measurement: Post-processing survey \"Did you understand which agent was processing your application at each step?\"</li> </ul>"},{"location":"user-guide/ux/processing-workflow-user-journey/#user-satisfaction","title":"User Satisfaction","text":"<ul> <li>Target: 4.5/5 rating on \"How clear was the processing workflow?\"</li> <li>Measurement: In-app rating after viewing results</li> </ul>"},{"location":"user-guide/ux/processing-workflow-user-journey/#mobile-engagement","title":"Mobile Engagement","text":"<ul> <li>Target: 0% scroll requirement during processing</li> <li>Measurement: Analytics tracking scroll events during processing step</li> </ul>"},{"location":"user-guide/ux/processing-workflow-user-journey/#accessibility","title":"Accessibility","text":"<ul> <li>Target: 100% WCAG AA compliance</li> <li>Measurement: Automated accessibility audit + manual screen reader testing</li> </ul>"},{"location":"user-guide/ux/processing-workflow-user-journey/#performance","title":"Performance","text":"<ul> <li>Target: No frame drops during transitions (&lt;16ms per frame)</li> <li>Measurement: Chrome DevTools Performance profiling</li> </ul>"},{"location":"user-guide/ux/processing-workflow-user-journey/#user-testing-plan","title":"User Testing Plan","text":""},{"location":"user-guide/ux/processing-workflow-user-journey/#moderated-testing-5-users","title":"Moderated Testing (5 users)","text":"<ol> <li>Watch users go through processing workflow</li> <li>Ask comprehension questions:</li> <li>\"Which agent just finished working?\"</li> <li>\"What's happening now?\"</li> <li>\"Do you feel informed about the process?\"</li> <li>Collect emotional feedback:</li> <li>\"How did you feel waiting for your results?\"</li> <li>\"Was anything confusing or frustrating?\"</li> </ol>"},{"location":"user-guide/ux/processing-workflow-user-journey/#ab-testing-production","title":"A/B Testing (Production)","text":"<ul> <li>Group A: Current stacked message design</li> <li>Group B: New single message design</li> <li>Metrics: Time to \"View Results\" click, user satisfaction rating, abandonment rate</li> </ul>"},{"location":"user-guide/ux/processing-workflow-user-journey/#accessibility-testing","title":"Accessibility Testing","text":"<ul> <li>Screen reader testing (NVDA, JAWS, VoiceOver)</li> <li>Keyboard navigation validation</li> <li>Color contrast verification</li> <li>Reduced motion preference testing</li> </ul>"},{"location":"user-guide/ux/processing-workflow-user-journey/#implementation-priority","title":"Implementation Priority","text":""},{"location":"user-guide/ux/processing-workflow-user-journey/#p0-must-have","title":"P0 (Must Have)","text":"<ul> <li> Single message container design</li> <li> Fade transitions between messages</li> <li> Handoff messaging between agents</li> <li> ARIA live region for screen readers</li> <li> Responsive mobile layout</li> </ul>"},{"location":"user-guide/ux/processing-workflow-user-journey/#p1-should-have","title":"P1 (Should Have)","text":"<ul> <li> Processing indicator (animated dots)</li> <li> Reduced motion support</li> <li> Dark mode compatibility</li> <li> Enhanced animation polish</li> </ul>"},{"location":"user-guide/ux/processing-workflow-user-journey/#p2-nice-to-have","title":"P2 (Nice to Have)","text":"<ul> <li> Sound effects for transitions (optional, muted by default)</li> <li> Haptic feedback on mobile (subtle vibration on completions)</li> <li> Agent avatar images instead of emoji icons</li> </ul>"},{"location":"user-guide/ux/processing-workflow-user-journey/#risks-mitigations","title":"Risks &amp; Mitigations","text":""},{"location":"user-guide/ux/processing-workflow-user-journey/#risk-1-users-miss-information","title":"Risk 1: Users Miss Information","text":"<p>Concern: Single message means previous agent messages disappear Mitigation: - Keep completion message visible for 500ms before transition - Final message includes overall approval status - Full audit trail available in results page</p>"},{"location":"user-guide/ux/processing-workflow-user-journey/#risk-2-timing-feels-too-fastslow","title":"Risk 2: Timing Feels Too Fast/Slow","text":"<p>Concern: 6-second workflow might feel rushed or dragged Mitigation: - Configurable timing constants for easy adjustment - A/B test different timing patterns - Collect user feedback on pacing</p>"},{"location":"user-guide/ux/processing-workflow-user-journey/#risk-3-animation-jank-on-older-devices","title":"Risk 3: Animation Jank on Older Devices","text":"<p>Concern: CSS transitions might stutter on low-end phones Mitigation: - Use GPU-accelerated properties (transform, opacity) - Test on iPhone SE, older Android devices - Fallback to instant updates if <code>prefers-reduced-motion</code></p>"},{"location":"user-guide/ux/processing-workflow-user-journey/#risk-4-screen-reader-overload","title":"Risk 4: Screen Reader Overload","text":"<p>Concern: Too many rapid updates might overwhelm screen reader users Mitigation: - Use <code>aria-live=\"polite\"</code> (not \"assertive\") - Announce full message context each time - Test with actual screen reader users</p>"},{"location":"user-guide/ux/processing-workflow-user-journey/#next-steps","title":"Next Steps","text":"<ol> <li>Share with Product Manager Agent: Validate business goals alignment</li> <li>Share with Responsible AI Agent: Comprehensive accessibility review</li> <li>Create Implementation Ticket: Detailed engineering requirements</li> <li>Schedule User Testing: Recruit 5 users for moderated testing</li> <li>Set Up A/B Test: Configure split testing infrastructure</li> </ol>"},{"location":"user-guide/ux/processing-workflow-user-journey/#related-documentation","title":"Related Documentation","text":"<ul> <li>UX Design Specification: <code>/workspaces/loan-avengers/docs/ux/processing-workflow-single-message-design.md</code></li> <li>Current Implementation: <code>/workspaces/loan-avengers/loan_avengers/ui/src/pages/application/ApplicationPage.tsx</code></li> <li>User Journey Template: <code>/workspaces/loan-avengers/docs/templates/user-journey-template.md</code></li> </ul>"},{"location":"user-guide/ux/processing-workflow-user-journey/#approval-status","title":"Approval Status","text":"<p>UX Designer: \u2705 Approved - User journey validated Product Manager: \u23f3 Pending review Responsible AI: \u23f3 Pending accessibility audit Engineering: \u23f3 Pending implementation feasibility review</p>"},{"location":"user-guide/ux/revolutionary-loan-experience-user-journey/","title":"Revolutionary Loan Experience - User Journey Map","text":""},{"location":"user-guide/ux/revolutionary-loan-experience-user-journey/#executive-summary","title":"Executive Summary","text":"<p>This user journey transforms the traditional loan application from a form-based, anxiety-inducing process into an exciting, confidence-building conversation with AI. The design eliminates boring forms entirely, leveraging conversational AI and beautiful visualizations to create a next-generation financial experience.</p>"},{"location":"user-guide/ux/revolutionary-loan-experience-user-journey/#user-persona","title":"User Persona","text":"<p>Primary User: Hawk-Income, 32, Software Engineer - Goal: Purchase a $450K home - Current Situation: Excellent credit (780), stable income, tech-savvy - Expectations: Consumer-grade digital experience (Netflix, Uber level) - Emotional State: Excited about homeownership but anxious about loan complexity - Device Usage: Primary mobile, secondary desktop - Pain Points with Traditional Loans: Confusing forms, unclear status, slow responses</p>"},{"location":"user-guide/ux/revolutionary-loan-experience-user-journey/#complete-user-journey","title":"Complete User Journey","text":""},{"location":"user-guide/ux/revolutionary-loan-experience-user-journey/#phase-1-goal-discovery-30-seconds","title":"Phase 1: Goal Discovery (30 seconds)","text":"<p>User State: Curious, slightly cautious</p>"},{"location":"user-guide/ux/revolutionary-loan-experience-user-journey/#step-11-personalized-welcome","title":"Step 1.1: Personalized Welcome","text":"<ul> <li>Trigger: User logs into their existing account</li> <li>Interface: Clean dashboard with personalized greeting</li> <li>User Sees:   <pre><code>\"Welcome back, Hawk-Income! \ud83d\udc4b\nReady to make your homeownership dreams reality?\nWhat's on your mind today?\"\n\n[Large, inviting text input with voice option]\n[Suggested quick starts: \"Buy a home\", \"Refinance\", \"Personal loan\"]\n</code></pre></li> <li>User Action: Types \"I'm looking at a house for $450K\"</li> <li>Emotional Response: Feels welcomed, not judged</li> </ul>"},{"location":"user-guide/ux/revolutionary-loan-experience-user-journey/#step-12-ai-enthusiasm-validation","title":"Step 1.2: AI Enthusiasm &amp; Validation","text":"<ul> <li>System Response:   <pre><code>\"A $450K home - that's so exciting! \ud83c\udfe1\nBased on your profile, you're in a really strong position for this.\nLet me show you what this could look like...\"\n</code></pre></li> <li>Visual Change: Beautiful home illustration appears</li> <li>Pre-fill Magic: System shows instant loan preview using profile data</li> <li>Emotional Response: Excitement builds, anxiety reduces</li> </ul>"},{"location":"user-guide/ux/revolutionary-loan-experience-user-journey/#phase-2-intelligent-conversation-2-3-minutes","title":"Phase 2: Intelligent Conversation (2-3 minutes)","text":"<p>User State: Engaged, building confidence</p>"},{"location":"user-guide/ux/revolutionary-loan-experience-user-journey/#step-21-smart-context-gathering","title":"Step 2.1: Smart Context Gathering","text":"<ul> <li>Approach: Conversational questions, NOT forms</li> <li>Example Flow:   <pre><code>\"I see you work at TechCorp as a Senior Engineer.\nHow's your income situation looking these days?\n\n\ud83d\udcb0 Same as last year    \ud83d\udcc8 Got a raise!    \ud83d\udcbc New job recently\n</code></pre></li> <li>User Action: Selects \"Got a raise!\"</li> <li>System Response: \"That's fantastic! Congratulations \ud83c\udf89\"</li> </ul>"},{"location":"user-guide/ux/revolutionary-loan-experience-user-journey/#step-22-visual-loan-building","title":"Step 2.2: Visual Loan Building","text":"<ul> <li>Each Answer Creates: Animated card showing loan taking shape</li> <li>Real-time Updates: Loan terms adjust instantly as information provided</li> <li>Visual Feedback:   <pre><code>\u250c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2510\n\u2502  \ud83c\udfe1 Your Dream Home             \u2502\n\u2502  $450,000                       \u2502\n\u2502  \u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500          \u2502\n\u2502  \ud83d\udcb3 Estimated Payment: $2,847   \u2502\n\u2502  \ud83d\udcca 30-year fixed               \u2502\n\u2502  \ud83d\udcc8 Estimated Rate: 6.2%        \u2502\n\u2502  \u2728 Pre-approved amount ready   \u2502\n\u2514\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2518\n</code></pre></li> </ul>"},{"location":"user-guide/ux/revolutionary-loan-experience-user-journey/#step-23-trust-building","title":"Step 2.3: Trust Building","text":"<ul> <li>Privacy Assurance: \"Your information is secure and only used for your loan assessment\"</li> <li>Human Backup: \"Need to talk to someone? Hawk-Income (Loan Officer) is available\"</li> <li>Transparency: \"Here's exactly what we'll check and why\"</li> </ul>"},{"location":"user-guide/ux/revolutionary-loan-experience-user-journey/#phase-3-ai-powered-assessment-30-60-seconds","title":"Phase 3: AI-Powered Assessment (30-60 seconds)","text":"<p>User State: Anticipation, maintained confidence</p>"},{"location":"user-guide/ux/revolutionary-loan-experience-user-journey/#step-31-beautiful-loading-experience","title":"Step 3.1: Beautiful Loading Experience","text":"<ul> <li>Not a spinner: \"Your AI Dream Team\" visualization</li> <li>The Team:   <pre><code>\ud83d\udc69\u200d\ud83d\udcbc Hawk-Income - Income Specialist: \"Verifying your excellent earnings...\"\n\ud83d\udc68\u200d\ud83d\udcbb Scarlet Witch-Credit - Credit Analyst: \"Your 780 score is impressive!\"\n\u2696\ufe0f Doctor Strange-Risk - Risk Assessor: \"Ensuring this fits your goals perfectly\"\n\ud83c\udfaf Cap-ital America - Decision Coordinator: \"Putting together your best offer\"\n</code></pre></li> </ul>"},{"location":"user-guide/ux/revolutionary-loan-experience-user-journey/#step-32-real-time-progress-updates","title":"Step 3.2: Real-time Progress Updates","text":"<ul> <li>Agent Handoffs: Visual connections showing data flowing</li> <li>Status Updates:   <pre><code>\u2705 Income Verified - Looking strong!\n\u2705 Credit Assessed - Excellent profile!\n\ud83d\udd04 Risk Analysis - Calculating your best terms...\n\u23f3 Final Decision - Almost ready!\n</code></pre></li> </ul>"},{"location":"user-guide/ux/revolutionary-loan-experience-user-journey/#step-33-process-transparency","title":"Step 3.3: Process Transparency","text":"<ul> <li>What Each Agent Does: Clear explanations without jargon</li> <li>Why It Matters: \"This ensures you get our absolute best rate\"</li> <li>Timeline: \"Should be ready in about 30 seconds\"</li> </ul>"},{"location":"user-guide/ux/revolutionary-loan-experience-user-journey/#phase-4-celebration-next-steps-1-minute","title":"Phase 4: Celebration &amp; Next Steps (1 minute)","text":"<p>User State: Excitement, relief, empowerment</p>"},{"location":"user-guide/ux/revolutionary-loan-experience-user-journey/#step-41-results-reveal","title":"Step 4.1: Results Reveal","text":"<ul> <li>Dramatic Unveiling: Card flip animation revealing decision</li> <li>Celebration: Confetti animation for approvals</li> <li>Clear Results:   <pre><code>\ud83c\udf89 Congratulations Hawk-Income!\n\nYou're APPROVED for $425,000 at 6.2% APR\nMonthly payment: $2,847\n\nYour excellent credit score of 780 earned you our best rate!\nThis payment leaves you comfortable room in your budget.\n</code></pre></li> </ul>"},{"location":"user-guide/ux/revolutionary-loan-experience-user-journey/#step-42-immediate-next-steps","title":"Step 4.2: Immediate Next Steps","text":"<ul> <li>One-Click Actions: \"Connect with Loan Officer\", \"Download Pre-approval\"</li> <li>Save Scenario: \"Save this loan plan\", \"Explore other amounts\"</li> <li>Share Success: \"Share with your realtor\", \"Calculate affordability\"</li> </ul>"},{"location":"user-guide/ux/revolutionary-loan-experience-user-journey/#step-43-continued-engagement","title":"Step 4.3: Continued Engagement","text":"<ul> <li>No Dead Ends: Always provide next logical action</li> <li>Options:</li> <li>Schedule call with human loan officer</li> <li>Download official pre-approval letter</li> <li>Explore different loan amounts or terms</li> <li>Connect with real estate partners</li> <li>Set up rate monitoring alerts</li> </ul>"},{"location":"user-guide/ux/revolutionary-loan-experience-user-journey/#technical-implementation-considerations","title":"Technical Implementation Considerations","text":""},{"location":"user-guide/ux/revolutionary-loan-experience-user-journey/#multi-agent-workflow-integration","title":"Multi-Agent Workflow Integration","text":"<ul> <li>Intake Agent: Handles initial conversation and data gathering</li> <li>Credit Agent: Processes credit assessment with friendly updates</li> <li>Income Agent: Verifies employment and income with positive reinforcement</li> <li>Risk Agent: Synthesizes assessments with transparent explanations</li> <li>Orchestrator Agent: Delivers final decision with celebration</li> </ul>"},{"location":"user-guide/ux/revolutionary-loan-experience-user-journey/#real-time-updates","title":"Real-time Updates","text":"<ul> <li>WebSocket Connection: For live agent status updates</li> <li>Progressive Loading: Show information as each agent completes</li> <li>Fallback Handling: Graceful degradation if agents take longer</li> </ul>"},{"location":"user-guide/ux/revolutionary-loan-experience-user-journey/#mobile-optimization","title":"Mobile Optimization","text":"<ul> <li>Voice-First: Primary input method on mobile</li> <li>Thumb Navigation: All actions within easy reach</li> <li>Offline Capability: Save progress locally if connection drops</li> <li>Push Notifications: Updates when user returns to app</li> </ul>"},{"location":"user-guide/ux/revolutionary-loan-experience-user-journey/#success-metrics","title":"Success Metrics","text":""},{"location":"user-guide/ux/revolutionary-loan-experience-user-journey/#user-experience-metrics","title":"User Experience Metrics","text":"<ul> <li>Time to Completion: Target under 5 minutes total</li> <li>Drop-off Rate: Less than 10% abandonment</li> <li>User Satisfaction: 9+ NPS score</li> <li>Mobile Completion Rate: 80%+ complete on mobile</li> </ul>"},{"location":"user-guide/ux/revolutionary-loan-experience-user-journey/#business-metrics","title":"Business Metrics","text":"<ul> <li>Conversion Rate: Applications to completed loans</li> <li>Agent Efficiency: Automated vs. manual processing ratio</li> <li>Customer Lifetime Value: Increased through better experience</li> <li>Cost per Acquisition: Reduced through improved conversion</li> </ul>"},{"location":"user-guide/ux/revolutionary-loan-experience-user-journey/#accessibility-compliance","title":"Accessibility Compliance","text":""},{"location":"user-guide/ux/revolutionary-loan-experience-user-journey/#screen-reader-support","title":"Screen Reader Support","text":"<ul> <li>ARIA Labels: All interactive elements properly labeled</li> <li>Semantic HTML: Proper heading structure and landmarks</li> <li>Alt Text: Descriptive text for all visual elements</li> <li>Focus Management: Logical tab order and focus indicators</li> </ul>"},{"location":"user-guide/ux/revolutionary-loan-experience-user-journey/#visual-accessibility","title":"Visual Accessibility","text":"<ul> <li>Color Contrast: WCAG 2.1 AA compliant contrast ratios</li> <li>Text Size: Readable without zooming, scalable text</li> <li>Color Independence: Never rely solely on color for meaning</li> <li>Motion Sensitivity: Reduced motion option for animations</li> </ul>"},{"location":"user-guide/ux/revolutionary-loan-experience-user-journey/#motor-accessibility","title":"Motor Accessibility","text":"<ul> <li>Large Touch Targets: Minimum 44px for all interactive elements</li> <li>Keyboard Navigation: Full functionality without mouse</li> <li>Voice Input: Alternative to typing for users with motor limitations</li> <li>Timeout Extensions: Allow users more time when needed</li> </ul>"},{"location":"user-guide/ux/revolutionary-loan-experience-user-journey/#error-handling-edge-cases","title":"Error Handling &amp; Edge Cases","text":""},{"location":"user-guide/ux/revolutionary-loan-experience-user-journey/#system-errors","title":"System Errors","text":"<ul> <li>Graceful Degradation: Fall back to human assistance</li> <li>Clear Communication: Explain what happened and next steps</li> <li>Recovery Path: Easy way to resume where they left off</li> </ul>"},{"location":"user-guide/ux/revolutionary-loan-experience-user-journey/#user-input-errors","title":"User Input Errors","text":"<ul> <li>Preventive Design: Guide users toward correct inputs</li> <li>Helpful Messages: Specific guidance, not generic errors</li> <li>No Dead Ends: Always provide path forward</li> </ul>"},{"location":"user-guide/ux/revolutionary-loan-experience-user-journey/#agent-processing-issues","title":"Agent Processing Issues","text":"<ul> <li>Transparent Delays: Explain if processing takes longer</li> <li>Human Handoff: Seamless transfer to human agent</li> <li>Status Recovery: Resume from last successful step</li> </ul>"},{"location":"user-guide/ux/revolutionary-loan-experience-user-journey/#privacy-security-considerations","title":"Privacy &amp; Security Considerations","text":""},{"location":"user-guide/ux/revolutionary-loan-experience-user-journey/#data-protection","title":"Data Protection","text":"<ul> <li>Minimal Collection: Only gather necessary information</li> <li>Clear Consent: Explicit permission for data usage</li> <li>Secure Transmission: All data encrypted in transit</li> <li>Audit Trail: Complete record of user interactions</li> </ul>"},{"location":"user-guide/ux/revolutionary-loan-experience-user-journey/#user-control","title":"User Control","text":"<ul> <li>Data Deletion: Easy way to remove personal information</li> <li>Export Options: Users can download their data</li> <li>Consent Management: Granular control over data usage</li> <li>Privacy Dashboard: Clear view of what data is collected</li> </ul>"},{"location":"user-guide/ux/revolutionary-loan-experience-user-journey/#future-enhancement-opportunities","title":"Future Enhancement Opportunities","text":""},{"location":"user-guide/ux/revolutionary-loan-experience-user-journey/#personalization-evolution","title":"Personalization Evolution","text":"<ul> <li>Learning System: Adapt interface based on user behavior</li> <li>Custom Workflows: Tailor flow to user's specific situation</li> <li>Predictive Assistance: Anticipate user needs and questions</li> </ul>"},{"location":"user-guide/ux/revolutionary-loan-experience-user-journey/#integration-expansion","title":"Integration Expansion","text":"<ul> <li>Real Estate Platforms: Direct integration with property searches</li> <li>Financial Planning: Connect loan to broader financial goals</li> <li>Document Automation: Auto-populate required paperwork</li> </ul>"},{"location":"user-guide/ux/revolutionary-loan-experience-user-journey/#ai-enhancement","title":"AI Enhancement","text":"<ul> <li>Natural Language Processing: More sophisticated conversation</li> <li>Emotional Intelligence: Detect and respond to user emotions</li> <li>Predictive Modeling: Better loan terms and recommendations</li> </ul> <p>Document Version: 1.0 Last Updated: 2025-09-25 Created By: UX Design Agent Stakeholders: Product, Engineering, Responsible AI, Business</p>"},{"location":"user-guide/ux/user-personas/","title":"User Personas &amp; Success Metrics","text":""},{"location":"user-guide/ux/user-personas/#user-journey-overview","title":"User Journey Overview","text":"<p>The loan processing system serves multiple user types through a streamlined, agent-driven workflow that transforms traditional 3-5 day manual processes into 3-5 minute automated decisions.</p> <p>Connected Framework: These personas directly inform our Jobs-to-be-Done framework, which drives multi-agent system design around customer jobs rather than internal processes.</p>"},{"location":"user-guide/ux/user-personas/#primary-user-personas","title":"Primary User Personas","text":""},{"location":"user-guide/ux/user-personas/#1-loan-applicant-hawk-income-the-home-buyer","title":"1. Loan Applicant - \"Hawk-Income the Home Buyer\"","text":"<p>Demographics &amp; Context - Age: 32, married, first-time home buyer - Income: $75,000/year, employed 3 years - Credit: 720 score, some student debt - Tech comfort: High, expects digital-first experience</p> <p>Goals &amp; Motivations - Primary Job: Get approved for home loan quickly with fair terms - Emotional Need: Confidence in fairness, reduced anxiety about process - Success Criteria: Pre-approval in minutes, clear next steps, competitive rates</p> <p>Pain Points (Current State) - Lengthy application forms with repetitive data entry - Uncertainty about approval chances and timeline - Opaque decision-making process - Multiple document requests and delays</p> <p>Value Delivered (With System) - Complete application in 10 minutes with intelligent pre-population - Real-time validation and guidance - Decision in 3-5 minutes with clear rationale - Transparent process with progress indicators</p> <p>Success Metrics - Application completion rate: &gt;95% - Time to complete application: &lt;10 minutes - Customer satisfaction score: &gt;4.7/5 - Net Promoter Score: &gt;70</p>"},{"location":"user-guide/ux/user-personas/#2-loan-officer-scarlet-witch-credit-the-processor","title":"2. Loan Officer - \"Scarlet Witch-Credit the Processor\"","text":"<p>Demographics &amp; Context - Age: 28, 2 years experience in lending - Background: Finance degree, loan processing certification - Daily volume: Currently handles 8-12 applications - Tech skills: Moderate, comfortable with loan software</p> <p>Goals &amp; Motivations - Primary Job: Process high-quality loan decisions efficiently - Business Need: Increase throughput without sacrificing quality - Career Goal: Focus on complex cases and customer relationships</p> <p>Pain Points (Current State) - Manual review of routine applications takes 3-4 hours each - Inconsistent decision criteria across applications - Difficulty tracking application status and bottlenecks - High stress from processing backlogs</p> <p>Value Delivered (With System) - Focus on exceptions and complex cases only - Handle 10x volume with same staff - Consistent, documented decision rationale - Real-time pipeline visibility and management</p> <p>Success Metrics - Applications processed per day: 80-100 (vs 8-12) - Decision consistency score: &gt;95% - Exception handling time: &lt;30 minutes - Job satisfaction score: &gt;4.0/5</p>"},{"location":"user-guide/ux/user-personas/#3-compliance-manager-patricia-the-risk-guardian","title":"3. Compliance Manager - \"Patricia the Risk Guardian\"","text":"<p>Demographics &amp; Context - Age: 45, 15 years financial services experience - Background: MBA, CRA certification, risk management - Responsibility: Regulatory compliance, audit readiness - Challenge: Manual compliance checks and documentation</p> <p>Goals &amp; Motivations - Primary Job: Ensure all loans comply with regulations - Risk Management: Prevent violations and regulatory penalties - Efficiency Goal: Automate compliance without compromising thoroughness</p> <p>Pain Points (Current State) - Manual ECOA, FCRA, and TILA compliance checks - Inconsistent documentation across loan officers - Difficulty generating audit reports - Reactive rather than proactive compliance monitoring</p> <p>Value Delivered (With System) - Automated compliance checks with every decision - Complete audit trails with rationale - Real-time compliance monitoring and alerts - Proactive risk identification and mitigation</p> <p>Success Metrics - Compliance violation rate: 0% - Audit preparation time: &lt;1 day (vs 2 weeks) - Documentation completeness: 100% - Regulatory examiner feedback: \"Excellent\"</p>"},{"location":"user-guide/ux/user-personas/#4-it-director-david-the-integrator","title":"4. IT Director - \"David the Integrator\"","text":"<p>Demographics &amp; Context - Age: 40, 12 years financial services IT - Background: Computer Science, enterprise architecture - Responsibility: System integration, technology strategy - Challenge: Legacy system integration and vendor management</p> <p>Goals &amp; Motivations - Primary Job: Integrate loan processing with existing systems - Strategic Goal: Reduce vendor lock-in and increase flexibility - Operational Need: Minimize maintenance overhead</p> <p>Pain Points (Current State) - Proprietary systems with expensive vendor dependencies - Complex integrations requiring custom development - Difficulty changing vendors or upgrading systems - High total cost of ownership</p> <p>Value Delivered (With System) - Framework-agnostic business logic reduces vendor lock-in - MCP server architecture enables flexible integrations - Clean APIs for existing system integration - Reduced custom development requirements</p> <p>Success Metrics - Integration time: &lt;2 weeks (vs 6 months) - Vendor flexibility: Support for 3+ agent frameworks - Maintenance overhead: &lt;0.5 FTE (vs 2 FTE) - System uptime: &gt;99.9%</p>"},{"location":"user-guide/ux/user-personas/#user-journey-mapping","title":"User Journey Mapping","text":""},{"location":"user-guide/ux/user-personas/#applicant-journey-hawk-incomes-home-loan-experience","title":"Applicant Journey - \"Hawk-Income's Home Loan Experience\"","text":"<p>Phase 1: Discovery &amp; Application (10 minutes) 1. Trigger: Found dream home, needs financing quickly 2. Entry: Visits lender website, starts application 3. Experience: Intelligent form with pre-population, real-time validation 4. Outcome: Complete application submitted with confidence</p> <p>Phase 2: Processing &amp; Decision (5 minutes) 1. Intake Agent: Validates data completeness, routes to appropriate agents 2. Credit Agent: Analyzes credit profile, identifies strengths 3. Income Agent: Verifies employment and income stability 4. Risk Agent: Synthesizes assessment, determines appropriate terms 5. Orchestrator: Delivers decision with clear rationale</p> <p>Phase 3: Decision &amp; Next Steps (Immediate) 1. Decision Delivery: Clear approval with terms explanation 2. Next Steps: Automated scheduling of closing process 3. Communication: Regular updates on loan progress 4. Satisfaction: Post-approval satisfaction survey</p> <p>Key Touchpoints - Application start: Clear expectations and time estimate - Data validation: Real-time feedback and guidance - Processing status: Progress indicators and estimated completion - Decision delivery: Comprehensive explanation and rationale - Follow-up: Proactive communication about next steps</p>"},{"location":"user-guide/ux/user-personas/#loan-officer-journey-scarlet-witch-credits-daily-workflow","title":"Loan Officer Journey - \"Scarlet Witch-Credit's Daily Workflow\"","text":"<p>Morning Setup (15 minutes) - Dashboard review: Pipeline status, priority applications - Exception queue: Applications requiring manual review - Performance metrics: Daily/weekly processing targets</p> <p>Hourly Processing - Routine Applications: Automated processing with monitoring - Exception Handling: Focus on complex cases requiring expertise - Quality Assurance: Spot-check automated decisions - Customer Communication: Handle applicant questions and concerns</p> <p>End-of-Day Review - Performance dashboard: Volume, quality, customer satisfaction - Pipeline management: Upcoming deadlines and priorities - Continuous improvement: Feedback on system performance</p>"},{"location":"user-guide/ux/user-personas/#success-measurement-framework","title":"Success Measurement Framework","text":""},{"location":"user-guide/ux/user-personas/#user-experience-metrics","title":"User Experience Metrics","text":"<p>Applicant Success - Application abandonment rate: &lt;5% - Time to complete application: &lt;10 minutes - Customer effort score: &lt;2.0 (scale 1-5) - Customer satisfaction: &gt;4.5/5</p> <p>Process Efficiency - Application processing time: &lt;5 minutes - First-pass accuracy rate: &gt;95% - Exception rate: &lt;10% - SLA compliance: &gt;99%</p> <p>Business Impact - Cost per application: &lt;$10 - Processing capacity: 10x increase - Revenue per application: 20% increase - Market share growth: 15% annually</p>"},{"location":"user-guide/ux/user-personas/#quality-metrics","title":"Quality Metrics","text":"<p>Decision Quality - Prediction accuracy: &gt;95% - False positive rate: &lt;3% - False negative rate: &lt;2% - Appeal rate: &lt;1%</p> <p>Compliance Quality - Regulatory violation rate: 0% - Audit findings: None - Documentation completeness: 100% - Fair lending compliance: 100%</p> <p>System Quality - System availability: &gt;99.9% - Response time: &lt;2 seconds - Error rate: &lt;0.1% - Security incidents: 0</p>"},{"location":"user-guide/ux/user-personas/#personas-usage-guide-for-agents","title":"Personas Usage Guide for Agents","text":""},{"location":"user-guide/ux/user-personas/#for-product-manager-agent","title":"For Product Manager Agent","text":"<ul> <li>Reference business context and success metrics when defining features</li> <li>Use persona pain points to identify improvement opportunities</li> <li>Align feature priorities with user impact and business value</li> </ul>"},{"location":"user-guide/ux/user-personas/#for-ux-designer-agent","title":"For UX Designer Agent","text":"<ul> <li>Design workflows around persona goals and emotional needs</li> <li>Address specific pain points in user interface design</li> <li>Validate designs against persona success criteria</li> </ul>"},{"location":"user-guide/ux/user-personas/#for-architecture-reviewer-agent","title":"For Architecture Reviewer Agent","text":"<ul> <li>Consider persona scalability needs in system design</li> <li>Ensure security requirements meet compliance personas</li> <li>Design for persona workflow efficiency and reliability</li> </ul>"},{"location":"user-guide/ux/user-personas/#for-code-quality-agent","title":"For Code Quality Agent","text":"<ul> <li>Implement features that address persona pain points</li> <li>Ensure performance meets persona success criteria</li> <li>Validate business logic against persona requirements</li> </ul> <p>This persona framework ensures all agent decisions remain user-focused and business-aligned throughout the development process.</p>"}]}